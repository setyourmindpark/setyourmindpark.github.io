<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>portainer</title>
      <link href="/2018/05/15/docker/docker-8/"/>
      <content type="html"><![CDATA[<h2 id="portainer"><a href="#portainer" class="headerlink" title="portainer"></a>portainer</h2><p>docker swarm 또는 single machine 환경에서 monitoring과 gui 환경을 제공하여 설정할수있는 image를 알게되었다.<br>더군다나 swarm 환경에서는 stack, service, container, network, node, secret등 모든 설정을 gui 환경으로 설정할수있으며 더이상 명령어로 해결하지않음에 너무 만족스럽다.<br>불과 1년전만해도 tool이 없어 굉장히 불편했던 기억이있다. 아니나다를까 docker hub portainer 최초 build 일자를 확인해보니 <a href="https://hub.docker.com/r/portainer/portainer/tags/" target="_blank" rel="noopener">https://hub.docker.com/r/portainer/portainer/tags/</a> 지금으로부터 6개월전, 2017년 11월쯤 최초 publish 된듯하다.<br>사실 portainer를 접하기전 docker swarm 관련 환경 설정은 둘째치고 monitoring 할수있는 tool을 열심히 찾다 종종 granfa를 사용하였는데 생각보다 마음에 들지않았다.( 너무 개발자같은 ui와 가끔 node의 container resources 가 watching 되지않는 문제등 )<br>얼마전까지도 kubernetes의 dashboard 가 마냥 부럽기도 했던기억이.. </p><h2 id="setup-portainer"><a href="#setup-portainer" class="headerlink" title="setup portainer"></a>setup portainer</h2><p>official portainer document를 보면 setup은 정말 너무도 쉽다.<br><a href="https://portainer.readthedocs.io/en/latest/deployment.html" target="_blank" rel="noopener">https://portainer.readthedocs.io/en/latest/deployment.html</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl -L https://portainer.io/download/portainer-agent-stack.yml -o portainer-agent-stack.yml</div><div class="line">$ docker stack deploy --compose-file=portainer-agent-stack.yml portainer</div></pre></td></tr></table></figure></p><p>docker swarm 환경에서 단 2줄로 portainer가 구동된다.<br>그리고 swarm 환경의 아무 node-ip:9000 접속시 ( overlay network의 ingress로 동작 ) admin password 설정후 다음과 같은 화면이 나타난다.<br><img src="/2018/05/15/docker/docker-8/docker-8-1.png" alt="docker-8"><br>설치후 이것저것 설정해보니 정말 모든 명령어를 더이상 입력하여 설정하지않을만큼 편리했다.  </p><h2 id="견해"><a href="#견해" class="headerlink" title="견해"></a>견해</h2><p>monitoring 관련해서는 살짝 아쉬운 부분이 있긴하다. container 단위로 cpu, memory, network 단위로 watching 하여 graph로 표현이된다. node 단위나 stack, 또는 service 단위로 resources들을 확인할수있으면 더욱 편리할것같다.<br>그래도 gui 환경으로 모든 설정이 가능한게 어디인가.. portainer 개발자분들께 감사의 말씀을 드리고싶다.<br>필자는 사실 docker 기반으로 service를 배포하거나 production 환경에서 운영해본적이없다.<br>언젠가 docker 환경에서 service를 운영해볼날이 있지않을까 생각해본다.  </p>]]></content>
      
      <categories>
          
          <category> portainer </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>the way to parallel processing( nodejs )</title>
      <link href="/2018/05/14/nodejs/nodejs-6/"/>
      <content type="html"><![CDATA[<h2 id="the-way-to-parallel-processing"><a href="#the-way-to-parallel-processing" class="headerlink" title="the way to parallel processing"></a>the way to parallel processing</h2><p>callback hell을 회피하기위해 Promise, async await 과 같은 라이브러리들을 사용함으로 어느정도 callback hell에대한 이슈들을 커버한다.<br>특히 async await은  동기코드로 작성할수있는 효과와 무엇보다 가독성이 좋아서 매우 만족스럽다.<br>하지만 ‘async await이 무조건 좋다’ 보다는 상황에 맞게 써야한다는것을 새삼깨달았다.<br>특히 병렬처리( 다중 비동기처리 ) 를 수행함에있어서 async await는 사용하지말아야할 것임은 분명하다.<br>코드를통해 어떻게 동작하는지, 그리고 어떤상황에 효율적으로 써야하는지 정리하려한다.  </p><h2 id="Promise-그리고-bluebird"><a href="#Promise-그리고-bluebird" class="headerlink" title="Promise 그리고 bluebird"></a>Promise 그리고 bluebird</h2><p>병렬처리라고 하면 Promise.all 또는 bluebird.map을 활용하여 처리할수있다.<br>다음과같이 기본적인 병렬처리로직을 구성할수있다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> bluebird = <span class="built_in">require</span>(<span class="string">'bluebird'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">task</span>(<span class="params">&#123; num &#125;</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> second = <span class="number">1000</span>;</div><div class="line">        <span class="keyword">const</span> tenSeconds = <span class="number">10</span> * second;        </div><div class="line">        <span class="keyword">const</span> timeoutSeconds = tenSeconds - (num * second);         <span class="comment">// num 이 1이면 timeout = 9초, num이 2이면 timeout = 8초</span></div><div class="line"></div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </div><div class="line">            <span class="built_in">console</span>.log(num + <span class="string">' 실행'</span>);</div><div class="line">            resolve(num); </div><div class="line">        &#125;, timeoutSeconds);        </div><div class="line">    &#125;)</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> list = [</div><div class="line">    &#123; <span class="attr">num</span>: <span class="number">0</span> &#125;,</div><div class="line">    &#123; <span class="attr">num</span>: <span class="number">1</span> &#125;,</div><div class="line">    &#123; <span class="attr">num</span>: <span class="number">2</span> &#125;,</div><div class="line">    &#123; <span class="attr">num</span>: <span class="number">3</span> &#125;,</div><div class="line">    &#123; <span class="attr">num</span>: <span class="number">4</span> &#125;,</div><div class="line">    &#123; <span class="attr">num</span>: <span class="number">5</span> &#125;,</div><div class="line">    &#123; <span class="attr">num</span>: <span class="number">6</span> &#125;,</div><div class="line">    &#123; <span class="attr">num</span>: <span class="number">7</span> &#125;,</div><div class="line">    &#123; <span class="attr">num</span>: <span class="number">8</span> &#125;,</div><div class="line">    &#123; <span class="attr">num</span>: <span class="number">9</span> &#125;,</div><div class="line">];</div><div class="line"></div><div class="line"><span class="function">(<span class="params"> <span class="keyword">async</span> (</span>) =&gt;</span> &#123;    </div><div class="line">    <span class="keyword">const</span> result1 = <span class="keyword">await</span> bluebird.map(list, item =&gt; task(item))             <span class="comment">// bluebird style</span></div><div class="line">    <span class="keyword">const</span> result2 = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(list.map(<span class="function"><span class="params">item</span> =&gt;</span> task(item)))          <span class="comment">// promise style</span></div><div class="line">    <span class="comment">// 9 실행</span></div><div class="line">    <span class="comment">// 8 실행</span></div><div class="line">    <span class="comment">// 7 실행</span></div><div class="line">    <span class="comment">// 6 실행</span></div><div class="line">    <span class="comment">// 5 실행</span></div><div class="line">    <span class="comment">// 4 실행</span></div><div class="line">    <span class="comment">// 3 실행</span></div><div class="line">    <span class="comment">// 2 실행</span></div><div class="line">    <span class="comment">// 1 실행</span></div><div class="line">    <span class="comment">// 0 실행</span></div><div class="line">    <span class="comment">// [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]</span></div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p><p>결과는 동일하며 num 이 0이 최대 10초가걸리므로 10개의 프로세스가 10초내에 모두 완료되어 병렬처리가된것을 확인할수있다.  </p><h2 id="어느상황에-적합한가"><a href="#어느상황에-적합한가" class="headerlink" title="어느상황에 적합한가 ?"></a>어느상황에 적합한가 ?</h2><p>server에서 scheduler를 통해 mobile에 알림을 push 한다던지, 특정 조건에 만족하는 사용자에게 mail을 send 한다던지 같은 비지니스로직내에서 수신주체가 다를경우 유용하게 사용할수있다.<br>예를들어 10000명에게 특정 mail을 send한다고 가정하면 async await을 사용시 동기로 동작하기에 1번 사용자 발송 완료되면 2번 그리고 3번 … 10000 번 사용자까지 반복할것이다.<br>이렇게되면 10000번 사용자는 메일발송 로직이 수행되고나서 한참뒤에 메일을 받게되어 서비스상 문제가될수있다.<br>그래서 다음과 같이 정의할수있다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> bluebird = <span class="built_in">require</span>(<span class="string">'bluebird'</span>);</div><div class="line"><span class="keyword">const</span> nodemailer = <span class="built_in">require</span>(<span class="string">'nodemailer'</span>);</div><div class="line"><span class="keyword">const</span> config = reqlib(<span class="string">'/config'</span>);</div><div class="line"><span class="keyword">const</span> &#123; service, user, passwd, <span class="keyword">from</span> &#125; = config.setting.sender.mail;</div><div class="line"><span class="keyword">const</span> sender = nodemailer.createTransport(&#123;</div><div class="line">    <span class="attr">service</span>: service,</div><div class="line">    <span class="attr">auth</span>: &#123;</div><div class="line">        <span class="attr">user</span>: user,</div><div class="line">        <span class="attr">pass</span>: passwd</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">&#123; to, subject, text, html &#125;</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params"> resolve, reject </span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> options = &#123; <span class="attr">from</span>: <span class="keyword">from</span>, <span class="attr">to</span>: to, <span class="attr">subject</span>: subject &#125;;</div><div class="line">        <span class="keyword">if</span> (text) options.text = text;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (html) options.html = html;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (attachments) options.attachments = attachments;</div><div class="line"></div><div class="line">        sender.sendMail(options, ( error, response ) =&gt; &#123;</div><div class="line">            <span class="keyword">let</span> sended = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">if</span> (error) sended = <span class="literal">false</span>;</div><div class="line">            </div><div class="line">            resolve(&#123;</div><div class="line">                <span class="attr">sended</span>: sended,</div><div class="line">                <span class="attr">mail</span>: to</div><div class="line">            &#125;)</div><div class="line">            sender.close();     </div><div class="line">        &#125;);        </div><div class="line">    &#125;)    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> resources = [</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">subject</span>: <span class="string">'title'</span>,</div><div class="line">                    <span class="attr">to</span>: <span class="string">'setyourmindpark@gmail.com'</span>,</div><div class="line">                    <span class="attr">text</span>: <span class="string">'hello world'</span>,                    </div><div class="line">                &#125;,                 </div><div class="line">                <span class="comment">// &#123; &#125;..</span></div><div class="line">            ]</div><div class="line">( <span class="keyword">async</span> () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> resultArr = <span class="keyword">await</span> bluebird.map(resources, item =&gt; send(item));         </div><div class="line">    <span class="comment">// [ &#123; sended: true, mail: 'setyourmindpark@gmail.com' &#125;, ... ]</span></div><div class="line">    <span class="comment">// 추가로직 수행</span></div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p><p>메일발송 자체는 callback style로 구성하고 전체적인 동작 자체는 Promise 사용하여 발송여부와 함꼐 메일정보를 리턴한다.<br>그리고 마지막으로 async await으로 전체 수행결과를 기다린다. ( 메일발송 결과기반 추가로직수행위해 )<br>이렇게되면 10000명의 사용자에게 메일발송 동작은 병렬로 처리되며 발송 성공/실패 여부와 상관없이 전체 target 사용자에게 메일발송 로직은 처리할수있다.<br>이렇게 발송결과 데이터를 기반으로 발송실패 사용자를 대상으로 추가적인 비지니스로직을 수행하면될것이다. ( 다른방법으로 정보를알리든지, log를 저장하여 분석한다든지 )  </p>]]></content>
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>replace session on front side( json web token )</title>
      <link href="/2018/05/13/jwt/jwt/"/>
      <content type="html"><![CDATA[<h2 id="replace-session-on-front-side"><a href="#replace-session-on-front-side" class="headerlink" title="replace session on front side"></a>replace session on front side</h2><p>전통적으로 웹사이트 로그인부분 처리와 관련해서 server side에서 session에 담는게 일반적이다.<br>모든사이트가 그렇진않지만 요즘은 RESTFUL 기반 client와 분리하여 독립적으로 개발하는곳도 심심지않게 볼수있다.<br>이렇게 server side와 client side를 분리하게되면 분명 다양한 이점이 존재한다.<br>첫번쨰로는 불필요한 빌드를 방지할수있으며( 수정사항 side만 재배포 )<br>두번째로는 독립적으로 서비스로직이 존재하므로 확장과 시스템자원을 효율적으로 관리할수있다.( backend frontend 담당 역활이 분명히 나뉘어져있어 아키텍처 관점으로 이해하기쉽다. )<br>이렇게 분리된 backend 와 fronted가 존재할시 로그인관련처리 역시 session을 사용하게되는데 backend가 n 의 클러스터기반에서는 session을 관리하는 server를 따로두어야할것이다.( redis session을 사용한다던지..  )<br>session을 쓰지않고 로그인 handling을 할수없을까… 하다가 생각한게 jwt( json web token ) 이다.  </p><h2 id="jwt-json-web-token"><a href="#jwt-json-web-token" class="headerlink" title="jwt( json web token )"></a>jwt( json web token )</h2><p>일단 jwt가 무었인지부터 알아보자.<br>jwt는 oath2 의 인증 방식을 대체하기위해 나온 메커니즘으로 인증 token을 인증서버에 요청하여 누가 요청하였는지 identify하는 oatuh2와는 달리 token에 존재하는 사용자정보를 기반으로 인증 server를 거치지않고 service backend에서 바로 비지니스로직처리를 가능하게한다.<br>하지만 oauth2의 장점은 보안에 용이하지만 인증서버를 구축해야한다는점. 시스템적인 자원의 소모가 큰 반면 jwt는 시스템적인 자원은 효율적으로 사용하되 보안 관련 이슈가 존재한다.<br>다음의 jwt token을 <a href="https://jwt.io/" target="_blank" rel="noopener">https://jwt.io/</a> 에서 확인하면 token의 내포된 header와 payload가 확인된다.  </p><pre><code class="bash">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzb21lSWQiOjEsImlhdCI6MTUyNjE5NTMyNCwiZXhwIjoxNTI2MTk1Mzg0fQ.0B_HNaVdJ2AgUJOQctYMKt56_2fLEXnldBpSBzcNMiU</code></pre><p>그러면 제3자가 악용하여 token 내용을 변조하여 api server에 요청할수있지않을까?<br>결론적으론 요청은할순있지만 변조된 token으로 server side에서 checking이 가능하다.<br><strong>jwt의 token 구조는 header.payload.signature로 구성되어있으며 header와 payload를 base64로 인코딩된 값을 server side에서 소유하고있는 secret key를 통해 hashing 한다. 그리고 hashing 된 hash 값을 base64로 인코딩하게되면 signature 가 된다.</strong><br>만약 누군가 token을 변조하였다면 signature부분의 값이 달라지기에 변조된 token임을 알수있다. ( secret key로 hashing된 값이 달라지기에 )  </p><h2 id="delegate-login-process-on-front-side"><a href="#delegate-login-process-on-front-side" class="headerlink" title="delegate login process on front side"></a>delegate login process on front side</h2><p>jwt를 사용하게되면 사용자 인증( authe ntication )이 server side에서 담당하게될 역활중 하나이며 이런 인증은 보통 client에서 header에 token 정보를 함께 요청( request ) 한다.<br>다시말해 인증되지않은 사용자는 server side로 api call을 할수없다.<br>그럼 인증과 login 처리 session은 무슨 관련이있는것인가.<br>session은 일반적으로 만료시간( expire time )이 정해져있다. ( 언제든지 접속할때마다 로그인이 되어있다면 server side에서 엄청난 자원낭비가될것이다 )<br>하지만 jwt나 oauth2 방식을 이용하면 무한적으로 로그인되어있는 웹사이트도 개발가능하다.<br>인스타그램이나 페이스북, 또는 국내 특정 코인 거래소에서 이런 현상을 볼수있는데 ( 사이트를 들어갈때마다 로그인이 자동으로 되어있다. )<br>아마도 그런 대기업들은 jwt 보다는 보안적으로좋은 oauth2 방식을 이용하는듯하다 ( 추측 ).<br>필자는 jwt를 기반으로 client side에서 일정시간 또는 무한정 로그인 처리를 할수있도록 다음과같이 프로세스를 정의하였다.  </p><ol><li>client가 로그인한다.</li><li>server에서 expire time이 작은 accesstoken과 accesstoken보다 expire time이 긴 refreshtoken을 발급한다.</li><li>client는 server로부터 발급받은 accesstoken과 refreshtoken을 localstorage에 저장한다.  </li><li>client는 모든 api call시 accesstoken 을 header에 실어서 요청한다.  </li><li>accesstoken이 만료되면 refreshtoken을 통해 accesstoken과 refreshtoken을 재발급 받는다.</li></ol><p>예를들어  </p><ul><li>accesstoken expire time이 발급일로부터 3일 이라고 가정  </li><li>refreshtoken expire time이 발급일로부터 7일 이라고 가정  </li><li>client 사용자 로그인 -&gt; accesstoken refreshtoken localstorage 저장</li><li>3일동안은 client가 api call을 통해 비지니스로직을 수행  </li><li>3일이후 어느순간부터 server로 부터 error code와 함께 expire token message를 response  </li><li>errorcode에 따른 분기로 refreshtoken을 header에 넣고 body에 accesstoken을 request  </li><li>server는 accesstoken과 refreshtoken 재발급 -&gt; accesstoken refreshtoken localstorage 저장</li><li>무한반복 ( 그렇다면 token 발급일로부터 8일이상 client가 어떠한 api call을 요청하지않으면 ?  -&gt; 재로그인 ) </li></ul><p>token expire time에 따라 재 로그인 term이 달라지겠지만 refreshtoken의 expire time이 길면 무한정 로그인된 상태도 가능하다<br>하지만 refreshtoken이 너무긴 expire time 보다는 일정기간동안 접속하지않으면 재로그인하는 방식으로 유도하는것이 좋을듯하다    </p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p>jwt의 expire date 는 utc timezone 기반으로 동작하여 local timezone에 관한 이슈는 생각하지않아도 될듯하다.<br>jwt는 npmjs <a href="https://www.npmjs.com/package/jsonwebtoken" target="_blank" rel="noopener">https://www.npmjs.com/package/jsonwebtoken</a> 에서 가능하다.  </p><ul><li><a href="https://velopert.com/2389" target="_blank" rel="noopener">https://velopert.com/2389</a></li><li><a href="https://blog.outsider.ne.kr/1160" target="_blank" rel="noopener">https://blog.outsider.ne.kr/1160</a></li><li><a href="http://bcho.tistory.com/999" target="_blank" rel="noopener">http://bcho.tistory.com/999</a></li><li><a href="https://github.com/setyourmindpark/nodejs-api-server-boilerplate" target="_blank" rel="noopener">https://github.com/setyourmindpark/nodejs-api-server-boilerplate</a></li></ul>]]></content>
      
      <categories>
          
          <category> jwt </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>kubernetes pod, deployment and service</title>
      <link href="/2018/03/25/kubernetes/kubernetes-1/"/>
      <content type="html"><![CDATA[<h2 id="kubernetes-pod-deployment-and-service"><a href="#kubernetes-pod-deployment-and-service" class="headerlink" title="kubernetes pod, deployment and service"></a>kubernetes pod, deployment and service</h2><p>kubernetes 의 pod, deployment 그리고 service에대해 알아보려한다.<br>일단 pod는 쉽게말해서 container 와 같고 deployment는 docker swarm 의 service와 상응하는 기능으로 보인다.<br>햇갈릴수있는 부분이, docker swarm 에서 지칭하는 service 와 kubernetes에서 지칭하는 service의 혼동이다.<br>docker swarm 에서의 service는 n개의 replicas container의 집합과 관리를 담당 ( rollback , update 등 ) 하는반면<br>kubernetes의 service는 deployment 들을 expose( 노출 ) 하던지 load balancing을 위한 용도로 지칭하는듯 하다.<br>또 다른 특이점으론 docker swarm 에서 master node는 –availability active mode로 동작하는 반면 kubernetes master node는 기본적으로 –availability drain mode로 동작한다. ( 사용자가 생성한 pod, deployment등 container들을 master node에서 생성하지않는다. )<br>nginx를 이용하여 간단히 테스트를 진행한다.  </p><h2 id="deployment"><a href="#deployment" class="headerlink" title="deployment"></a>deployment</h2><p>deployment( pods ) 생성한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">$ vi nginx-deployment.yaml</div><div class="line"></div><div class="line">apiVersion: apps/v1 <span class="comment"># for versions before 1.9.0 use apps/v1beta2</span></div><div class="line">kind: Deployment</div><div class="line">metadata:</div><div class="line">  name: nginx-deployment</div><div class="line">spec:</div><div class="line">  selector:</div><div class="line">    matchLabels:</div><div class="line">      app: nginx</div><div class="line">  replicas:  2 <span class="comment"># tells deployment to run 2 pods matching the template</span></div><div class="line">  template: <span class="comment"># create pods using pod definition in this template</span></div><div class="line">    metadata:</div><div class="line">      <span class="comment"># unlike pod-nginx.yaml, the name is not included in the meta data as a unique name is</span></div><div class="line">      <span class="comment"># generated from the deployment name</span></div><div class="line">      labels:</div><div class="line">        app: nginx</div><div class="line">    spec:</div><div class="line">      containers:</div><div class="line">      - name: nginx</div><div class="line"><span class="comment">#        image: nginx</span></div><div class="line">        image: setyourmindpark/debian-nginx</div><div class="line">        ports:</div><div class="line">        - containerPort: 80</div><div class="line"></div><div class="line">$ kubectl create <span class="_">-f</span> nginx-deployment.yaml</div></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ kubectl get pods -o wide</div><div class="line">NAME                                READY     STATUS    RESTARTS   AGE       IP            NODE</div><div class="line">nginx-deployment-5599c844c4-7qxkm   1/1       Running   0          12m       10.244.1.18   node1</div><div class="line">nginx-deployment-5599c844c4-lzmxj   1/1       Running   0          12m       10.244.1.19   node1</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ kubectl get deployments</div><div class="line">NAME               DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE</div><div class="line">nginx-deployment   2         2         2            2           12m</div></pre></td></tr></table></figure><h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><p>앞에서 언급한 바와같이 deployment로 생성된 pods 들은 기본적으로 cluster 내부에서만 접근가능하므로 외부에 expose( 노출 ) 을 한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ vi nginx-service.yaml</div><div class="line"></div><div class="line">apiVersion: v1</div><div class="line">kind: Service</div><div class="line">metadata:</div><div class="line">  name: nginx-service</div><div class="line">spec:</div><div class="line">  ports:</div><div class="line">    - name: nginx-service</div><div class="line">      port: 80</div><div class="line">      targetPort: 80</div><div class="line">  <span class="built_in">type</span>: NodePort</div><div class="line">  selector:</div><div class="line">    app: nginx</div><div class="line"></div><div class="line">$ kubectl create <span class="_">-f</span> nginx-service.yaml</div></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ kubectl get services </div><div class="line">NAME            TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</div><div class="line">kubernetes      ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP        6h</div><div class="line">nginx-service   NodePort    10.100.189.254   &lt;none&gt;        80:32035/TCP   15m</div></pre></td></tr></table></figure><h2 id="확인"><a href="#확인" class="headerlink" title="확인"></a>확인</h2><h3 id="expose-확인"><a href="#expose-확인" class="headerlink" title="expose 확인"></a>expose 확인</h3><p>필자의 pods들은 10.10.80.12 node에 생성되었다.<br>브라우저에서 10.10.80.12:32035 접속시 정상적으로 nginx default page가 로드된다.<br>cluster 외부에서는 node-ip:32035<br>cluster 내부에서는 10.100.189.254:80  </p><h3 id="load-balancing-확인"><a href="#load-balancing-확인" class="headerlink" title="load balancing 확인"></a>load balancing 확인</h3><p>생성된 2개의 pod에 접속하여 access log를 확인한다.<br>기본적으로 access log는 주석처리되어있으므로 설정변경과 nginx를 reload 한다 .<br>master node에서 kubectl exec … 로 pods( container ) 접근하여 수정하거나 해당 node에서 docker exec …로 생성된 pods로 직접접속한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ kubectl <span class="built_in">exec</span> -it nginx-deployment-5599c844c4-7qxkm /bin/bash</div><div class="line">$ kubectl <span class="built_in">exec</span> -it nginx-deployment-5599c844c4-lzmxj /bin/bash</div><div class="line">$ vi /etc/nginx/conf.d/default.conf</div><div class="line">...</div><div class="line">access_log  /var/<span class="built_in">log</span>/nginx/host.access.log  main;   <span class="comment"># 다음과같이 주석해제</span></div><div class="line">...</div><div class="line">$ nginx <span class="_">-s</span> reload</div><div class="line">$ tail <span class="_">-f</span> /var/<span class="built_in">log</span>/nginx/host.access.log            <span class="comment"># watching access log</span></div></pre></td></tr></table></figure></p><p>node1에서 service ip로( 10.100.189.254:80 ) curl 을 날린다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ curl 10.100.189.254 <span class="comment"># default port 80</span></div><div class="line">$ curl 10.100.189.254</div><div class="line">$ curl 10.100.189.254</div><div class="line">$ curl 10.100.189.254</div><div class="line">$ curl 10.100.189.254</div><div class="line">$ curl 10.100.189.254</div><div class="line">$ curl 10.100.189.254</div><div class="line">$ curl 10.100.189.254</div></pre></td></tr></table></figure></p><p>2대의 pods( container )에서 access log를 확인한다.  </p><h3 id="nginx-deployment-5599c844c4-7qxkm"><a href="#nginx-deployment-5599c844c4-7qxkm" class="headerlink" title="nginx-deployment-5599c844c4-7qxkm"></a>nginx-deployment-5599c844c4-7qxkm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">10.244.1.1 - - [24/Mar/2018:18:21:58 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 612 <span class="string">"-"</span> <span class="string">"curl/7.29.0"</span> <span class="string">"-"</span></div><div class="line">10.244.1.1 - - [24/Mar/2018:18:21:59 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 612 <span class="string">"-"</span> <span class="string">"curl/7.29.0"</span> <span class="string">"-"</span></div><div class="line">10.244.1.1 - - [24/Mar/2018:18:22:00 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 612 <span class="string">"-"</span> <span class="string">"curl/7.29.0"</span> <span class="string">"-"</span></div><div class="line">10.244.1.1 - - [24/Mar/2018:18:22:01 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 612 <span class="string">"-"</span> <span class="string">"curl/7.29.0"</span> <span class="string">"-"</span></div><div class="line">10.244.1.1 - - [24/Mar/2018:18:22:02 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 612 <span class="string">"-"</span> <span class="string">"curl/7.29.0"</span> <span class="string">"-"</span></div></pre></td></tr></table></figure><h3 id="nginx-deployment-5599c844c4-lzmxj"><a href="#nginx-deployment-5599c844c4-lzmxj" class="headerlink" title="nginx-deployment-5599c844c4-lzmxj"></a>nginx-deployment-5599c844c4-lzmxj</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">10.244.1.1 - - [24/Mar/2018:18:21:59 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 612 <span class="string">"-"</span> <span class="string">"curl/7.29.0"</span> <span class="string">"-"</span></div><div class="line">10.244.1.1 - - [24/Mar/2018:18:22:00 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 612 <span class="string">"-"</span> <span class="string">"curl/7.29.0"</span> <span class="string">"-"</span></div><div class="line">10.244.1.1 - - [24/Mar/2018:18:22:06 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 612 <span class="string">"-"</span> <span class="string">"curl/7.29.0"</span> <span class="string">"-"</span></div></pre></td></tr></table></figure><p>load balancing도 잘 수행된다.  </p><h2 id="견해"><a href="#견해" class="headerlink" title="견해"></a>견해</h2><p>간단히 kubernetes를 살펴본 느낌으로는 docker swarm 보다 기능이 디테일하게 세분화되어있는 느낌을 받았다.<br>예를들어 docker swarm에서 default로 생성되는 overlay network 라든지 외부접근 관련된 service expose 라던지..<br>좀더 살펴봐야하겠지만. docker swarm 과 비슷하면서도 난해한부분이 없지않아 있는듯하다.  특히 ingress 관련 …  </p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p><a href="http://lng1982.tistory.com/m/270" target="_blank" rel="noopener">http://lng1982.tistory.com/m/270</a><br><a href="http://bryan.wiki/288" target="_blank" rel="noopener">http://bryan.wiki/288</a></p>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>kubernetes</title>
      <link href="/2018/03/19/kubernetes/kubernetes/"/>
      <content type="html"><![CDATA[<h2 id="install-kubernetes"><a href="#install-kubernetes" class="headerlink" title="install kubernetes"></a>install kubernetes</h2><p>kubernetes 는 docker 기반으로 동작하는 컨티에너 오케스트레이션( container orchestration ) 플랫폼이다.<br>이전포스트들에서 봐왔듯이 필자는 docker에 관심이많다. 자연스레 kubernetes에 대해 접하게되었고 요즘들어 인기가더욱 많은듯하다.<br>필자는 주로 docker swarm cluster로 컨테이너 관리를 해왔지만 kubernetes가 관리측면에서는 docker swarm cluster 보다는 훨씬더 나은듯 보였다. ( 익숙하다면.. )<br>일단 kubernetes에서가장 눈에띄는 점은 container 관리 dashboard가 존재한다는 점과 container auto scale 이가능하다는 점이다.<br>아직 많은 부분을 알진못하지만 학습하면서 하나둘 알아보려한다.<br>필자는 centos 7 2대의 vm으로 진행하였다.  </p><h3 id="yum-update"><a href="#yum-update" class="headerlink" title="yum update"></a>yum update</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum update -y</div></pre></td></tr></table></figure><h3 id="install-docker-and-start-service"><a href="#install-docker-and-start-service" class="headerlink" title="install docker and start service"></a>install docker and start service</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install -y docker</div><div class="line">$ sudo systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl start docker</div></pre></td></tr></table></figure><h3 id="register-repository"><a href="#register-repository" class="headerlink" title="register repository"></a>register repository</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ sudo bash -c <span class="string">'cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></div><div class="line">[kubernetes]</div><div class="line">name=Kubernetes</div><div class="line">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64</div><div class="line">enabled=1</div><div class="line">gpgcheck=1</div><div class="line">repo_gpgcheck=1</div><div class="line">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</div><div class="line">EOF'</div></pre></td></tr></table></figure><h3 id="diable-selinux"><a href="#diable-selinux" class="headerlink" title="diable selinux"></a>diable selinux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo setenforce 0</div></pre></td></tr></table></figure><h3 id="install-kubelet-kubeadm-kubectl-and-start-service"><a href="#install-kubelet-kubeadm-kubectl-and-start-service" class="headerlink" title="install kubelet kubeadm kubectl and start service"></a>install kubelet kubeadm kubectl and start service</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install -y kubelet kubeadm kubectl</div><div class="line">$ sudo systemctl <span class="built_in">enable</span> kubelet &amp;&amp; sudo systemctl start kubelet</div></pre></td></tr></table></figure><h3 id="config-iptables-and-apply"><a href="#config-iptables-and-apply" class="headerlink" title="config iptables and apply"></a>config iptables and apply</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sudo bash -c <span class="string">'cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span></div><div class="line">net.bridge.bridge-nf-call-ip6tables = 1</div><div class="line">net.bridge.bridge-nf-call-iptables = 1</div><div class="line">EOF'</div><div class="line">$ sudo sysctl --system</div></pre></td></tr></table></figure><h3 id="disalbe-firewalld"><a href="#disalbe-firewalld" class="headerlink" title="disalbe firewalld"></a>disalbe firewalld</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo systemctl <span class="built_in">disable</span> firewalld</div><div class="line">$ sudo systemctl stop firewalld</div></pre></td></tr></table></figure><h3 id="swap-off"><a href="#swap-off" class="headerlink" title="swap off"></a>swap off</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo swapoff <span class="_">-a</span></div></pre></td></tr></table></figure><p>kubernetes 설치가 모두 끝이났다. 뭐가이렇게 설치하고 설정할게 많은지.. 시작부터불길한예감이 ..</p><h2 id="kubernetes-cluster-config"><a href="#kubernetes-cluster-config" class="headerlink" title="kubernetes cluster config"></a>kubernetes cluster config</h2><p>[ 참고 ] 탭 kubernetes official guide 참고  </p><h3 id="init-master-node"><a href="#init-master-node" class="headerlink" title="init ( master node )"></a>init ( master node )</h3><p>이제 kubernetes 를 본격적으로 사용하기위해 kubernetes cluster를 master node에서 초기화한다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo kubeadm init --pod-network-cidr 10.244.0.0/16 --apiserver-advertise-address 10.10.80.11</div><div class="line"><span class="comment"># --pod-network-cidr                    pod 들이 사용하는 ip 대역</span></div><div class="line"><span class="comment"># --apiserver-advertise-address         master ip( node에서 master ip에 join 할것이기에 명시적으로 적어준다 )</span></div></pre></td></tr></table></figure><p>다음과같이 설정정보가 나타난다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Your Kubernetes master has initialized successfully!</div><div class="line"></div><div class="line">To start using your cluster, you need to run the following as a regular user:</div><div class="line"></div><div class="line">  mkdir -p $HOME/.kube</div><div class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</div><div class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</div><div class="line"></div><div class="line">You should now deploy a pod network to the cluster.</div><div class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</div><div class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</div><div class="line"></div><div class="line">You can now join any number of machines by running the following on each node</div><div class="line">as root:</div><div class="line"></div><div class="line">  kubeadm join --token 02bcf2.f10d2bf5defde80b 10.10.80.11:6443 --discovery-token-ca-cert-hash sha256:2a849134a0c617684e42b701afd43074bbe9a11422e8b6dd51e879a28875fd1c</div></pre></td></tr></table></figure></p><p>제시된 설정정보를 입력한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p <span class="variable">$HOME</span>/.kube</div><div class="line">$ sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</div><div class="line">$ sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</div></pre></td></tr></table></figure></p><h3 id="config-flannel-network-master-node"><a href="#config-flannel-network-master-node" class="headerlink" title="config flannel network ( master node )"></a>config flannel network ( master node )</h3><p>docker swarm cluster 구성시 default로 생성되는 overlay network라고 생각하면 될듯하다.<br>설정을 진행한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ kubectl apply <span class="_">-f</span> https://raw.githubusercontent.com/coreos/flannel/v0.9.1/Documentation/kube-flannel.yml</div></pre></td></tr></table></figure></p><h3 id="check-pod-status-master-node"><a href="#check-pod-status-master-node" class="headerlink" title="check pod status ( master node )"></a>check pod status ( master node )</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ kubectl get pods --all-namespaces</div><div class="line">NAMESPACE     NAME                             READY     STATUS    RESTARTS   AGE</div><div class="line">kube-system   etcd-master                      1/1       Running   0          4m</div><div class="line">kube-system   kube-apiserver-master            1/1       Running   0          4m</div><div class="line">kube-system   kube-controller-manager-master   1/1       Running   0          4m</div><div class="line">kube-system   kube-dns-6f4fd4bdf-ppmgr         3/3       Running   0          9m</div><div class="line">kube-system   kube-flannel-ds-b4v6s            1/1       Running   0          1m</div><div class="line">kube-system   kube-flannel-ds-g958w            1/1       Running   0          1m</div><div class="line">kube-system   kube-proxy-4j29q                 1/1       Running   0          9m</div><div class="line">kube-system   kube-proxy-n58wv                 1/1       Running   0          4m</div><div class="line">kube-system   kube-scheduler-master            1/1       Running   0          4m</div></pre></td></tr></table></figure><p>kube-system   kube-dns-6f4fd4bdf-ppmgr         3/3       <strong><code>Running</code></strong>   0          9m<br>Pending -&gt; ContainerCreating -&gt; Running 상태변경을 확인한다.  </p><h3 id="join-cluster-worker-node"><a href="#join-cluster-worker-node" class="headerlink" title="join cluster( worker node )"></a>join cluster( worker node )</h3><p>master node에서 kubernetes init 시 나온 token 정보를 worker node에 입력한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo kubeadm join --token 02bcf2.f10d2bf5defde80b 10.10.80.11:6443 --discovery-token-ca-cert-hash sha256:2a849134a0c617684e42b701afd43074bbe9a11422e8b6dd51e879a28875fd1c</div></pre></td></tr></table></figure></p><h3 id="check-node-status-master-node"><a href="#check-node-status-master-node" class="headerlink" title="check node status ( master node )"></a>check node status ( master node )</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ kubectl get nodes </div><div class="line">NAME      STATUS    ROLES     AGE       VERSION</div><div class="line">master    Ready     master    11m       v1.9.4</div><div class="line">node1     Ready     &lt;none&gt;    5m        v1.9.4</div></pre></td></tr></table></figure><p>node state가 NotReady에서 Ready로 변경된것을 확인할수있다.  </p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p><a href="https://kubernetes.io/docs/setup/independent/install-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/independent/install-kubeadm/</a><br><a href="https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#24-initializing-your-master" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#24-initializing-your-master</a><br><a href="https://blog.tekspace.io/setup-kubernetes-cluster-on-centos-7/" target="_blank" rel="noopener">https://blog.tekspace.io/setup-kubernetes-cluster-on-centos-7/</a><br><a href="https://www.assistanz.com/steps-to-install-kubernetes-cluster-manually-using-centos-7/" target="_blank" rel="noopener">https://www.assistanz.com/steps-to-install-kubernetes-cluster-manually-using-centos-7/</a></p>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>non-stop deploy</title>
      <link href="/2018/03/02/deploy/deploy/"/>
      <content type="html"><![CDATA[<h2 id="non-stop-deploy"><a href="#non-stop-deploy" class="headerlink" title="non-stop deploy"></a>non-stop deploy</h2><p>개발한 서비스를 무중단 배포( non-stop deploy ) 하는일은 필자가 생각하기에 매우 중요한 요소중 하나라고 생각된다.<br>우선 필자의 목적은 재배포 ( redeploy )할시 그와동시에 client request에 대한 error 를 뱉지않는것을 목표로 잡았다.<br>docker swarm으로 services들을 구성하니 container replicas ( docker service update시 rolling )으로 당연히 non-stop deploy가 이루어진줄 알았다.<br>혹시나하는 마음으로 docker service update( redeploy )시 api call을 일정한 타임주기로 꾸준히 날려보았다.<br>그런데 error가 …. 역시 직접 테스트해보기전까진 모른다.<br>필자가 시도해본방법을 정리해보려한다.  </p><h2 id="docker-HEALTHCHECK"><a href="#docker-HEALTHCHECK" class="headerlink" title="docker HEALTHCHECK"></a>docker HEALTHCHECK</h2><p>처음 api call error를 마주하는순간 ‘아 ~ HEALTHCHECK command를 Dockerfile에 안넣어서 그렇구나’ 생각하여 health check api를 만들고 HEALTHCHECK command를 삽입하였다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">FROM ...</div><div class="line">...</div><div class="line">HEALTHCHECK --interval=3s --timeout=3s --retries=5 CMD curl <span class="_">-f</span> http://localhost:4000/api/smpl/healthcheck || <span class="built_in">exit</span> 1</div><div class="line"><span class="comment"># --interval        = container가 시작된후 검사( health check api call )의 interval 주기</span></div><div class="line"><span class="comment"># --timeout         = 검사의 실행시간 ( health check api call 후 timeout 시간내에 응답이없으면 실패로 간주 )</span></div><div class="line"><span class="comment"># --retries         = 재시도 횟수( 연속적인 실패시 not healty로 간주 )  </span></div><div class="line"><span class="comment"># = docker container가 시작된후 health check api call을 interval( 3초 ) 마다 실행. </span></div><div class="line"><span class="comment">#   실행에 대한 결과가 5초내에 이루어지지않을경우 실패로간주, 연속적으로 5번 실패시 not healthy로 간주</span></div><div class="line">...</div><div class="line">CMD ...</div></pre></td></tr></table></figure></p><p>이렇게 dockerize 환경구성후 1.0 version을 배포, 2.0 version을 만들어 배포하는중 0.3초주기로 api를 call 무한으로 날려보았다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'1481'</span> &#125;</div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'1482'</span> &#125;</div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'1483'</span> &#125;</div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'1484'</span> &#125;</div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'1485'</span> &#125;</div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'1486'</span> &#125;</div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'1487'</span> &#125;</div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'1488'</span> &#125;</div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'1489'</span> &#125;</div><div class="line">&#123; RequestError: Error: connect ECONNREFUSED 10.10.10.11:4000</div><div class="line">...</div></pre></td></tr></table></figure></p><p>에러가 발생하였다.<br>‘필자는 HEALTHCHECK 가 왜 아무소용이없지? 뭘 잘못했나 ? ‘ 라는 생각이 먼저들었으나 docker container를 확인해보니 못보던 정보가 생겨났다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ docker ps</div><div class="line">CONTAINER ID        IMAGE                                                       COMMAND                  CREATED             STATUS                   PORTS               NAMES</div><div class="line">3c0824ed0191        setyourmindpark:5000/setyourmindpark_backend:180301213341   <span class="string">"pm2-docker bin/www.…"</span>   5 minutes ago       Up 5 minutes (healthy)   4000/tcp            setyourmindpark_service_backend.3.rf4ejsaqz2sp5t89euz7<span class="keyword">if</span>6ly</div><div class="line">2660ee52065c        setyourmindpark:5000/setyourmindpark_backend:180301213341   <span class="string">"pm2-docker bin/www.…"</span>   5 minutes ago       Up 5 minutes (healthy)   4000/tcp            setyourmindpark_service_backend.2.z6jx7lati4wqttw7rnu8plk78</div><div class="line">deb1020a9b31        setyourmindpark:5000/setyourmindpark_backend:180301213341   <span class="string">"pm2-docker bin/www.…"</span>   6 minutes ago       Up 6 minutes (healthy)   4000/tcp            setyourmindpark_service_backend.1.wrhf6tbpe8x5lj7wierju493m</div></pre></td></tr></table></figure></p><p><a href="https://docs.docker.com/engine/reference/builder/#healthcheck" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/builder/#healthcheck</a><br>STATUS COLUMN에 healty라는 정보가 새롭게 생겼으며 service update시 rolling중에는 (health: starting) 과 같이 나타난다.<br>docker swarm 내부적인 load balancer가 해당 service의 traffic을 처리하는데에있어 healthcheck를 사용하지않는듯하다.<br>위에서 필자가 시도한 HEALTHCHECK command 역시 개발자에게 healty 또는 unhealthy 정보를 확인할수있는 지표만을 제공하는듯하다. ( 혹시 제가 잘못알고있을수도있으니 의견부탁드립니다. )  </p><h2 id="nginx-load-balancing"><a href="#nginx-load-balancing" class="headerlink" title="nginx load balancing"></a>nginx load balancing</h2><p>docker HEALTHCHECK 방법이 실패하고 ‘그럼 nginx를 쓰면되지’ 라는생각과 주저없이 nginx 세팅에 들어갔다.<br>필자는 왜 그렇게 생각한지 모르지만 nginx를 load balancer로 사용시 당연히 health check는 기본으로 동작하면서 되는줄알았다. ( 정말 왜그렇게 생각했는지 모르겠다 )<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/nginx/default.conf</div><div class="line"></div><div class="line">upstream target-server &#123;</div><div class="line">  least_conn;</div><div class="line">  server 10.10.10.11:4000 max_fails=3 fail_timeout=30s;</div><div class="line">  <span class="comment"># max_fails       = 쵀대 실패횟수</span></div><div class="line">  <span class="comment"># fail_timeout    = 최대 요청실패 임계시간</span></div><div class="line">  <span class="comment"># = 30초동안 3번의 요청 실패시 dead로 판단</span></div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">        listen 80;                </div><div class="line">        charset utf-8;</div><div class="line">        access_log /etc/nginx/<span class="built_in">log</span>/access.log;</div><div class="line">        error_log /etc/nginx/<span class="built_in">log</span>/error.log;</div><div class="line">        location / &#123;</div><div class="line">                proxy_redirect  off;</div><div class="line">                proxy_set_header Host <span class="variable">$http_host</span>;</div><div class="line">                proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">                proxy_set_header X-Scheme <span class="variable">$scheme</span>;</div><div class="line">                proxy_pass http://target-server;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>여기서 ‘load balancer로 쓰는데 backend server가 1대야 ?’ 라고 생각하실분들이 계실것같아 설명을 하자면 docker service replicas( 5개의 container )로 구성되어있어 동작하는 backend는 5개( docker swarm load balancer )로 backend server는 1대로 구성하였다.<br><a href="https://setyourmindpark.github.io/2018/02/07/docker/docker-5/">docker swarm</a> 포스트의 이미지를 보면 이해가 쉬울것이다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'1862'</span> &#125;</div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'1863'</span> &#125;</div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'1864'</span> &#125;</div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'1865'</span> &#125;</div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'1866'</span> &#125;</div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'1867'</span> &#125;</div><div class="line">&#123; StatusCodeError: 502 - <span class="string">"&lt;html&gt;\r\n&lt;head&gt;&lt;title&gt;502 Bad Gateway&lt;/title&gt;&lt;/head&gt;\r\n&lt;body bgcolor=\"white\"&gt;\r\n&lt;center&gt;&lt;h1&gt;502 Bad Gateway&lt;/h1&gt;&lt;/center&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure></p><p>역시에러가 발생하였다.( 당연히될줄알았는데.. )  </p><h2 id="haproxy-load-balancing"><a href="#haproxy-load-balancing" class="headerlink" title="haproxy load balancing"></a>haproxy load balancing</h2><p>필자의 생각으론 nginx 같은 앞단의 load balancer를 쓰면서 proxy target server의 health check를 해줄 녀석이 필요하다고 판단했다.<br>그렇게 알게된것이 haproxy 이며 ‘이제정말 되겠지’ 라는 마음으로 공부하며 적용해보았다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">$ vi/etc/haproxy/haproxy.cfg</div><div class="line"></div><div class="line">defaults</div><div class="line"> mode http</div><div class="line"> option httplog</div><div class="line"> option dontlognull</div><div class="line"> option redispatch</div><div class="line"> option forwardfor</div><div class="line"> option http-server-close</div><div class="line"> retries 3</div><div class="line"> maxconn 20480</div><div class="line"> timeout connect 5s</div><div class="line"> timeout server 50s</div><div class="line"> timeout client 50s</div><div class="line"> timeout http-keep-alive 3000</div><div class="line"></div><div class="line">frontend http_in</div><div class="line"> <span class="built_in">bind</span> *:80</div><div class="line"> reqadd X-Forwarded-Proto:\ http</div><div class="line"> default_backend server</div><div class="line"></div><div class="line">backend server</div><div class="line"> mode http</div><div class="line"> balance roundrobin</div><div class="line"> default-server inter 3s rise 5 fall 5</div><div class="line"> <span class="comment"># default-server       = health check 조건</span></div><div class="line"> <span class="comment"># inter                = interval 주기 ( 3초 ) </span></div><div class="line"> <span class="comment"># rise                 = 요청횟수 ( 3번 )</span></div><div class="line"> <span class="comment"># fail                 = 실패횟수</span></div><div class="line"> <span class="comment"># = 3초 주기로 5번요청 성공시 healthy, 5번 실패시 dead로 판단 </span></div><div class="line"> server s1 10.10.10.11:4000 check</div></pre></td></tr></table></figure></p><p>=&gt; 3초 주기로 5번요청 성공시 정상작동간주, 트래픽을 연결한다.<br>api call response 결과는 다음과 같다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'980'</span> &#125;</div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'981'</span> &#125;</div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'982'</span> &#125;</div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'983'</span> &#125;</div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'984'</span> &#125;</div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'985'</span> &#125;</div><div class="line">&#123; version: <span class="string">'2.0'</span>, reqIdxVal: <span class="string">'986'</span> &#125;</div><div class="line">&#123; version: <span class="string">'2.0'</span>, reqIdxVal: <span class="string">'987'</span> &#125;</div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'988'</span> &#125;</div><div class="line">&#123; version: <span class="string">'2.0'</span>, reqIdxVal: <span class="string">'989'</span> &#125;</div><div class="line">&#123; version: <span class="string">'2.0'</span>, reqIdxVal: <span class="string">'990'</span> &#125;</div><div class="line">&#123; version: <span class="string">'1.0'</span>, reqIdxVal: <span class="string">'991'</span> &#125;</div><div class="line">&#123; version: <span class="string">'2.0'</span>, reqIdxVal: <span class="string">'992'</span> &#125;</div><div class="line">&#123; version: <span class="string">'2.0'</span>, reqIdxVal: <span class="string">'993'</span> &#125;</div><div class="line">&#123; version: <span class="string">'2.0'</span>, reqIdxVal: <span class="string">'994'</span> &#125;</div><div class="line">&#123; version: <span class="string">'2.0'</span>, reqIdxVal: <span class="string">'995'</span> &#125;</div><div class="line">&#123; version: <span class="string">'2.0'</span>, reqIdxVal: <span class="string">'996'</span> &#125;</div></pre></td></tr></table></figure></p><p>무중단 배포( non-stop deploy ) 가 이루어졌다.<br><!-- 어떠한 error도 뱉지않았으며 docker swarm load balancer 로부터 호출된 각 container의 health check가 정상적으로 이루어졌음을 알수있다. --><br><!-- 3초 주기로 5번요청 성공시 정상상태로 간주하고 트래픽을 연겷해준다 --><br><!-- 견해일단 갖고있는지식으로 테스트를 진행하긴 하였으나 실제 내부적으로 어떻게 동작하는지 정확하게는 잘 모르겠다.  필자가 난해해 하는 부분은 docker swarm load balancer를 사용하기에 단일 server 설정을하여 nginx나, haproxy 같은 녀석들은 설정값에 따른 call 실패시 다른 node로 넘어가지만 필자는 docker swarm load balancer를 사용하기에 단일 server 설정을 진행하였다.  그래서 더욱더 난해한부분이 없지않아 있는것 같다.  아니면 docker swarm master 를 n개로 분산설정하여 nginx나 haproxy 설정을 n개의 server node 설정후 다시 테스트하는것이 좀더 명확한 판단이 설것 같기도하다.   --></p><h2 id="환경"><a href="#환경" class="headerlink" title="환경"></a>환경</h2><p>docker version                      = Docker version 17.12.0-ce, build c97c6d6<br>nginx version                       = nginx version: nginx/1.12.2<br>haproxy version                     = HA-Proxy version 1.8.4-1~bpo8+1<br>test backend replicas container     = 5개</p><h2 id="참고사이트"><a href="#참고사이트" class="headerlink" title="참고사이트"></a>참고사이트</h2><p><a href="https://seokjun.kim/haproxy-and-nginx-load-balancing/" target="_blank" rel="noopener">https://seokjun.kim/haproxy-and-nginx-load-balancing/</a><br><!-- [ 나중에 꼭볼것. 좋은글임 ]마지막으로 헬스체크에 대해 조금 더 자세하게 설명하면, default-server inter 1s fall 3 rise 2 라고 하는 것은 다음과 같이 해석할 수 있다. 1초 마다 서버에 접속하여 헬스체크를 행하되 3번 실패하면 접속 불가로 판단하고 2번 성공하면 정상 상태로 간주하여 트래픽을 연결해준다. option httpchk GET / 은 http GET 으로 [서버주소]/ 요청을 날려서 http-check expect status 200 에 따라 200 OK 에 해당하는 응답이 나올시 정상 상태라고 판단하게 된다. --></p>]]></content>
      
      <categories>
          
          <category> deploy </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>haproxy</title>
      <link href="/2018/03/01/haproxy/haproxy/"/>
      <content type="html"><![CDATA[<h2 id="haproxy"><a href="#haproxy" class="headerlink" title="haproxy"></a>haproxy</h2><p>줄곧 nginx를 사용해오다가 간과한점이 하나있었다.<br>nginx의 health check는 유료버전인 nginx plus에서만 가능하다는것.<br>물론 대중적으로 nginx를 많이쓰긴하지만, 필자에게 있어 health check 기능은 너무도 중요한 요소중 하나다.<br>그리하여 열심히 찾아보다가 .. haproxy라는 녀석을 만나게되었다.<br>haproxy를 처음 사용해봄으로서 간단하게 진행한 테스트를 글로 남기려한다.<br><!-- 이번 포스트에서는 필자가 중점으로 생각하는 health check 기능 대신 haproxy에 대한 기본적인 글을 써보려한다.   --></p><h2 id="setup-haproxy"><a href="#setup-haproxy" class="headerlink" title="setup haproxy"></a>setup haproxy</h2><p>필자는 host os는 centos를 docker container에서 사용할 guest os는 주로 debian os를 사용한다.<br>설치는 haproxy 1.8 version과 debian jessie os 기준으로 설명한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> deb http://httpredir.debian.org/debian jessie-backports main | \</div><div class="line">    tee /etc/apt/sources.list.d/backports.list</div><div class="line">$ curl https://haproxy.debian.net/bernat.debian.org.gpg | \</div><div class="line">    apt-key add - </div><div class="line">$ <span class="built_in">echo</span> deb http://haproxy.debian.net jessie-backports-1.8 main | \</div><div class="line">    tee /etc/apt/sources.list.d/haproxy.list</div><div class="line">$ apt-get update</div><div class="line">$ apt-get install -y haproxy=1.8.\* -t jessie-backports</div><div class="line">$ service haproxy start</div></pre></td></tr></table></figure></p><p>필자가 만든 docker image를 사용하려면 다음과 같이 사용할수있다.<br><a href="https://hub.docker.com/r/setyourmindpark/debian-haproxy/" target="_blank" rel="noopener">https://hub.docker.com/r/setyourmindpark/debian-haproxy/</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ docker pull setyourmindpark/debian-haproxy:1.8</div><div class="line">$ docker run <span class="_">-d</span> --name haproxy \</div><div class="line">    -v /your/path:/etc/haproxy \</div><div class="line">    -p default_port:80 \</div><div class="line">    -p ssl-port:443 \</div><div class="line">    setyourmindpark/debian-haproxy:1.8</div></pre></td></tr></table></figure></p><h2 id="config-haproxy"><a href="#config-haproxy" class="headerlink" title="config haproxy"></a>config haproxy</h2><p>이제 설치된 haproxy 설정을 시작한다. </p><h3 id="1-url-endpoint에-따른-redirect"><a href="#1-url-endpoint에-따른-redirect" class="headerlink" title="1. url endpoint에 따른 redirect"></a>1. url endpoint에 따른 redirect</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/haproxy.cfg</div><div class="line">defaults</div><div class="line"> mode http</div><div class="line"> option httplog</div><div class="line"> option dontlognull</div><div class="line"> option redispatch</div><div class="line"> option forwardfor</div><div class="line"> option http-server-close</div><div class="line"> retries 3</div><div class="line"> maxconn 20480</div><div class="line"> timeout connect 5s</div><div class="line"> timeout server 50s</div><div class="line"> timeout client 50s</div><div class="line"> timeout http-keep-alive 3000</div><div class="line"></div><div class="line">frontend http_in</div><div class="line"> <span class="built_in">bind</span> *:80</div><div class="line"> reqadd X-Forwarded-Proto:\ http</div><div class="line"> acl naver path_end -i /naver </div><div class="line"> redirect location http://www.naver.com <span class="keyword">if</span> naver</div><div class="line"></div><div class="line"> acl daum path_end -i /daum</div><div class="line"> redirect location http://www.daum.net <span class="keyword">if</span> daum</div><div class="line"></div><div class="line"> acl google path_end -i /google</div><div class="line"> redirect location http://www.google.com <span class="keyword">if</span> google</div><div class="line"></div><div class="line">$ service haproxy restart</div></pre></td></tr></table></figure><ul><li>/naver =&gt; redirect <a href="http://www.naver.com" target="_blank" rel="noopener">http://www.naver.com</a> </li><li>/daum =&gt; redirect <a href="http://www.daum.net" target="_blank" rel="noopener">http://www.daum.net</a> </li><li>/google =&gt; redirect <a href="http://www.google.com" target="_blank" rel="noopener">http://www.google.com</a></li></ul><h3 id="2-load-balancing"><a href="#2-load-balancing" class="headerlink" title="2. load balancing"></a>2. load balancing</h3><p>nginx 포스트 <a href="https://setyourmindpark.github.io/2017/05/03/nginx/nginx/">nginx load balancing</a> 와 같이 haproxy에서도 load balancing을 진행한다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/haproxy.cfg</div><div class="line">defaults</div><div class="line"> mode http</div><div class="line"> option httplog</div><div class="line"> option dontlognull</div><div class="line"> option redispatch</div><div class="line"> option forwardfor</div><div class="line"> option http-server-close</div><div class="line"> retries 3</div><div class="line"> maxconn 20480</div><div class="line"> timeout connect 5s</div><div class="line"> timeout server 50s</div><div class="line"> timeout client 50s</div><div class="line"> timeout http-keep-alive 3000</div><div class="line"></div><div class="line">frontend http_in</div><div class="line"> <span class="built_in">bind</span> *:80</div><div class="line"> reqadd X-Forwarded-Proto:\ http</div><div class="line"> default_backend server</div><div class="line"></div><div class="line">backend server</div><div class="line"> mode http</div><div class="line"> balance roundrobin</div><div class="line"> default-server inter 3s rise 3 fall 5</div><div class="line"> <span class="comment"># default-server       = health check 조건</span></div><div class="line"> <span class="comment"># inter                = interval 주기 ( 3초 ) </span></div><div class="line"> <span class="comment"># rise                 = 요청횟수 ( 3번 )</span></div><div class="line"> <span class="comment"># fail                 = 실패횟수</span></div><div class="line"> <span class="comment"># = 3초 주기로 3번요청 성공시 healthy, 5번 실패시 dead로 판단 </span></div><div class="line"> server s1 server1_ip:server1_port cookie check</div><div class="line"> server s2 server2_ip:server2_port cookie check</div><div class="line"></div><div class="line"> $ service haproxy restart</div></pre></td></tr></table></figure><p>=&gt; 3초 주기로 3번요청 성공시 정상작동간주, 트래픽을 연결한다.  </p><h2 id="log-확인"><a href="#log-확인" class="headerlink" title="log 확인"></a>log 확인</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ haproxy <span class="_">-d</span> <span class="_">-f</span> /etc/haproxy/</div></pre></td></tr></table></figure><h2 id="견해"><a href="#견해" class="headerlink" title="견해"></a>견해</h2><p>필자가 health check를 중요하게 생각하는 이유는 <code>무중단 서비스 배포시 client는 connection에 대한 영속성을 지녀야한다는 점이다.</code><br>client request에 대한 error가 아닌 실시간으로 반영될수있는 아주 중요한 요소중 하나이기 때문이다.<br>고객사의 서비스 개발시 항상 redeploy 에 관한 사항이 중요한 이슈중 하나였다.<br>‘언제 몇시에 서버 재기동합니다.’ 라는 말과함께 작업시 redeploy 하는 개발자 입장에서도 엄청난 부담이 될수밖에없다고 생각한다.<br>다음 포스트에서는 필자가 여러방면으로 테스트한 무중단 배포에 관한 글을 적어보려한다.</p>]]></content>
      
      <categories>
          
          <category> haproxy </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>fluentd</title>
      <link href="/2018/02/26/fluentd/fluentd/"/>
      <content type="html"><![CDATA[<h2 id="fluentd"><a href="#fluentd" class="headerlink" title="fluentd"></a>fluentd</h2><p>이전 포스트 <a href="https://setyourmindpark.github.io/2018/02/23/jenkins/jenkins-5/">build docker service with jenkins</a> 에서 jenkins를 활용하여 docker swarm build를 하는 방법에 대해서 알아보았다.<br>n 개의 node에서 분산되어있는 service container에 쌓이는 log를 한곳으로 취합할수있는 방법이 없을까 찾아보다가 fluentd를 만나게되었다.<br>참고로, docker swarm service 에서 shell 상에서 실시간 log를 확인하려면 다음의 명령어를 사용하면된다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker service logs -f --raw setyourmindpark_service_backend</div></pre></td></tr></table></figure></p><p>이번 포스트에서는 fluentd를 사용하여 log를 어떻게 취합하는지 알아보자.  </p><h2 id="setup-fluentd"><a href="#setup-fluentd" class="headerlink" title="setup fluentd"></a>setup fluentd</h2><p>fluentd 공식 사이트에서 <a href="https://docs.fluentd.org/v0.12/categories/installation" target="_blank" rel="noopener">https://docs.fluentd.org/v0.12/categories/installation</a> os환경에따라 설치를 진행할수있다.<br>필자는 역시 docker 기반으로 사용할것이기에 <a href="https://docs.fluentd.org/v0.12/articles/install-by-docker" target="_blank" rel="noopener">https://docs.fluentd.org/v0.12/articles/install-by-docker</a> fluentd docker official image로 진행하였다.  설정은 다음과 같다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ vi ~/fluentd/volume/config/fluentd.conf</div><div class="line"></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> forward</div><div class="line">  port 24224                            <span class="comment"># listening port</span></div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line">&lt;match app&gt;                             <span class="comment"># tag name</span></div><div class="line">  <span class="built_in">type</span> copy</div><div class="line"></div><div class="line">  &lt;store&gt;</div><div class="line">    <span class="built_in">type</span> file</div><div class="line">    append <span class="literal">true</span></div><div class="line">    path /fluentd/<span class="built_in">log</span>/app               <span class="comment"># to store log path</span></div><div class="line">    time_slice_format %Y%m%d            <span class="comment"># log file format</span></div><div class="line">    time_slice_wait 10m</div><div class="line">    time_format %Y-%m-%dT%H:%M:%S %z    <span class="comment"># log time format</span></div><div class="line">    compress gzip                       <span class="comment"># compress format # file will create at 00:00 everyday</span></div><div class="line">    <span class="comment">#utc                                # if do not use utc log time format, defailt local timezone</span></div><div class="line">  &lt;/store&gt;</div><div class="line"></div><div class="line">&lt;/match&gt;</div></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ docker run <span class="_">-d</span> --name fluentd \</div><div class="line">  -p 24224:24224 \</div><div class="line">  -v ~/fluentd/volume/config:/fluentd/etc \</div><div class="line">  -v ~/fluentd/volume/plugins:/fluentd/plugins \</div><div class="line">  -v ~/fluentd/volume/<span class="built_in">log</span>:/fluentd/<span class="built_in">log</span> \</div><div class="line">  <span class="_">-e</span> FLUENTD_CONF=fluentd.conf \</div><div class="line">  <span class="_">-e</span> TZ=Asia/Seoul \</div><div class="line">  fluent/fluentd:v0.12-debian</div></pre></td></tr></table></figure><p>이제 fluentd에 log를 날려보자.  </p><h2 id="dependencies-nodejs"><a href="#dependencies-nodejs" class="headerlink" title="dependencies ( nodejs )"></a>dependencies ( nodejs )</h2><p>nodejs module중 고맙게도 fluentd에 관련된 dependency를 제공한다.  </p><ul><li><a href="https://www.npmjs.com/package/fluent-logger" target="_blank" rel="noopener">fluent-logger</a></li><li><a href="https://www.npmjs.com/package/winston" target="_blank" rel="noopener">winston</a>  </li></ul><p>필자는 winston module과 fluent-logger modeul을 같이 사용하였다. 설정은 다음과같다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> winston = <span class="built_in">require</span>(<span class="string">'winston'</span>);</div><div class="line"><span class="keyword">const</span> fluentTransport = <span class="built_in">require</span>(<span class="string">'fluent-logger'</span>).support.winstonTransport();</div><div class="line"></div><div class="line"><span class="keyword">const</span> logger = <span class="keyword">new</span> (winston.Logger)(&#123;</div><div class="line">    <span class="attr">level</span> : <span class="string">'debug'</span>,            <span class="comment">// error: 0, warn: 1, info: 2, verbose: 3, debug: 4, silly: 5</span></div><div class="line">    transports: [<span class="keyword">new</span> fluentTransport(<span class="string">'app'</span>, &#123;       <span class="comment">// tag name</span></div><div class="line">        host: <span class="string">'10.10.10.11'</span>,                        <span class="comment">// host</span></div><div class="line">        port: <span class="number">24224</span>,                                <span class="comment">// port</span></div><div class="line">        timeout: <span class="number">3.0</span></div><div class="line">    &#125;), <span class="keyword">new</span> (winston.transports.Console)(&#123;</div><div class="line">        <span class="attr">colorize</span> : <span class="literal">true</span></div><div class="line">    &#125;)]</div><div class="line">&#125;);</div><div class="line"></div><div class="line">logger.debug(<span class="string">'debug log'</span>);</div><div class="line">logger.info(<span class="string">'info log'</span>);</div><div class="line">logger.error(<span class="string">'error log'</span>);</div></pre></td></tr></table></figure></p><p>fluentd에 log 가 제대로 들어왔는지 확인해보자.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/fluentd/volume/<span class="built_in">log</span></div><div class="line">$ ls</div><div class="line">app.20180226.b566194875a717ee6</div><div class="line">$ cat app.20180226.b566194875a717ee6</div><div class="line">2018-02-26T18:17:09 +0900app&#123;<span class="string">"level"</span>:<span class="string">"debug"</span>,<span class="string">"message"</span>:<span class="string">"debug log"</span>,<span class="string">"meta"</span>:&#123;&#125;&#125;</div><div class="line">2018-02-26T18:17:09 +0900app&#123;<span class="string">"level"</span>:<span class="string">"info"</span>,<span class="string">"message"</span>:<span class="string">"info log"</span>,<span class="string">"meta"</span>:&#123;&#125;&#125;</div><div class="line">2018-02-26T18:17:09 +0900app&#123;<span class="string">"level"</span>:<span class="string">"error"</span>,<span class="string">"message"</span>:<span class="string">"error log"</span>,<span class="string">"meta"</span>:&#123;&#125;&#125;</div></pre></td></tr></table></figure></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p>fluentd를 사용하여 file system에 log를 취합하는 방법을 알아보았다.<br>fluentd는 이와 관련하여 file system뿐만아니라 db에도 trigging 할수도있다.<br><a href="https://docs.fluentd.org/v0.12/articles/out_copy" target="_blank" rel="noopener">https://docs.fluentd.org/v0.12/articles/out_copy</a><br>그밖에도 지원되는 plugin이 굉장히 많으므로 구성하고자 하는 환경에따라 plugin을 사용하면될듯하다. ( 공부해야겠다….. )<br>또한 elastic search 와 관련하여 ELK( elastic search + logstash + kibana )를 대신하여 EFK ( elastic search + fluentd + kibana ) stack을 요즘은 더 선호하는듯하다.  </p>]]></content>
      
      <categories>
          
          <category> fluentd </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>build docker service with jenkins</title>
      <link href="/2018/02/23/jenkins/jenkins-5/"/>
      <content type="html"><![CDATA[<h2 id="build-docker-service-with-jenkins"><a href="#build-docker-service-with-jenkins" class="headerlink" title="build docker service with jenkins"></a>build docker service with jenkins</h2><p>이전 포스트 에서 docker registry, service 그리고 stack 에 대해서 알아보았다.<br><a href="https://setyourmindpark.github.io/2018/02/06/docker/docker-4/">docker private registry</a><br><a href="https://setyourmindpark.github.io/2018/02/19/docker/docker-6/">docker swram service</a><br><a href="https://setyourmindpark.github.io/2018/02/21/docker/docker-7/">docker stack</a><br>이제 jenkins를 사용하여 효과적으로 빌드하는지 알아보려한다. 물론 주관적인 필자의 생각이다.  </p><h2 id="Managed-Scripts"><a href="#Managed-Scripts" class="headerlink" title="Managed Scripts"></a>Managed Scripts</h2><p>docker swarm 의 service들을 효과적으로 배포하기위해서 shell script를 적극적으로 사용하여 로직구성을 해야되겠다는 판단이 들었다.<br>jenkins의 plugin 중 Managed Scripts 에 관한 정보는  이전포스트 <a href="https://setyourmindpark.github.io/2017/04/23/jenkins/jenkins-3/">jenkins로 배포하기 - nodejs-2</a> 를 참고하자.<br>일단 전체적인 프로세스는 다음과 같다.  </p><ol><li>배포하고자하는 프로젝트에 Dockerfile 을 생성한다 ( dockerize )</li><li>형상관리( git ) 에 변경사항 반영한다.  </li><li>empty 프로젝트를 기반으로 service를 생성한다 ( service update를 위해 )  </li><li>jenkins에서 build 시 Dockerfile을 기반으로 image build를 시작한다.  </li><li>build 된 image를 docker private registry에 push 한다.  </li><li>docker private registry에 push된 image를 기반으로 service update한다.  </li></ol><p>empty image service 를 생성후 jenkins 에서 service 를 update 를 하는 이유는, service update시 stack에 구성된 환경설정은 그대로 유지되고 image만 교체되기때문에 stack에 정의된 같은 환경으로 구성된 service들과의 동일 설정정보를 항상 유지할수있는 이점이 있어서다.  </p><h2 id="build"><a href="#build" class="headerlink" title="build"></a>build</h2><p>docker stack은 다음과 같이 작성하였다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">version: <span class="string">"3.5"</span></div><div class="line"></div><div class="line">networks:</div><div class="line">  net:</div><div class="line">    driver: overlay</div><div class="line">    attachable: <span class="literal">true</span></div><div class="line"></div><div class="line">services:</div><div class="line">  <span class="comment"># ... other services here</span></div><div class="line">  backend:</div><div class="line">    image: setyourmindpark/debian-node:8</div><div class="line">    ports:</div><div class="line">      - 4000:4000</div><div class="line">    environment:</div><div class="line">      - TZ=Asia/Seoul</div><div class="line">    networks:</div><div class="line">      - net</div><div class="line">    tty: <span class="literal">true</span></div><div class="line">    deploy:</div><div class="line">      replicas: 3</div><div class="line">      placement:</div><div class="line">        constraints:</div><div class="line">          - node.labels.type == backend</div><div class="line">  <span class="comment"># ... other services here</span></div></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker stack deploy -c service-stack.yml setyourmindpark_service</div></pre></td></tr></table></figure><p>위에서 언급한 프로세스의 shell script를 다음과 같이 작성하였다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># env ------------------------------------------------------------------------------------------------------------------------</span></div><div class="line">DOCKER_REGISTRY_PROTOCOL=https</div><div class="line">DOCKER_REGISTRY_DOMAIN=setyourmindpark</div><div class="line">DOCKER_REGISTRY_PORT=5000</div><div class="line">DOCKER_REGISTRY_USER=setyourmindpark</div><div class="line">DOCKER_REGISTRY_PASSWD=0000</div><div class="line"></div><div class="line">APP_NAME=setyourmindpark_backend</div><div class="line">SERVICE_NAME=setyourmindpark_service_backend</div><div class="line">APP_VERSION=`date +<span class="string">"%y%m%d%H%M%S"</span>`</div><div class="line"></div><div class="line"><span class="comment"># build ------------------------------------------------------------------------------------------------------------------------</span></div><div class="line">docker build --tag <span class="variable">$APP_NAME</span>:<span class="variable">$APP_VERSION</span> .</div><div class="line">docker login -u <span class="variable">$DOCKER_REGISTRY_USER</span> -p <span class="variable">$DOCKER_REGISTRY_PASSWD</span> <span class="variable">$DOCKER_REGISTRY_DOMAIN</span>:<span class="variable">$DOCKER_REGISTRY_PORT</span></div><div class="line">docker tag <span class="variable">$APP_NAME</span>:<span class="variable">$APP_VERSION</span> <span class="variable">$DOCKER_REGISTRY_DOMAIN</span>:<span class="variable">$DOCKER_REGISTRY_PORT</span>/<span class="variable">$APP_NAME</span>:<span class="variable">$APP_VERSION</span></div><div class="line">docker push <span class="variable">$DOCKER_REGISTRY_DOMAIN</span>:<span class="variable">$DOCKER_REGISTRY_PORT</span>/<span class="variable">$APP_NAME</span>:<span class="variable">$APP_VERSION</span></div><div class="line">docker rmi <span class="_">-f</span> <span class="variable">$APP_NAME</span>:<span class="variable">$APP_VERSION</span></div><div class="line">docker rmi <span class="_">-f</span> <span class="variable">$DOCKER_REGISTRY_DOMAIN</span>:<span class="variable">$DOCKER_REGISTRY_PORT</span>/<span class="variable">$APP_NAME</span>:<span class="variable">$APP_VERSION</span></div><div class="line"></div><div class="line">docker service update \</div><div class="line">   --image <span class="variable">$DOCKER_REGISTRY_DOMAIN</span>:<span class="variable">$DOCKER_REGISTRY_PORT</span>/<span class="variable">$APP_NAME</span>:<span class="variable">$APP_VERSION</span> \</div><div class="line">   --with-registry-auth \</div><div class="line">   <span class="variable">$SERVICE_NAME</span></div></pre></td></tr></table></figure></p><p>최종 build 결과는 다음과 같다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">overall progress: 0 out of 3 tasks</div><div class="line">1/3:  </div><div class="line">2/3:  </div><div class="line">3/3:  </div><div class="line">overall progress: 0 out of 3 tasks</div><div class="line">overall progress: 1 out of 3 tasks</div><div class="line">overall progress: 2 out of 3 tasks</div><div class="line">overall progress: 3 out of 3 tasks</div><div class="line">verify: Waiting 5 seconds to verify that tasks are stable...</div><div class="line">verify: Waiting 4 seconds to verify that tasks are stable...</div><div class="line">verify: Waiting 3 seconds to verify that tasks are stable...</div><div class="line">verify: Waiting 2 seconds to verify that tasks are stable...</div><div class="line">verify: Waiting 1 seconds to verify that tasks are stable...</div><div class="line">verify: Service converged</div><div class="line">Finished: SUCCESS</div></pre></td></tr></table></figure></p><p>정상적으로 service 배포가되었는지 확인해보자.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ docker service ps setyourmindpark_service_backend</div><div class="line"></div><div class="line">ID                  NAME                                    IMAGE                                                       NODE                DESIRED STATE       CURRENT STATE                     ERROR               PORTS</div><div class="line">l27yump8rk60        setyourmindpark_service_backend.1       setyourmindpark:5000/setyourmindpark_backend:180213123413   backend1            Running             Running less than a second ago                        </div><div class="line">ksblqm51aqne         \_ setyourmindpark_service_backend.1   setyourmindpark/debian-node:8                               backend1            Shutdown            Shutdown less than a second ago                       </div><div class="line">p7a28d4rq4t3        setyourmindpark_service_backend.2       setyourmindpark:5000/setyourmindpark_backend:180213123413   backend1            Running             Running less than a second ago                        </div><div class="line">2qv9ll1qmz2q         \_ setyourmindpark_service_backend.2   setyourmindpark/debian-node:8        backend1            Shutdown            Shutdown less than a second ago                       </div><div class="line">tlbf6gdgijvv        setyourmindpark_service_backend.3       setyourmindpark:5000/setyourmindpark_backend:180213123413   backend1            Running             Running less than a second ago                        </div><div class="line">iy5l21fe264l         \_ setyourmindpark_service_backend.3   setyourmindpark/debian-node:8        backend1            Shutdown            Shutdown less than a second ago</div></pre></td></tr></table></figure></p><p>정상적으로 update 되었다.  </p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p>dockerize란 배포하고자 하는 프로젝트를 image화 하는 작업이라 지칭한다.<br>필자는 dockerize 구성을위한 환경 nodejs 환경기반으로 배포진행하였으며 프로젝트 참고는 다음과 같다.<br><a href="https://github.com/setyourmindpark/nodejs-skeletone-v3" target="_blank" rel="noopener">https://github.com/setyourmindpark/nodejs-skeletone-v3</a>  </p>]]></content>
      
      <categories>
          
          <category> jenkins </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>docker stack</title>
      <link href="/2018/02/21/docker/docker-7/"/>
      <content type="html"><![CDATA[<h2 id="docker-stack"><a href="#docker-stack" class="headerlink" title="docker stack"></a>docker stack</h2><p>docker swarm 을 사용하지않고 단일 물리 머신에서는 docker run … 과같은 명령어들을 docker compose 에 설정하여 사용하는 방법이있었다.<br>docker swarm 에서도 역시 이런 유사한 방법이 있는데 docker service create … 들을 정의하여 사용하는방법이 있으며 docker stack 이라고 지칭한다.<br>docker stack 을 어떻게 사용하는지 알아보자 .  </p><h2 id="configure-yml-file"><a href="#configure-yml-file" class="headerlink" title="configure yml file"></a>configure yml file</h2><p>이전포스트 <a href="https://setyourmindpark.github.io/2018/02/19/docker/docker-6/">docker swarm service</a> 에서 제시된 service 를 생성하는 명령어는 다음과 같다.<br>다음과 같은 service를 생성하는 명령어가 있다고 가정하자.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ docker service create --name nginx \</div><div class="line">--network setyourmindpark_net \</div><div class="line">--constraint <span class="string">"node.labels.type == nginx"</span> \</div><div class="line">-p 80:80 \</div><div class="line">--mount <span class="built_in">type</span>=<span class="built_in">bind</span>,src=/home/docker/nginx/volume,dst=/etc/nginx \</div><div class="line">--replicas 3 \</div><div class="line">setyourmindpark/debian-nginx</div></pre></td></tr></table></figure></p><p>다음과 같이 docker-stack.yml 을 정의한다. ( 파일명은 제약사항이없다. )<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">version: <span class="string">"3.5"</span></div><div class="line"></div><div class="line">networks:</div><div class="line">  net:</div><div class="line">    driver: overlay</div><div class="line">    attachable: <span class="literal">true</span></div><div class="line"></div><div class="line">services:</div><div class="line">  nginx:</div><div class="line">    image: setyourmindpark/debian-nginx</div><div class="line">    ports:</div><div class="line">      - 80:80</div><div class="line">    environment:</div><div class="line">      - TZ=Asia/Seoul</div><div class="line">    volumes:</div><div class="line">      - /home/docker/nginx/volume:/etc/nginx</div><div class="line">    networks:</div><div class="line">      - net</div><div class="line">    deploy:</div><div class="line">      replicas: 3</div><div class="line">      placement:</div><div class="line">        constraints:</div><div class="line">        - node.labels.type == nginx</div></pre></td></tr></table></figure></p><p>이제 stack 명령어를 사용하여 services 들을 생성한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker stack deploy -c 파일명 stack명</span></div><div class="line">$ docker stack deploy -c docker-stack.yml setyourmindpark</div><div class="line">Creating network setyourmindpark_net</div><div class="line">Creating service setyourmindpark_nginx</div><div class="line">$ docker service ls</div><div class="line">ID                  NAME                    MODE                REPLICAS            IMAGE                                 PORTS</div><div class="line">vbdj9p1h58<span class="built_in">fg</span>        setyourmindpark_nginx   replicated          3/3                 setyourmindpark/debian-nginx:latest   *:80-&gt;80/tcp</div></pre></td></tr></table></figure></p><p>정상적으로 생성이 완료되었다.<br>추가적으로 stack으로 생성된 services들은 stack 명령어로도 확인이 가능하다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ docker stack ls </div><div class="line">NAME                SERVICES</div><div class="line">setyourmindpark     1</div><div class="line"></div><div class="line">$ docker stack ps setyourmindpark</div><div class="line">ID                  NAME                      IMAGE                                 NODE                DESIRED STATE       CURRENT STATE           ERROR               PORTS</div><div class="line">vl95vusgaqcp        setyourmindpark_nginx.1   setyourmindpark/debian-nginx:latest   nginx               Running             Running 8 minutes ago                       </div><div class="line">da0107q7fwiv        setyourmindpark_nginx.2   setyourmindpark/debian-nginx:latest   nginx               Running             Running 8 minutes ago                       </div><div class="line">v8om2wwr4ba4        setyourmindpark_nginx.3   setyourmindpark/debian-nginx:latest   nginx               Running             Running 8 minutes ago</div></pre></td></tr></table></figure><p>해당 yml 파일에 기술한 nginx service 외에도 필요한 service를 같이 기술하면, stack deploy시 정의된 모든 services들이 같이 올라올것이다.<br>그밖에도 cpu나, memory limit 과 같은 추가적인 옵션들을 제공하며,( 당연히 docker service create … 시에도 똑같이 사용할수있다. ) 제공하는 옵션은 <a href="https://docs.docker.com/compose/compose-file" target="_blank" rel="noopener">docker Compose file version 3 reference</a> 에서 확인가능하다.  </p><h2 id="견해"><a href="#견해" class="headerlink" title="견해"></a>견해</h2><p>docker 를 잠시동안 놓게되면 정말 엄청나게 빨리 version up 이 되는듯하다.<br>새로생긴 옵션도 많아지고, 점점더 진입장벽이 생기는듯하다.<br>새로 눈여겨볼 부분은 service create 시 -v 가 먹히지않는다는점.. docker document에서는 권장사항이라고 언급하고있으나 필자의 version에서는 해당명령어를 사용할수없었다.<br>물론 –mount 옵션이 좀더 많은 기능을 제공하는듯하다. nas와 같은 volume container를 설정할수있는 옵션이 추가된듯하다 자세히 살펴보지않았지만…<br>꾸준히 docker document를 살펴보는 습관을 길러야겠다.  </p>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>docker swarm service</title>
      <link href="/2018/02/19/docker/docker-6/"/>
      <content type="html"><![CDATA[<h2 id="docker-swarm-service"><a href="#docker-swarm-service" class="headerlink" title="docker swarm service"></a>docker swarm service</h2><p>docker swarm에서 n개의 node 관련 컨테이너 환경설정등을 swarm에서 service라 지칭한다.<br>단일 docker 환경에서는 run 명령어로 컨테이너 환경설정을 구성해보았다면 service 명령어도 무척 쉽게느껴질것이다.<br>run 명령어와 크게 다르지않으며 -p host_port:container_port -e key:value 등 기존의 run 명령어에서 사용한 옵션들을 그대로 사용가능하다.( -v 는 –mount 로  service에서 권장사항으로 변경이되었다. )<br>어떻게 n개의 node 에서 컨테이너를 관리하는지 알아보자.  </p><h2 id="create-service"><a href="#create-service" class="headerlink" title="create service"></a>create service</h2><p>가장 기본적인 service 생성은 다음과 같다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker service create <span class="_">-d</span> --name nginx setyourmindpark/debian-nginx</div></pre></td></tr></table></figure></p><p>정상적으로 생성되었는지 확인하자.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ docker service ls </div><div class="line">ID                  NAME                MODE                REPLICAS            IMAGE                                 PORTS</div><div class="line">wwl53p7zh25r        nginx               replicated          1/1                 setyourmindpark/debian-nginx:latest   *:80-&gt;80/tcp</div></pre></td></tr></table></figure></p><p>replicas 옵션을 설정하지않는다면 default 1개로 생성이된다.<br>어느 node에서 생성되었는지, process 상세정보를 얻고자한다면 다음명령어를 통해 확인할수있다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ docker service ps nginx</div><div class="line">ID                  NAME                IMAGE                                 NODE                DESIRED STATE       CURRENT STATE           ERROR               PORTS</div><div class="line">yivhgl2pk2jd        nginx.1             setyourmindpark/debian-nginx:latest   master              Running             Running 2 minutes ago</div></pre></td></tr></table></figure></p><p>master node 에서 1개의 컨테이너가 실행중임을 알수있다.  </p><h2 id="ingress-network"><a href="#ingress-network" class="headerlink" title="ingress network"></a>ingress network</h2><p>ingress network를 binding 을 해보자.  n 개의 service container들은 비지니스 로직에따라 3자의 container를 연결하거나, 호출할필요가 분명존재할것이다.<br>다음과같이 ingress network를 생성한후 2개의 service를 생성하여 진행해보자.<br>먼저 ingress network 를 생성한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ docker network create --driver overlay setyourmindpark_net</div><div class="line">$ docker network ls </div><div class="line">NETWORK ID          NAME                      DRIVER              SCOPE</div><div class="line">...</div><div class="line">kowrro91wn5v        setyourmindpark_net   overlay             swarm</div><div class="line">...</div></pre></td></tr></table></figure></p><p>service 를 생성한다.<br>( dns ping test를 진행하기위해 mariadb와 nginx 이미지로 진행한다. 추가적인 volume mount나 port는 생략한다. )</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ docker service create <span class="_">-d</span> --name nginx --network setyourmindpark_net setyourmindpark/debian-nginx</div><div class="line">$ docker service create <span class="_">-d</span> --name mariadb --network setyourmindpark_net <span class="_">-e</span> MYSQL_ROOT_PASSWORD=0000 mariadb</div><div class="line"></div><div class="line">$ docker service ps nginx</div><div class="line">ID                  NAME                IMAGE                                 NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS</div><div class="line">6rc28lwmg6v7        nginx.1             setyourmindpark/debian-nginx:latest   nginx               Running             Running 34 seconds ago                       </div><div class="line"></div><div class="line">$ docker serbvice ps mariadb</div><div class="line">ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE                ERROR               PORTS</div><div class="line">nd1pucccgrzj        mariadb.1           mariadb:latest      master              Running             Running about a minute ago</div></pre></td></tr></table></figure><p>nginx container는 nginx node에,  mariadb container는 master 에 각각 1개씩 생성된것을 확인할수있다.<br>이제 각자의 container에 접속하여 등록된 dns로 ping을 날려보자.<br>생성된 각각의 컨테이너로 접속한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># nginx node</span></div><div class="line">$ docker ps </div><div class="line">CONTAINER ID        IMAGE                                 COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line">b8c1858d2f50        setyourmindpark/debian-nginx:latest   <span class="string">"/entrypoint.sh"</span>    5 minutes ago       Up 5 minutes        80/tcp, 443/tcp     nginx.1.6rc28lwmg6v7vars1w7xs93z3</div><div class="line">$ docker <span class="built_in">exec</span> -it b8c1858d2f50 /bin/bash</div><div class="line"></div><div class="line">$ ping mariadb</div><div class="line">PING mariadb (10.0.0.13): 56 data bytes</div><div class="line">64 bytes from 10.0.0.13: icmp_seq=0 ttl=64 time=0.095 ms</div><div class="line">64 bytes from 10.0.0.13: icmp_seq=1 ttl=64 time=0.087 ms</div><div class="line">64 bytes from 10.0.0.13: icmp_seq=2 ttl=64 time=0.284 ms</div><div class="line"></div><div class="line"><span class="comment"># master node</span></div><div class="line">$ docker ps </div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</div><div class="line">e04095504a51        mariadb:latest      <span class="string">"docker-entrypoint.s…"</span>   7 minutes ago       Up 7 minutes        3306/tcp                 mariadb.1.nd1pucccgrzje2xdkm833lgmg</div><div class="line">$ docker <span class="built_in">exec</span> -it e04095504a51 /bin/bash</div><div class="line"></div><div class="line">$ ping nginx</div><div class="line">PING nginx (10.0.0.15): 56 data bytes</div><div class="line">64 bytes from 10.0.0.15: icmp_seq=0 ttl=64 time=0.061 ms</div><div class="line">64 bytes from 10.0.0.15: icmp_seq=1 ttl=64 time=0.135 ms</div><div class="line">64 bytes from 10.0.0.15: icmp_seq=2 ttl=64 time=0.072 ms</div></pre></td></tr></table></figure></p><p>서로다른 물리 node 지만 ingress network로 바인딩되어 컨테이너 생성시 같은 network로 구성된 서비스들이 자동으로 dns로 등록된것을 확인할수있다.  </p><h2 id="replicas"><a href="#replicas" class="headerlink" title="replicas"></a>replicas</h2><p>swarm 을 사용하는 가장중요한 이유중 하나가 replicas 를 사용하기위해서 이기도 하다.<br>replicas option 을 사용하여 container scale up 을 해보자 .<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ docker service scale nginx=2</div><div class="line">nginx scaled to 2</div><div class="line">overall progress: 2 out of 2 tasks </div><div class="line">1/2: running   [==================================================&gt;] </div><div class="line">2/2: running   [==================================================&gt;] </div><div class="line">verify: Service converged </div><div class="line"></div><div class="line">$ docker service ls </div><div class="line">ID                  NAME                MODE                REPLICAS            IMAGE                                 PORTS</div><div class="line">86h0rksc6100        nginx               replicated          2/2                 setyourmindpark/debian-nginx:latest   </div><div class="line"></div><div class="line">$ docker service ps nginx </div><div class="line">ID                  NAME                IMAGE                                 NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS</div><div class="line">6rc28lwmg6v7        nginx.1             setyourmindpark/debian-nginx:latest   nginx               Running             Running 11 minutes ago                       </div><div class="line">st00fxl6khpm        nginx.2             setyourmindpark/debian-nginx:latest   master              Running             Running 9 seconds ago</div></pre></td></tr></table></figure></p><p>master node 와 nginx node에 1개씩 container가 생성된것을 확인할수있다.  </p><h2 id="create-replicated-service-in-specific-node"><a href="#create-replicated-service-in-specific-node" class="headerlink" title="create replicated service in specific node"></a>create replicated service in specific node</h2><p>docker swarm service의 replicas는 개발자가 직접 설정하지않으면 node에 분산되어 container 가 생성된다.<br>특정 node에서만 container 들을 replicas 하도록 설정해보자.<br>먼저 node의 type을 설정해주도록한다. ( 당연히 leader node에서 진행한다 )<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ docker node update --label-add <span class="built_in">type</span>=nginx nginx</div><div class="line">$ docker node inspect nginx</div><div class="line">...</div><div class="line"><span class="string">"Labels"</span>: &#123;</div><div class="line">                <span class="string">"type"</span>: <span class="string">"nginx"</span></div><div class="line">            &#125;,</div><div class="line">..</div></pre></td></tr></table></figure></p><p>다음과 같이 설정이 완료된후, scaleup 한다 .<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ docker service create <span class="_">-d</span> --name nginx --constraint <span class="string">"node.labels.type == nginx"</span> --replicas 3 setyourmindpark/debian-nginx</div><div class="line"></div><div class="line">$ docker service ls </div><div class="line">ID                  NAME                MODE                REPLICAS            IMAGE                                 PORTS</div><div class="line">xmtddrtwibb2        mariadb             replicated          1/1                 mariadb:latest                        </div><div class="line">dv5xvtwpf7np        nginx               replicated          3/3                 setyourmindpark/debian-nginx:latest   </div><div class="line"></div><div class="line">$ docker service ps nginx</div><div class="line">ID                  NAME                IMAGE                                 NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS</div><div class="line">mvt47mwyyhwo        nginx.1             setyourmindpark/debian-nginx:latest   nginx               Running             Running 29 seconds ago                       </div><div class="line">fqppx2a4m01f        nginx.2             setyourmindpark/debian-nginx:latest   nginx               Running             Running 29 seconds ago                       </div><div class="line">dxygv37emol6        nginx.3             setyourmindpark/debian-nginx:latest   nginx               Running             Running 29 seconds ago</div></pre></td></tr></table></figure></p><p>특정 node에 replocas된 service 가 생성된것을 확인할수있다.  </p><h2 id="create-service-with-docker-private-registry"><a href="#create-service-with-docker-private-registry" class="headerlink" title="create service with docker private registry"></a>create service with docker private registry</h2><p>docker swarm 을 service 하는 기업입장에서 private registry에 올려놓은 image들로 서비스를 구성할것이다.  docker 는 private registry에서 pull 하는 옵션으로 <code>--with-registry-auth</code> 를 제공한다.<br>docker private registry 구성은 <a href="https://setyourmindpark.github.io/2018/02/06/docker/docker-4/">docker private registry</a> 를 참고한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker service create <span class="_">-d</span> --name my-private-image --replicas 5 --with-registry-auth setyourmindpark:5000/my-private-image:1.0</div></pre></td></tr></table></figure></p><h2 id="service-update"><a href="#service-update" class="headerlink" title="service update"></a>service update</h2><p>service를 update시 무정지 배포도 가능하다.<br>사용중인 image version1.0 에서 2.0 으로 update 시 다음과 같이 사용할수있다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ docker service update --image setyourmindpark:5000/my-private-image:2.0 --with-registry-auth my-private-image</div><div class="line"></div><div class="line">$ docker service ps my-private-image</div><div class="line">ID                  NAME                     IMAGE                                       NODE                DESIRED STATE       CURRENT STATE                 ERROR               PORTS</div><div class="line">o8g58unqwsrx        my-private-image.1       setyourmindpark:5000/my-private-image:2.0   master              Running             Running 48 seconds ago                            </div><div class="line">0kh6v9dk10go         \_ my-private-image.1   setyourmindpark:5000/my-private-image:1.0   nginx               Shutdown            Shutdown 42 seconds ago                           </div><div class="line">ozmcs99v3pl4        my-private-image.2       setyourmindpark:5000/my-private-image:2.0   master              Running             Running about a minute ago                        </div><div class="line">t6l1hjh6j72y         \_ my-private-image.2   setyourmindpark:5000/my-private-image:1.0   master              Shutdown            Shutdown about a minute ago                       </div><div class="line">bvi8da63ruxl        my-private-image.3       setyourmindpark:5000/my-private-image:2.0   nginx               Running             Running 5 seconds ago                             </div><div class="line">rmeyhhexod6k         \_ my-private-image.3   setyourmindpark:5000/my-private-image:1.0   nginx               Shutdown            Shutdown 6 seconds ago                            </div><div class="line">d1db4z35ejk5        my-private-image.4       setyourmindpark:5000/my-private-image:2.0   nginx               Running             Running 29 seconds ago                            </div><div class="line">6abz8v3ghj9e         \_ my-private-image.4   setyourmindpark:5000/my-private-image:1.0   nginx               Shutdown            Shutdown 30 seconds ago                           </div><div class="line">n8lxnj7raj45        my-private-image.5       setyourmindpark:5000/my-private-image:2.0   master              Running             Running 24 seconds ago                            </div><div class="line">kzea4jr0w9kf         \_ my-private-image.5   setyourmindpark:5000/my-private-image:1.0   master              Shutdown            Shutdown 25 seconds ago</div></pre></td></tr></table></figure></p><p>해당 명령어를 실행해보면 알겠지만, 현재 실행중인 container들을 하나씩 차례로 shutdown하고 1.0 version에서 2.0 version으로 update 하는것을 확인할수있다.  ( rolling 한다 )  </p><h2 id="service-rollback"><a href="#service-rollback" class="headerlink" title="service rollback"></a>service rollback</h2><p>service를 update하였으나, 어떠한 문제로인해 service가 update되지않는경우, update 하기전 상태로 rollback 할수있는 기능을 제공한다. 명령어는 무척이나 간단하다 .<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ docker service rollback my-private-image</div><div class="line"></div><div class="line">$ docker service ps my-private-image</div><div class="line">ID                  NAME                     IMAGE                                       NODE                DESIRED STATE       CURRENT STATE                 ERROR               PORTS</div><div class="line">siaw130oi5cl        my-private-image.1       setyourmindpark:5000/my-private-image:1.0   master              Running             Running 47 seconds ago                            </div><div class="line">o8g58unqwsrx         \_ my-private-image.1   setyourmindpark:5000/my-private-image:2.0   master              Shutdown            Shutdown 47 seconds ago                           </div><div class="line">0kh6v9dk10go         \_ my-private-image.1   setyourmindpark:5000/my-private-image:1.0   nginx               Shutdown            Shutdown 4 minutes ago                            </div><div class="line">tne09aocufyk        my-private-image.2       setyourmindpark:5000/my-private-image:1.0   master              Running             Running 59 seconds ago                            </div><div class="line">ozmcs99v3pl4         \_ my-private-image.2   setyourmindpark:5000/my-private-image:2.0   master              Shutdown            Shutdown 59 seconds ago                           </div><div class="line">t6l1hjh6j72y         \_ my-private-image.2   setyourmindpark:5000/my-private-image:1.0   master              Shutdown            Shutdown 5 minutes ago                            </div><div class="line">tm2nsmei9r50        my-private-image.3       setyourmindpark:5000/my-private-image:1.0   nginx               Running             Running about a minute ago                        </div><div class="line">bvi8da63ruxl         \_ my-private-image.3   setyourmindpark:5000/my-private-image:2.0   nginx               Shutdown            Shutdown about a minute ago                       </div><div class="line">rmeyhhexod6k         \_ my-private-image.3   setyourmindpark:5000/my-private-image:1.0   nginx               Shutdown            Shutdown 4 minutes ago                            </div><div class="line">y9oujmebhdyc        my-private-image.4       setyourmindpark:5000/my-private-image:1.0   nginx               Running             Running about a minute ago                        </div><div class="line">d1db4z35ejk5         \_ my-private-image.4   setyourmindpark:5000/my-private-image:2.0   nginx               Shutdown            Shutdown about a minute ago                       </div><div class="line">6abz8v3ghj9e         \_ my-private-image.4   setyourmindpark:5000/my-private-image:1.0   nginx               Shutdown            Shutdown 4 minutes ago                            </div><div class="line">z7jfvtn7v4<span class="keyword">if</span>        my-private-image.5       setyourmindpark:5000/my-private-image:1.0   master              Running             Running about a minute ago                        </div><div class="line">n8lxnj7raj45         \_ my-private-image.5   setyourmindpark:5000/my-private-image:2.0   master              Shutdown            Shutdown about a minute ago                       </div><div class="line">kzea4jr0w9kf         \_ my-private-image.5   setyourmindpark:5000/my-private-image:1.0   master              Shutdown            Shutdown 4 minutes ago</div></pre></td></tr></table></figure></p><p>2.0 version에서 rollback 실행후 1.0으로 되돌아간것을 확인할수있다.  </p>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>nginx tcp load balancing</title>
      <link href="/2018/02/12/nginx/nginx-2/"/>
      <content type="html"><![CDATA[<h2 id="tcp-load-balancing"><a href="#tcp-load-balancing" class="headerlink" title="tcp load balancing"></a>tcp load balancing</h2><p>db replication으로 구성한 n개의 db를 failover 를 사용하는법은 찾아보다가, 우연히 nginx에서 tcp load balancing을 사용할수있다는것을 알게되었다.<br>이전포스트 <a href="https://setyourmindpark.github.io/2017/05/03/nginx/nginx/">nginx load balancing</a> 에서 http protocol의 load balancing을 살펴보았다면 이번 포스트에서는 tcp protocol 을 사용한 load balancing 을 소개하려한다.  </p><h2 id="nginx-config"><a href="#nginx-config" class="headerlink" title="nginx config"></a>nginx config</h2><p>nginx http protocol load balancing을 구성해보았다면 무척이나 쉽게 느껴질것이다.<br>/etc/nginx/nginc.conf 를 다음과 같이 수정한다.<br>nginx를 설치하면 가장기본적으로 다음과 같이 설정되어있을것이다.<br>http protocol은 사용하지않을 것이므로 다음과같이 주석이나 삭제하고 stream 설정을 추가한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ vi/etc/nginx/nginx.conf</div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment"># 삭제 또는 주석</span></div><div class="line"><span class="comment"># http &#123;</span></div><div class="line"><span class="comment">#     ...</span></div><div class="line"><span class="comment"># &#125;</span></div><div class="line"></div><div class="line"><span class="comment"># 추가</span></div><div class="line">stream &#123;</div><div class="line">    upstream db &#123;</div><div class="line">        server db1_host:db_port;</div><div class="line">        server db2_host:db_port;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen 3306;</div><div class="line">        proxy_pass db;</div><div class="line">        proxy_connect_timeout 1s; <span class="comment"># detect failure quickly</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>다음과 같이 설정을 마친후 nginx를 reload한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nginx <span class="_">-s</span> reload</div></pre></td></tr></table></figure></p><p>해당 설정방법은 nginx document<br><a href="https://www.nginx.com/blog/mysql-high-availability-with-nginx-plus-and-galera-cluster/" target="_blank" rel="noopener">https://www.nginx.com/blog/mysql-high-availability-with-nginx-plus-and-galera-cluster/</a><br>를 보고 참고하였으며, 생각보다 tcp load balancing을 사용하여 db 이중화를 구성하는 개발자분들이 많은것 같다.<br>nginx 를 통해 mysql workbench나 기타 dbms tool로 접속하면 정상적으로 접속되는것을 확인할수있다.  </p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p>docker를 통한 nginx구성은<br><a href="https://hub.docker.com/r/setyourmindpark/debian-nginx/" target="_blank" rel="noopener">https://hub.docker.com/r/setyourmindpark/debian-nginx/</a><br>를 참고하자.  </p>]]></content>
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql or mariadb replication</title>
      <link href="/2018/02/09/database/database-1/"/>
      <content type="html"><![CDATA[<h2 id="replication"><a href="#replication" class="headerlink" title="replication"></a>replication</h2><p>mysql 또는 mariadb의 db replication 에 대해서 살펴보려한다.<br>서비스가 커지면서 db traffic에 대한 이슈, 또는 데이터 장애에 대한 대비책으로 replication 가 갖는 이점들이 분명 존재한다.<br>하지만 db replication 를 한다고 해서 무조건 좋은것은 아니며 그만큼 관리가 힘든 부분도 존재하는것 같다.<br>이전에 설치한 <a href="https://setyourmindpark.github.io/2018/02/02/database/database/">setup mariadb</a> 롤 통해 replication 를 진행해보려한다.  </p><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><p>replication 를 하기위해 2대의 db로 테스트를 진행하며, 필자는 양방향 replication으로 서로가 master 와 slave가 되는 방법으로 진행하려한다.<br>먼저 db의 고유 server-id를 부여해야하며 db1에서 다음과 같이 설정하였다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># db1 shell</span></div><div class="line">$ vi /etc/my.cnf</div><div class="line"></div><div class="line">...</div><div class="line">[mysqld]</div><div class="line"><span class="comment">## replication config</span></div><div class="line"><span class="built_in">log</span>-bin=binlog</div><div class="line">relay-log=relaylog</div><div class="line"><span class="built_in">log</span>-slave_updates       <span class="comment"># master에서 받아온 변경사항을 자신의 log에 기록</span></div><div class="line">server-id=1             <span class="comment"># 각 db는 반드시 고유한 server-id를 가져야한다.  </span></div><div class="line"><span class="comment">## replication config</span></div><div class="line">...</div><div class="line"></div><div class="line">$ service maridb restart</div></pre></td></tr></table></figure></p><p>db2에서도 다음과 같이 진행하며 server-id 값만 다를뿐 다른 설정은 동일하다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># db2 shell</span></div><div class="line">$ vi /etc/my.cnf</div><div class="line"></div><div class="line">...</div><div class="line">[mysqld]</div><div class="line"><span class="comment">## replication config</span></div><div class="line"><span class="built_in">log</span>-bin=binlog</div><div class="line">relay-log=relaylog</div><div class="line"><span class="built_in">log</span>-slave_updates       <span class="comment"># master에서 받아온 변경사항을 자신의 log에 기록</span></div><div class="line">server-id=2             <span class="comment"># 각 db는 반드시 고유한 server-id를 가져야한다.  </span></div><div class="line"><span class="comment">## replication config</span></div><div class="line">...</div><div class="line"></div><div class="line">$ service maridb restart</div></pre></td></tr></table></figure></p><p>db1의 log position을 확인한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># db1 shell</span></div><div class="line">$ mysql &gt; SHOW MASTER STATUS;</div><div class="line">+---------------+----------+--------------+------------------+</div><div class="line">| File          | Position | Binlog_Do_DB | Binlog_Ignore_DB |</div><div class="line">+---------------+----------+--------------+------------------+</div><div class="line">| binlog.000001 |      325 |              |                  |</div><div class="line">+---------------+----------+--------------+------------------+</div></pre></td></tr></table></figure></p><p>db2에서 db1의 master 정보를 설정하여 db1을 db2의 master로 설정한다.<br>slave가 된 db2를 시작한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># db2 shell</span></div><div class="line">mysql &gt; CHANGE MASTER TO</div><div class="line">MASTER_LOG_FILE=<span class="string">'binlog.000001'</span>,</div><div class="line">MASTER_LOG_POS=325,</div><div class="line">MASTER_HOST=<span class="string">'db1 host'</span>,</div><div class="line">MASTER_USER=<span class="string">'db1 user'</span>,</div><div class="line">MASTER_PASSWORD=<span class="string">'db1 user password'</span>;</div><div class="line">START SLAVE;</div></pre></td></tr></table></figure></p><p>slave가 된 db2의 정보확인<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># db2 shell</span></div><div class="line">mysql &gt; SHOW SLAVE STATUS\G;</div><div class="line">*************************** 1. row ***************************</div><div class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</div><div class="line">...                  </div><div class="line">             Slave_IO_Running: Yes</div><div class="line">            Slave_SQL_Running: Yes</div><div class="line">...</div></pre></td></tr></table></figure></p><p>db2 가 db1을 master로 동작하는 slave로 된것을 확인할수있다.<br>db1에서도 db2의 master 정보를 설정하여 db2을 db1의 master로 설정한다.<br>db2의 log position을 확인한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># db2 shell</span></div><div class="line">$ mysql &gt; SHOW MASTER STATUS;</div><div class="line">+---------------+----------+--------------+------------------+</div><div class="line">| File          | Position | Binlog_Do_DB | Binlog_Ignore_DB |</div><div class="line">+---------------+----------+--------------+------------------+</div><div class="line">| binlog.000001 |      325 |              |                  |</div><div class="line">+---------------+----------+--------------+------------------+</div></pre></td></tr></table></figure></p><p>db1에서 db2의 master 정보를 설정하여 db2을 db1의 master로 설정한다.<br>slave가 된 db1를 시작한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># db1 shell</span></div><div class="line">mysql &gt; CHANGE MASTER TO</div><div class="line">MASTER_LOG_FILE=<span class="string">'binlog.000001'</span>,</div><div class="line">MASTER_LOG_POS=325,</div><div class="line">MASTER_HOST=<span class="string">'db2 host'</span>,</div><div class="line">MASTER_USER=<span class="string">'db2 user'</span>,</div><div class="line">MASTER_PASSWORD=<span class="string">'db2 user password'</span>;</div><div class="line">START SLAVE;</div></pre></td></tr></table></figure></p><p>slave가 된 db1의 정보확인<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># db1 shell</span></div><div class="line">mysql &gt; SHOW SLAVE STATUS\G;</div><div class="line">*************************** 1. row ***************************</div><div class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</div><div class="line">...                  </div><div class="line">             Slave_IO_Running: Yes</div><div class="line">            Slave_SQL_Running: Yes</div><div class="line">...</div></pre></td></tr></table></figure></p><p>db1과 db2의 양방향 replication 설정이 완료되었다.<br>참고로 필자는 replication을 하기전 사전에 양쪽db 모두 (db1, db2) 의 계정 정보를 사전에 생성, 권한부여 까지 마친 상태로 진행하였으며 position 초기화 후 진행하였다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mysql &gt; RESET MASTER;</div></pre></td></tr></table></figure></p><h2 id="sync-test"><a href="#sync-test" class="headerlink" title="sync test"></a>sync test</h2><p>위의 설정대로라면 db1이나 db2의 어떤 쪽에서도 DDL 이나 DML이 발생할경우 양쪽db1 모두 sync가 되어 동기화가 이루어져야한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># db1 shell</span></div><div class="line">$ mysql &gt; create database test_db;</div><div class="line"></div><div class="line"><span class="comment"># db2 shell</span></div><div class="line">$ mysql &gt; show databases;</div><div class="line">+--------------------+</div><div class="line">| Database           |</div><div class="line">+--------------------+</div><div class="line">| ...                |</div><div class="line">| test_db            |</div><div class="line">| ...                |</div><div class="line">+--------------------+</div><div class="line">$ mysql &gt; use test_db;</div><div class="line">$ mysql &gt; create table test_tbl( id int primary key );</div><div class="line">$ mysql &gt; insert into test_tbl values(1);</div><div class="line"></div><div class="line"><span class="comment"># db1 shell</span></div><div class="line">$ mysql &gt; use test_db;</div><div class="line">$ select * from test_tbl;</div><div class="line">+----+</div><div class="line">| id |</div><div class="line">+----+</div><div class="line">|  1 |</div><div class="line">+----+</div></pre></td></tr></table></figure></p><p>양쪽모두 sync 가되어 정상적으로 동기화가 되는것을 확인할수있다.  </p><h2 id="position-skip"><a href="#position-skip" class="headerlink" title="position skip"></a>position skip</h2><p>장애가 일어난 상황에서 sync 가 깨진경우 master log position을 skip한후 slave 재시작하게되면 그동안 master에 쌓인 log가 slave에 반영된다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mysql &gt; STOP SLAVE;</div><div class="line">$ mysql &gt; SET GLOBAL SQL_SLAVE_SKIP_COUNTER=1;</div><div class="line">$ mysql &gt; START SLAVE;</div></pre></td></tr></table></figure></p><!-- 필자는 양방향 replication으로 진행하였으나, DML 중 둘중 하나만 sync 가 깨져도 데이터 무결성이 깨질수있으니 좋은 방법은 아닌것같기도 ..  --><!-- replication을 어떻게 사용하느냐가 가장 중요한 요소라 판단된다.   --><!-- 추가적으로 sync가 깨진 상황에 대해서 관리가 어려운것이 가장 난감한 상황으로 생각된다.   --><!-- 로 해결될수있지만, 그렇지않은경우는 ( 정말난감한 상황 ) 에서는 장애를 일으킨 db에서 모든 db 삭제후 master log를 처음부터 밀어넣는 경우도 생길수있을것 같다 .  확실하진않지만 log position이 325 번 부터 시작되는것 같다 .<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ mysql &gt; STOP SLAVE;</div><div class="line">$ mysql &gt; CHANGE MASTER TO</div><div class="line">MASTER_LOG_FILE=<span class="string">'binlog.000001'</span>,</div><div class="line">MASTER_LOG_POS=325,</div><div class="line">MASTER_HOST=<span class="string">'master db host'</span>,</div><div class="line">MASTER_USER=<span class="string">'master db user'</span>,</div><div class="line">MASTER_PASSWORD=<span class="string">'master db password'</span>;</div><div class="line">START SLAVE;</div><div class="line"></div><div class="line">$ mysql &gt; START SLAVE;</div></pre></td></tr></table></figure><p>해당 작업은 master db의 모든 log를 처음부터 밀어넣는 방법이며 업청난 disk io가 발생될것이다 . –&gt;</p>-->]]></content>
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>docker swarm</title>
      <link href="/2018/02/07/docker/docker-5/"/>
      <content type="html"><![CDATA[<h2 id="docker-swarm"><a href="#docker-swarm" class="headerlink" title="docker swarm"></a>docker swarm</h2><p>docker에 대해 글을 쓰는게 많아지는 요즘 이번에는 docker swarm에 대해서 글을 써보려 한다.<br>N 개의 물리서버를 clustering 할수있는 환경을 재공하며 나아가 rollback, scaling, 무중단 배포까지 가능 하다.<br>결론부터 말하면 환경구성하기는 무척이나 쉽다. 그리고 신기하다 .  </p><h2 id="환경구성"><a href="#환경구성" class="headerlink" title="환경구성"></a>환경구성</h2><p>docker swarm을 구성하기전에 당연히 시스템에 docker가 설치되어있어야한다.<br><a href="https://docs.docker.com/install/#supported-platforms" target="_blank" rel="noopener">docker install</a>에서 설치를 진행해도되고, 필자는 github gist를 이용해 아주 쉽게(?) 설치를 진행하였다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="_">-s</span> https://gist.githubusercontent.com/setyourmindpark/fdbac4f4eab71b6a03b13660<span class="built_in">cd</span>064710/raw/9d0f68f6150a57205b7a6df7ddbdab68131335a3/install-docker-ce-centos | bash</div></pre></td></tr></table></figure></p><p>설치 완료를 하면 다음과 같은 버전정보를 확인할수있다 . ( 현 201802 )<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker --version</div><div class="line">Docker version 17.12.0-ce, build c97c6d6</div></pre></td></tr></table></figure></p><p>docker swarm 환경구성을 위해서는 clustering이나 N개의 서버 환경이 필요하다.<br>따라서 필자는 이전포스트 <a href="https://setyourmindpark.github.io/2018/02/05/vagrant/vagrant/">vagrant</a> 에서 진행한 가상환경 centos 2개의 환경에서 진행할것이기에 2개의 환경모두 같은 docker version으로 설치를 진행하였다.  </p><h2 id="docker-swarm-1"><a href="#docker-swarm-1" class="headerlink" title="docker swarm"></a>docker swarm</h2><p>먼저 docker swarm 을 구성하기전에 leader node 로 사용할 서버에서 다음의 명령어를 입력한다.<br>leader node는 N개의 node를 관리하는 관리자 node 라고 생각하면된다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[server1 (leader) ]</div><div class="line">$ docker swarm init --advertise-addr 10.10.10.11</div><div class="line">Swarm initialized: current node (sfx2ywb1o3cgaehkk1recc78n) is now a manager.</div><div class="line"></div><div class="line">To add a worker to this swarm, run the following <span class="built_in">command</span>:</div><div class="line"></div><div class="line">    docker swarm join --token SWMTKN-1-2wo52bbwsw2v350eyjwx2xwof5rk8m3t9ki0ax02jwkgyo14kt-cefzjz5ky4mf3qvyxuxdwuahr 10.10.10.11:2377</div><div class="line"></div><div class="line">To add a manager to this swarm, run <span class="string">'docker swarm join-token manager'</span> and follow the instructions.</div></pre></td></tr></table></figure></p><p>–advertise-addr 옵션뒤 leader node( 현재서버 ip )를 적어주게되면, leader node를 join할 명령어 token을 친절하게 알려준다.<br>이제 leader node에서 생성한 token 정보로, 다른 node에서 join을 해보자.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[server2 (worker) ]</div><div class="line">$ docker swarm join --token SWMTKN-1-2wo52bbwsw2v350eyjwx2xwof5rk8m3t9ki0ax02jwkgyo14kt-cefzjz5ky4mf3qvyxuxdwuahr 10.10.10.11:2377</div><div class="line">This node joined a swarm as a worker.</div></pre></td></tr></table></figure></p><p>정상적으로 swarm join이 되었는지 leader node에서 확인해보자.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ docker node ls </div><div class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS</div><div class="line">sfx2ywb1o3cgaehkk1recc78n *   server1             Ready               Active              Leader</div><div class="line">n2awbegivqvw6dhc6npazwc5s     server2             Ready               Active</div></pre></td></tr></table></figure></p><p>leader(server1)와 worker(server2) 모두 정상적으로 clustering 이되었다.  </p><h2 id="ingress"><a href="#ingress" class="headerlink" title="ingress"></a>ingress</h2><p>docker swarm 을 활용하기위해서 ingress의 개념부터 잘 알아야할것 같다.<br>docker swarm으로 cluster를 구성하게되면 ingress network가 default로 생성된것을 확인할수있다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ docker network ls </div><div class="line">NETWORK ID          NAME                     DRIVER              SCOPE</div><div class="line">08e25cf17147        bridge                   bridge              <span class="built_in">local</span></div><div class="line">c589e1859f70        docker_gwbridge          bridge              <span class="built_in">local</span></div><div class="line">bd3a091f88d0        dockerregistry_default   bridge              <span class="built_in">local</span></div><div class="line">eac1648255dc        host                     host                <span class="built_in">local</span></div><div class="line">05jt5qn72nvy        ingress                  overlay             swarm</div><div class="line">ed2fcc6343f2        none                     null                <span class="built_in">local</span></div></pre></td></tr></table></figure></p><p>scope의 swarm으로 된 ingress 가 보인다.<br>ingress란 아주 쉽게 말해 nginx를 load balancer로 사용한 효과와 같다고 생각하면 된다.<br>다시말해서, 1번 node에 어떠한 service 컨테이너가 존재하고, 2번 node에는 존재하지않는다고 가정한다면, client 입장에서는 1번 node 또는 2번 node 둘중 아무 node를 호출(ex 10.10.10.11:service port 또는 10.10.10.12:service port ) 하여도 같은 결과를 return 한다.<br>ingress가 존재하는 container를 찾아 자동으로 load balancing 하여 마치 한몸처럼 동작하게 되는것이다 .<br>설명하는것보다 다음그림을 보는것이 이해하기 편할것이다.<br><img src="/2018/02/07/docker/docker-5/ingress-routing-mesh.png" alt="ingress"><br><a href="https://docs.docker.com/engine/swarm/ingress/" target="_blank" rel="noopener">https://docs.docker.com/engine/swarm/ingress/</a><br>이제 ingress를 테스트해보자 .<br>container의 unique id를 확인할수있는 image를 받는다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker pull jwilder/whoami</div></pre></td></tr></table></figure></p><p>image pull은 leader node에서 수행하여야 한다. 해당 image를 N개의 node에서 관리할것이므로.<br>document는 <a href="https://hub.docker.com/r/jwilder/whoami/" target="_blank" rel="noopener">https://hub.docker.com/r/jwilder/whoami/</a> 에서 확인가능하다.<br>이제 service를 생성하자.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[server1 (leader) ]</div><div class="line">$ docker service create --name whoami -p 8000:8000 jwilder/whoami</div></pre></td></tr></table></figure></p><p>service를 확인한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ docker service ls</div><div class="line">ID                  NAME                MODE                REPLICAS            IMAGE                   PORTS</div><div class="line">qnueloqeyi63        whoami              replicated          1/1                 jwilder/whoami:latest   *:8000-&gt;8000/tcp</div><div class="line"></div><div class="line">$ docker service ps whoami</div><div class="line">ID                  NAME                IMAGE                   NODE                DESIRED STATE       CURRENT STATE                ERROR               PORTS</div><div class="line">mmcok9zpdfso        whoami.1            jwilder/whoami:latest   server1             Running             Running about a minute ago</div></pre></td></tr></table></figure></p><p><code>1개의 container 가 server1(leader node) 에 생성된것을 확인할수있다.</code><br>이제 document에 제시된바와같이 curl을 날려보자 .<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">server1( leader node )</div><div class="line">$ curl server1:8000</div><div class="line">I<span class="string">'m f8754dbd7fea</span></div></pre></td></tr></table></figure></p><p>ingress가 제대로 동작된다면 server2(worker node) 에서도 동작되어야한다.<br>( worker node 에는 container가 없다 )<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">server1( worker node )</div><div class="line">$ curl server2:8000</div><div class="line">I<span class="string">'m f8754dbd7fea</span></div></pre></td></tr></table></figure></p><p>server2 ( worker node )에는 container가 존재하지않지만 ingress 가 해당 서비스가 존재하는 node를 찾아가는것을 확인할수있다.<br><code>혹시 ingress가 동작하지않는다면 다음과 같이 docker service를 restart 해준다 .</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ service docker restart</div></pre></td></tr></table></figure></p><p><code>약간의 버그가 있는듯하다. 해당 issue와 관련해 질문이 많은것을 알수있는데</code> <a href="https://github.com/moby/moby/issues/32195" target="_blank" rel="noopener">https://github.com/moby/moby/issues/32195</a> <code>를 참고하도록 하자 .</code><br>docker swarm 환경에서 ingress의 동작원리를 간단하게 살펴보았다.<br>docker swarm으로 서비스를 구성한다면 traffic에 관련된 처리라던지, 장애에대한 rollback, 그리고 scaling등의 옵션도 있으니 각자가 추구하는 방향으로 서비스를 구성하면 될것이다.  </p><h2 id="견해"><a href="#견해" class="headerlink" title="견해"></a>견해</h2><p>필자는 docker swarm 을 알고나서 google의 kubernetes나 , apache의 mesos와 같은 ocastration 에 관심이 더욱더 많아졌다.<br>kubernetes가(docker 기반) 요즘 핫하긴한데. 약간의 진입장벽이 있는듯하다.<br>docker를 좀더 친숙하게 다룬후 kubernetes를 다시 도전해보려한다.  </p><h2 id="참고사이트"><a href="#참고사이트" class="headerlink" title="참고사이트"></a>참고사이트</h2><p><a href="https://medium.com/@zh3w4ng/docker-swarm-with-private-registry-for-micro-services-behind-corporate-proxy-bafb349d0b9c" target="_blank" rel="noopener">https://medium.com/@zh3w4ng/docker-swarm-with-private-registry-for-micro-services-behind-corporate-proxy-bafb349d0b9c</a><br><a href="https://subicura.com/2017/02/25/container-orchestration-with-docker-swarm.html" target="_blank" rel="noopener">https://subicura.com/2017/02/25/container-orchestration-with-docker-swarm.html</a><br><a href="https://docs.docker.com/engine/swarm/" target="_blank" rel="noopener">https://docs.docker.com/engine/swarm/</a><br><a href="https://docs.docker.com/engine/swarm/ingress/" target="_blank" rel="noopener">https://docs.docker.com/engine/swarm/ingress/</a></p>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>docker private registry</title>
      <link href="/2018/02/06/docker/docker-4/"/>
      <content type="html"><![CDATA[<h2 id="docker-private-registry"><a href="#docker-private-registry" class="headerlink" title="docker private registry"></a>docker private registry</h2><p>docker를 주로 사용하는 개발자분이라면 한번쯤은 docker hub를 사용하여 public images를 주로 사용하거나, 직접 이미지를 만들어서 사용해보았을 것이다.<br>docker hub와 같은 공개된 이미지 사용이아닌, 나만의 docker hub를 구축하는 방법에 대해 소개하려한다.<br>회사내부 서비스를 개발하거나, 공개되어선 안될 이미지를 나만의 저장소에 보관하고있다가 필요할때 사용할수있는 아주 유용한 방법이다.<br>docker 에서는 이런 저장소를 registry라고 표현하며 어떻게 docker private registry를 구축하는지 알아보자.</p><h2 id="ssl"><a href="#ssl" class="headerlink" title="ssl"></a>ssl</h2><p>docker private registry는 보안상 http를 지원하지않는다. local에서 단순히 테스트용도로 사용한다면 문제없지만, 인증관련하여 remote docker private registry에 접근하고자하면 http로는 불가능하다.<br>따라서 https 를 사용하기위한 ssl을 생성하자 .<br>필자는 이전포스트 <a href="https://setyourmindpark.github.io/2018/02/05/vagrant/vagrant/">vagrant</a> 로 환경구성한 centos 2대의 가상환경으로 구성, 테스트를 진행하였다.<br>사설 ssl을 사용해도 무방하지만, 필자는 self signed ssl을 을 사용할것이기에 다음과 같이 생성하였다 .<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p ~/docker-registry/cert</div><div class="line">$ <span class="built_in">cd</span> ~/docker-registry/cert</div><div class="line">$ openssl genrsa -des3 -out server.key 2048</div><div class="line">$ openssl req -new -key server.key -out server.csr</div><div class="line">$ openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</div><div class="line">$ cp server.key server.key.origin</div><div class="line">$ openssl rsa -in server.key.origin -out server.key</div></pre></td></tr></table></figure></p><p>필자는 다음과 같이 진행하였다 .  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">$ openssl genrsa -des3 -out server.key 2048</div><div class="line">Generating RSA private key, 2048 bit long modulus</div><div class="line">..+++</div><div class="line">............................................................+++</div><div class="line">e is 65537 (0x10001)</div><div class="line">Enter pass phrase <span class="keyword">for</span> server.key:</div><div class="line">Verifying - Enter pass phrase <span class="keyword">for</span> server.key:</div><div class="line">$ openssl req -new -key server.key -out server.csr</div><div class="line">Enter pass phrase <span class="keyword">for</span> server.key:</div><div class="line">You are about to be asked to enter information that will be incorporated</div><div class="line">into your certificate request.</div><div class="line">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class="line">There are quite a few fields but you can leave some blank</div><div class="line">For some fields there will be a default value,</div><div class="line">If you enter <span class="string">'.'</span>, the field will be left blank.</div><div class="line">-----</div><div class="line">Country Name (2 letter code) [XX]:</div><div class="line">State or Province Name (full name) []:</div><div class="line">Locality Name (eg, city) [Default City]:</div><div class="line">Organization Name (eg, company) [Default Company Ltd]:</div><div class="line">Organizational Unit Name (eg, section) []:</div><div class="line">Common Name (eg, your name or your server<span class="string">'s hostname) []:setyourmindpark</span></div><div class="line">Email Address []:</div><div class="line"></div><div class="line">Please enter the following 'extra<span class="string">' attributes</span></div><div class="line">to be sent with your certificate request</div><div class="line">A challenge password []:</div><div class="line">An optional company name []:</div><div class="line">[root@server1 cert]# openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</div><div class="line">Signature ok</div><div class="line">subject=/C=XX/L=Default City/O=Default Company Ltd/CN=setyourmindpark</div><div class="line">Getting Private key</div><div class="line">Enter pass phrase for server.key:</div><div class="line">[root@server1 cert]# ls</div><div class="line">server.crt  server.csr  server.key</div><div class="line">[root@server1 cert]# cp server.key server.key.origin</div><div class="line">[root@server1 cert]# openssl rsa -in server.key.origin -out server.key</div><div class="line">Enter pass phrase for server.key.origin:</div><div class="line">writing RSA key</div><div class="line">[root@server1 cert]#</div></pre></td></tr></table></figure><p>여기서 반드시 짚고 넘어가야할 점은 전자서명 파일 생성시 기입하게 되는 정보중<br>Common Name (eg, your name or your server’s hostname) []:<br>해당정보를 반드시 registry에서 사용하게될 도메인 name명과 같아야한다는 점이다.<br>필자는 setyourmindpark로 기입하였다.  </p><h2 id="전자서명-시스템-업데이트"><a href="#전자서명-시스템-업데이트" class="headerlink" title="전자서명 시스템 업데이트"></a>전자서명 시스템 업데이트</h2><p>docker private registry에 로그인하려면 <code>로그인하는 시스템에서 docker private registry를 구성할때 사용한 ssl server.crt 전자서명 시스템을 업데이트해야한다</code>.<br>docker private registry를 구축한 현재의 서버에서도 당연히 로그인을 할것이기에 update를 해준다.<br><code>( remote client 에서 해당 docker private registry를 사용하려면 당연히 현재의 작업을 똑같이 수행햐주어야한다 . )</code><br>참고해야할 점은 시스템에따라 전자서명 update하는 방식이 조금씩은 다르다는 점이다 .  </p><h3 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cp ~/docker-registry/cert/server.crt /usr/share/ca-certificates/</div><div class="line">$ <span class="built_in">echo</span> server.crt &gt;&gt; /etc/ca-certificates.conf</div><div class="line">$ update-ca-certificates</div></pre></td></tr></table></figure><h3 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cp ~/docker-registry/cert/server.crt /etc/pki/ca-trust/<span class="built_in">source</span>/anchors/ </div><div class="line">$ update-ca-trust</div></pre></td></tr></table></figure><h3 id="mac-os-client-local-개발-환경시"><a href="#mac-os-client-local-개발-환경시" class="headerlink" title="mac os ( client local 개발 환경시 )"></a>mac os ( client local 개발 환경시 )</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ security add-trusted-cert <span class="_">-d</span> -r trustRoot -k /Library/Keychains/System.keychain ~/docker-registry/cert/server.crt</div></pre></td></tr></table></figure><p>마지막으로 docker를 재시작한다<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ service docker restart</div></pre></td></tr></table></figure></p><h2 id="docker-private-registry-login-password"><a href="#docker-private-registry-login-password" class="headerlink" title="docker private registry login password"></a>docker private registry login password</h2><p>docker private registry에서 사용할 인증정보 ( username과 password ) 를 생성한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p ~/docker-registry/auth</div><div class="line">$ <span class="built_in">cd</span> ~/docker-registry/auth</div><div class="line">$ docker run \</div><div class="line">  --entrypoint htpasswd \</div><div class="line">  registry -Bbn setyourmindpark 0000 &gt; htpasswd</div></pre></td></tr></table></figure></p><p>필자는 username setyourmindpark<br>password 0000로 생성하였다.<br>사용하고자하는 인증정보를 기입하면 되겠다.  </p><h2 id="execute-docker-private-registry"><a href="#execute-docker-private-registry" class="headerlink" title="execute docker private registry"></a>execute docker private registry</h2><p>ssl과 , 인증정보를 생성하였으니 이제 docker registry를 container로 실행시켜보자.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p ~/docker-registry/volume</div><div class="line">$ docker run <span class="_">-d</span> \</div><div class="line">  -p 5000:5000 \</div><div class="line">  --restart=always \</div><div class="line">  --name registry \</div><div class="line">  -v ~/docker-registry/auth:/auth \</div><div class="line">  <span class="_">-e</span> <span class="string">"REGISTRY_AUTH=htpasswd"</span> \</div><div class="line">  <span class="_">-e</span> <span class="string">"REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm"</span> \</div><div class="line">  <span class="_">-e</span> REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/data \</div><div class="line">  -v ~/docker-registry/volume:/data \</div><div class="line">  <span class="_">-e</span> REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \</div><div class="line">  -v ~/docker-registry/cert:/certs \</div><div class="line">  <span class="_">-e</span> REGISTRY_HTTP_TLS_CERTIFICATE=/certs/server.crt \</div><div class="line">  <span class="_">-e</span> REGISTRY_HTTP_TLS_KEY=/certs/server.key \</div><div class="line">  registry</div></pre></td></tr></table></figure></p><p>또는 docker-compose를 사용할경우 다음과 같이 docker-compose.yml을 기술하여 사용한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$ vi docker-compose.yml</div><div class="line"></div><div class="line">version: <span class="string">'2'</span></div><div class="line">services:</div><div class="line">  docker-registry:</div><div class="line">    image: registry</div><div class="line">    restart: always</div><div class="line">    ports:</div><div class="line">      - <span class="string">"5000:5000"</span></div><div class="line">    volumes:</div><div class="line">      - ~/docker-registry/auth:/auth</div><div class="line">      - ~/docker-registry/cert:/certs</div><div class="line">      - ~/docker-registry/data:/data</div><div class="line">    environment:</div><div class="line">      - REGISTRY_AUTH=htpasswd</div><div class="line">      - REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm</div><div class="line">      - REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/data</div><div class="line">      - REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd</div><div class="line">      - REGISTRY_HTTP_TLS_CERTIFICATE=/certs/server.crt</div><div class="line">      - REGISTRY_HTTP_TLS_KEY=/certs/server.key</div><div class="line">    container_name: registry</div><div class="line"></div><div class="line">$ docker-compose up <span class="_">-d</span></div></pre></td></tr></table></figure></p><p>주의할점은 위에서 차례대로 생성한 ssl 전자서명 과 htpasswd 파일들의 경로를 volume 으로 guest os 에 mount되기에<br>-v ~/docker-registry/auth:/auth \<br>-e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \<br>-v ~/docker-registry/cert:/certs \<br>-e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/server.crt \<br>-e REGISTRY_HTTP_TLS_KEY=/certs/server.key \<br>host os 에 mount 될 경로를 정확히 적어주어야한다. ( -v host os path : guest os path )</p><h2 id="host-추가"><a href="#host-추가" class="headerlink" title="host 추가"></a>host 추가</h2><p>이제 docker private registry에 login할 dns를 등록하자.<br>docker private registry에 로그인시 일반 ip 정보로는 로그인할수없기에 이것또한 반드시 수행되어야할 작업이다 .<br><code>( remote client 해당 docker private registry를 사용하려면 당연히 현재의 작업을 똑같이 수행햐주어야한다 . )</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/hosts</div><div class="line">10.10.10.11 setyourmindpark</div></pre></td></tr></table></figure></p><h2 id="docker-private-registry-login"><a href="#docker-private-registry-login" class="headerlink" title="docker private registry login"></a>docker private registry login</h2><p>이제 모든 실제로 docker private registry에 로그인해보자 .<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ docker login setyourmindpark:5000</div><div class="line">Username (setyourmindpark): </div><div class="line">Password: </div><div class="line">Login Succeeded</div></pre></td></tr></table></figure></p><h2 id="docker-private-registry-custom-image-push"><a href="#docker-private-registry-custom-image-push" class="headerlink" title="docker private registry custom image push"></a>docker private registry custom image push</h2><p>docker private registry 구축을 완료하였으니 사용하고자하는 이미지를 만들어 push 해보자 .<br>테스트용도로 간단한 이미지를 만들어서 private registry에 push 한다.<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">From</span> setyourmindpark/debian-utf8</div><div class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"echo"</span>,<span class="string">"my private image"</span>]</span></div></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ docker build --tag my-private-image .</div><div class="line">$ docker tag my-private-image setyourmindpark:5000/my-private-image</div><div class="line">$ docker push setyourmindpark:5000/my-private-image</div></pre></td></tr></table></figure><p>이미지를 build 한후, 생성된 이미지를 tag로 alias준후 최종적으로 registry에 push 한다.  </p><h2 id="docker-private-registry-image-확인"><a href="#docker-private-registry-image-확인" class="headerlink" title="docker private registry image 확인"></a>docker private registry image 확인</h2><p>위에서 my-private-image를 registry에 push하였다.<br>정상적으로 registry에 push가 되었는지 curl 로 확인해보자.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl -k -u <span class="string">'setyourmindpark:0000'</span> -X GET https://setyourmindpark:5000/v2/_catalog</div><div class="line">&#123;<span class="string">"repositories"</span>:[<span class="string">"my-private-image"</span>]&#125;</div></pre></td></tr></table></figure></p><p>정상적으로 push가 된것을 확인할수있다.  </p><h2 id="remote-client에서-docker-private-registry-이용"><a href="#remote-client에서-docker-private-registry-이용" class="headerlink" title="remote client에서 docker private registry 이용"></a>remote client에서 docker private registry 이용</h2><p>이제 remote client에서 방금 구축한 docker private registry를 이용하여 이미지 pull 또는 push 하기위해 remote client 설정을 진행한다.<br>위에서 진행한 docker private registry server를 server1으로 지칭하고,<br>remote client 를 server2 라고 지칭하도록한다 .<br>일단 위에서 언급한바와같이 docker private registry가 사용중인 전자서명정보가 똑같이 remote client 에도 존재해야한다.<br>ftp를 사용하든지, scp를 통해 파일을 client에 파일을 넘겨주도록 한다.<br>필자는 scp 명령어를 사용하였다.<br>server1에서 다음 명령어를 사용하였다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[server1]</div><div class="line">$ scp ~/docker-registry/cert/server.crt root@10.10.10.12:[전송받을경로]</div><div class="line"></div><div class="line">[server2]</div><div class="line">$ cp server.crt /etc/pki/ca-trust/<span class="built_in">source</span>/anchors/</div><div class="line">$ update-ca-trust</div><div class="line"></div><div class="line">$ vi /etc/hosts</div><div class="line">10.10.10.11 setyourmindpark</div><div class="line"></div><div class="line">$ service docker restart</div><div class="line"></div><div class="line">$ docker login setyourmindpark:5000</div><div class="line">Username (setyourmindpark): </div><div class="line">Password: </div><div class="line">Login Succeeded</div></pre></td></tr></table></figure></p><p>참고로 필자는 remote client도 centos를 사용하였기에 전자서명 업데이트를 server1에서 update한 방법과 같다.<br>remote client 가 ubuntu, centos, mac os ( local 개발 환경시 )등은 위의 전자서명 설정 부분에 기술해두었으니 참고하도록한다.<br>정상적으로 remote docker private registry 에 로그인되었다.  </p><h2 id="docker-private-registry-image-pull-and-execute"><a href="#docker-private-registry-image-pull-and-execute" class="headerlink" title="docker private registry image pull and execute"></a>docker private registry image pull and execute</h2><p>정상적으로 remote docker private registry에 로그인되었다면 아까 만든 my-private-image를 pull 하여 실행해보자<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ docker pull setyourmindpark:5000/my-private-image</div><div class="line"></div><div class="line">$ docker run --name my-private-image setyourmindpark:5000/my-private-image</div><div class="line">my private image</div><div class="line">[root@server2 ~]<span class="comment">#</span></div></pre></td></tr></table></figure></p><h2 id="견해"><a href="#견해" class="headerlink" title="견해"></a>견해</h2><p>docker private registry 를 구축하는 방법에대해서 알아보았다.<br>개인서버가 없다면 amazone s3에 올리는 방법도 있으니 참고하도록 하자 .<br>필자는 실 서버가 없기에 vagrant환경 centos 2대로 테스트를 진행하였으며, 서비스가 존재하는 회사나 이미지 버전관리가 필요하다면 docker private registry를 직접 구축하여 사용하는것이 좋을것 같다.  </p><h2 id="참고사이트"><a href="#참고사이트" class="headerlink" title="참고사이트"></a>참고사이트</h2><p><a href="http://longbe00.blogspot.kr/2015/03/docker_55.html" target="_blank" rel="noopener">http://longbe00.blogspot.kr/2015/03/docker_55.html</a><br><a href="https://docs.docker.com/registry/deploying/#restricting-access" target="_blank" rel="noopener">https://docs.docker.com/registry/deploying/#restricting-access</a><br><a href="https://docs.docker.com/engine/security/certificates/#creating-the-client-certificates" target="_blank" rel="noopener">https://docs.docker.com/engine/security/certificates/#creating-the-client-certificates</a><br><a href="http://manuals.gfi.com/en/kerio/connect/content/server-configuration/ssl-certificates/adding-trusted-root-certificates-to-the-server-1605.html" target="_blank" rel="noopener">http://manuals.gfi.com/en/kerio/connect/content/server-configuration/ssl-certificates/adding-trusted-root-certificates-to-the-server-1605.html</a></p>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>vagrant</title>
      <link href="/2018/02/05/vagrant/vagrant/"/>
      <content type="html"><![CDATA[<h2 id="vagrant"><a href="#vagrant" class="headerlink" title="vagrant"></a>vagrant</h2><p>업무상 고객사의 서버환경을 살펴보면, 대부분 단일 서버로 모든 트래픽을 처리하는 곳은 아직까지 보지못하였다. ( 어찌보면 당연하다. )<br>Xen Server를 사용하여 가상화를 통해 서버자원을 극대화하던지, 실제 물리서버를 2대로 운영을하던지, 그러던도중 vagrant라는 놈을 만나게되었다 .<br>Xen Server나 vmware와 가장 두드러지게 다른점이라면, 환경구성하고자하는 os를 직접 준비할 필요가 없다는점이다. 필요한 os를 설정파일에 설정하게되면 아주간단히 가상환경을 구축할수있다.<br>필자는 앞으로 소개할 docker swarm cluster 를위해 vagrant로 환경구성을 해보려한다 . </p><h2 id="virtual-box-와-vagrnat-설치"><a href="#virtual-box-와-vagrnat-설치" class="headerlink" title="virtual box 와 vagrnat 설치"></a>virtual box 와 vagrnat 설치</h2><p>vagrnat 가상환경을 만들기위해 기본적으로 virtualbox와 vagrant 가 설치되어있어야한다 .<br><a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">virtualbox</a><br><a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="noopener">vagrant</a><br>설치가 진행되었다면 vagrant 로 환경구성 을 진행해보자 .   </p><h2 id="vagrant-설정"><a href="#vagrant-설정" class="headerlink" title="vagrant 설정"></a>vagrant 설정</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vagrant init</div></pre></td></tr></table></figure><p>VagrantFile 이 생성된다 ( DockerFile 이생각나지왜 .. )<br>VagrantFile을 열어보면 다음과같이 설정되어있고, 기타설정들은 모두 주석처리되어있는것을 확인할수있다 .<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">config.vm.box = <span class="string">"base"</span></div></pre></td></tr></table></figure></p><p>필자는 가상화서버 2대를 centos7로 사용할것이기에 다음과 같이 진행하였다 .   </p><h3 id="server1"><a href="#server1" class="headerlink" title="server1"></a>server1</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">config.vm.box = <span class="string">"centos/7"</span></div><div class="line">config.vm.hostname = <span class="string">"server1"</span></div><div class="line">config.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"10.10.10.11"</span></div></pre></td></tr></table></figure><h3 id="server2"><a href="#server2" class="headerlink" title="server2"></a>server2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">config.vm.box = <span class="string">"centos/7"</span></div><div class="line">config.vm.hostname = <span class="string">"server2"</span>  </div><div class="line">config.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"10.10.10.22"</span></div></pre></td></tr></table></figure><p>필자는 가상화 서버 hostname 설정 =&gt; config.vm.hostname<br>고정아이피 설정 =&gt; config.vm.network<br>그리고 사용할 os는 centos 7를 사용하였다 .<br>구성하고자 하는 os는 다음 사이트에서 확인할수있다.<br><a href="https://app.vagrantup.com/boxes/search" target="_blank" rel="noopener">vagrant support os</a>   </p><h2 id="vagrant-가상환경-구축"><a href="#vagrant-가상환경-구축" class="headerlink" title="vagrant 가상환경 구축"></a>vagrant 가상환경 구축</h2><p>설정이 끝났다면 이제 설정된 정보 기반으로 vagrant 가상환경을 구축한다.<br>VagrantFile 이 위치한 경로에서 다음의 명령어를 사용한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vagrant up</div></pre></td></tr></table></figure></p><p>설치진행이 모두 완료되었다면 다음의 명령어로 가상환경으로 접속한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vagrant ssh</div><div class="line">[vagrant@server1 ~]$</div></pre></td></tr></table></figure></p><p>구성한 설정정보로 server1의 hostname으로 접속된것을 확인할수있다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum update</div></pre></td></tr></table></figure><p>깔끔하게 centos package update 최신으로 업데이트 하고, 각자가 원하는 추가구성 또는 설치를 진행한다.  </p><h2 id="vagrant-명령어"><a href="#vagrant-명령어" class="headerlink" title="vagrant 명령어"></a>vagrant 명령어</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ vagrant up        =&gt; 구축</div><div class="line">$ vagrant ssh       =&gt; 접속</div><div class="line">$ vagrant destroy   =&gt; 삭제</div><div class="line">$ vagrant halt      =&gt; 종료</div><div class="line">$ vagrant <span class="built_in">suspend</span>   =&gt; 일시중지 ( 현재상태저장 )</div><div class="line">$ vagrant resume    =&gt; 다시시작 ( <span class="built_in">suspend</span>된 후 ) </div><div class="line">$ vagrant reload    =&gt; 재시동 ( 설정파일변경 등 )</div></pre></td></tr></table></figure><h2 id="견해"><a href="#견해" class="headerlink" title="견해"></a>견해</h2><p>vagrant로 정말 간단하게 원하는 환경을 쉽고 빠르게 구축할수있었다.<br>간간히 구글링을하면 vagrant 와 docker 비교관련 키워드를 심심치 않게 마주치게되는데,<br>그럼 docker 와 vagrant는 무엇이다를까 ?<br>docker와 vagrant 모두 독자적인 os 환경을 구성할수있다는 공통점이 있지만 docker는 가상환경이라닌 ‘격리’ 라는 표현을 사용한다.<br>host os의 linux 자원을 geust os 가 공유하여 사용함으로 vagrant와 같이 가상화를 수행하지않고도 빠르게 가상환경과 같은 효과를 낼수있다 .<br>window에서 docker 환경을 구성한다면 가상환경을 사전에 먼저 구성해야 할것이다. ( host linux os 로부터 자원을 공유받아야하므로 ..  )</p><!-- 추가적으로 timezone 설정을 진행한다 . default는 UTC로 세팅되어있다 .      ``` bash$ timedatectl set-timezone Asia/Seoul``` locale은 default UTF-8로 세팅이 되어있다. KR로 변경을 원하면 다음과 같이 설정할수있다 . ``` bash``` -->]]></content>
      
      <categories>
          
          <category> vagrant </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>javascript callback mechanism</title>
      <link href="/2018/02/04/nodejs/nodejs-5/"/>
      <content type="html"><![CDATA[<h2 id="callback"><a href="#callback" class="headerlink" title="callback"></a>callback</h2><p>비동기 프로그래밍에서 callback을 사용하여 어떻게 데이터를 처리하는지 글을 써보려한다.<br>고전적으로 javascript에서 callback 을 처리하는 방법과, es6 공식탑재된 promise, 그리고 es7 에 탑재될예정(?) 인 async await 을 사용하여 어떻게 callback을 처리하는지 알아보자.<br>다음에서 제시될 tasks(task1, task2, task3 )들은 어떠한 로직들을 처리하는 함수들이며(비동기효과를 위해 timeout으로 .. ), doProcess 함수에서 해당 tasks들을 처리하여 결과를 얻도록 구성하였다 . </p><h2 id="classic"><a href="#classic" class="headerlink" title="classic"></a>classic</h2><p>한번쯤은 callback hell 이라는 용어를 들어보았을것이다. 중첩된(nested) callback으로 개발 유지보수의 어려움과 코드 가독성을 현저히 떨어뜨리게 되는데 우선 고전적인 javascript callback의 사용법부터 알아보자.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">task1</span>(<span class="params">value , callback</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(value)&#123;</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'task1 done'</span>);</div><div class="line">            value += <span class="number">1</span>;</div><div class="line">            callback(value);</div><div class="line">        &#125;, <span class="number">1000</span>);        </div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        callback()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">task2</span>(<span class="params">value, callback</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (value) &#123;</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'task2 done'</span>);</div><div class="line">            value += <span class="number">2</span>;</div><div class="line">            callback(value);</div><div class="line">        &#125;, <span class="number">2000</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        callback()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">task3</span>(<span class="params">value, callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (value) &#123;</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'task3 done'</span>);</div><div class="line">            value += <span class="number">3</span>;</div><div class="line">            callback(value);</div><div class="line">        &#125;, <span class="number">3000</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        callback()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doProcess</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">    task1(value, <span class="function"><span class="keyword">function</span>(<span class="params">result1</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(result1)&#123;</div><div class="line">            </div><div class="line">            task2(result1, <span class="function"><span class="keyword">function</span>(<span class="params">result2</span>)</span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(result2)&#123;</div><div class="line"></div><div class="line">                    task3(result2, <span class="function"><span class="keyword">function</span>(<span class="params">result3</span>)</span>&#123;</div><div class="line">                        <span class="keyword">if</span>(result3)&#123;</div><div class="line">                            </div><div class="line">                            <span class="built_in">console</span>.log(<span class="string">'####################### process done #####################'</span>)</div><div class="line">                            <span class="built_in">console</span>.log(result3)</div><div class="line"></div><div class="line">                        &#125;<span class="keyword">else</span>&#123;</div><div class="line">                            <span class="built_in">console</span>.log(<span class="string">'something wrong ! in task3'</span>);</div><div class="line">                        &#125;</div><div class="line">                    &#125;)</div><div class="line"></div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="built_in">console</span>.log(<span class="string">'something wrong ! in task2'</span>);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;)</div><div class="line"></div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'something wrong ! in task1'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">doProcess(<span class="number">1</span>);</div></pre></td></tr></table></figure></p><p>해당프로세스가 정상적으로 수행되었다면 6초뒤 7이라는 값이 찍히도록 구성하였다 .<br>일단 doProcess() 를 주의깊게보면, 사전적으로 수행되어야할 task가 처리될때까지 기다린후 해당 task를 실행한다. 따라서 task들 각각의 수행중 발생할수있는 에러나, 결과 리턴에 대한 데이터 핸들링이 모두 필요할수밖에없다. 일단 가독성 측면으로 보았을때 상당히 좋지않다. 더나아가 처리될 프로세스가 더 많을 경우 더욱더 난해해질것이다. ( 전통적인 callback hell 을 보여준다 )   </p><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><p>고전적인 callback hell을 벗어나, promise가 나오게된후 개발이 무척이나 편해지고 코드가 깔끔해졌다. 다음의 코드를 보자 .</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">task1</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span>(value)&#123;</div><div class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'task1 done'</span>);</div><div class="line">                value += <span class="number">1</span>;</div><div class="line">                resolve(value)</div><div class="line">            &#125;, <span class="number">1000</span>);      </div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            reject(<span class="string">'something wrong in task1'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">task2</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (value) &#123;</div><div class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'task2 done'</span>);</div><div class="line">                value += <span class="number">2</span>;</div><div class="line">                resolve(value)</div><div class="line">            &#125;, <span class="number">2000</span>);      </div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            reject(<span class="string">'something wrong in task2'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">task3</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (value) &#123;</div><div class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'task3 done'</span>);</div><div class="line">                value += <span class="number">3</span>;</div><div class="line">                resolve(value)</div><div class="line">            &#125;, <span class="number">3000</span>);      </div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            reject(<span class="string">'something wrong in task3'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doProcess</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">    task1(value)</div><div class="line">        .then(<span class="function"><span class="params">result1</span> =&gt;</span> task2(result1))</div><div class="line">        .then(<span class="function"><span class="params">result2</span> =&gt;</span> task3(result2))</div><div class="line">        .then(<span class="function"><span class="params">result3</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'####################### process done #####################'</span>)</div><div class="line">            <span class="built_in">console</span>.log(result3);</div><div class="line">        &#125;)</div><div class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</div><div class="line">&#125;</div><div class="line">doProcess(<span class="number">1</span>);</div></pre></td></tr></table></figure><p>doProcess() 함수를 유심히보면, 위의 고전적인 방법보다 코드가 엄청나게 많이 줄어든것을 확인할수있다. 또한 task들의 error 핸들링은 한곳에서 처리하니, 무척이나 사용이 간편해지고 또한 중첩된 함수가 없으므로 가독성이 월등히 좋아졌다. (chain 형식으로 비동기데이터를 핸들링한다. )  </p><h2 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h2><p>async await은 promise를 기반으로 동작하기에 위의 promise tasks들과 크게다르지않다. 단지 ‘이 함수는 비동기적으로 수행하는 함수야’ 라고 async키워드를 붙이고, 해당 함수를 호출할때는 ‘기다려’ await 키워드를 붙여주기만 하면된다. 다음을 보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">task1</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (value) &#123;</div><div class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'task1 done'</span>);</div><div class="line">                value += <span class="number">1</span>;</div><div class="line">                resolve(value)</div><div class="line">            &#125;, <span class="number">1000</span>);            </div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            reject(<span class="string">'something wrong in task1'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">task2</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (value) &#123;</div><div class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'task2 done'</span>);</div><div class="line">                value += <span class="number">2</span>;</div><div class="line">                resolve(value)</div><div class="line">            &#125;, <span class="number">2000</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            reject(<span class="string">'something wrong in task2'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">task3</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (value) &#123;</div><div class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'task3 done'</span>);</div><div class="line">                value += <span class="number">3</span>;</div><div class="line">                resolve(value)</div><div class="line">            &#125;, <span class="number">3000</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            reject(<span class="string">'something wrong in task3'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">doProcess</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        <span class="keyword">const</span> result1 = <span class="keyword">await</span> task1(value);</div><div class="line">        <span class="keyword">const</span> result2 = <span class="keyword">await</span> task2(result1);</div><div class="line">        <span class="keyword">const</span> result3 = <span class="keyword">await</span> task3(result2);</div><div class="line"></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'####################### process done #####################'</span>)</div><div class="line">        <span class="built_in">console</span>.log(result3);</div><div class="line"></div><div class="line">    &#125;<span class="keyword">catch</span>(err)&#123;</div><div class="line">        <span class="built_in">console</span>.log(err);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">(<span class="params"><span class="keyword">async</span> (</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">await</span> doProcess(<span class="number">1</span>);</div><div class="line">&#125;)()</div></pre></td></tr></table></figure><p>doProcess()함수를 보면 이제는 비동기 로직을 동기코드로 동작하는 효과처럼 보인다.<br>개발자는 비동기함수를 호출한뒤 동기코드를 작성한것처럼 리턴받기만 하면되는데 프로세스 로직구성하기가 promise 보다 더 쉬워지고, promise와 마찬가지로 error 핸들링은 catch에서 처리하면된다 . </p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p>필자는 현재시점 LTS v8.9.4 버전을 사용하였다 .<br>추가적으로 async await은 항상 쌍으로 사용하는것이 좋다고 생각된다. ( 시작은 당연히 async 부터 .. )<br>사실 위의 promise style의 tasks들은 async await tasks로 사용해도 똑같이 동작한다.<br>promise를 사용한다고해서 암묵적으로 async를 생략하고 사용하는것보다는 명시적으로 async를 붙여주는것이 좋다고 생각한다. </p>]]></content>
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>setup mariadb</title>
      <link href="/2018/02/02/database/database/"/>
      <content type="html"><![CDATA[<h2 id="mariadb"><a href="#mariadb" class="headerlink" title="mariadb"></a>mariadb</h2><p>db를 docker official image로만 사용하다보니 mysql 또는 mariadb를 manually하게 설치하는법을 잊고 살았다.<br>그냥 docker ofiicial mariadb를 사용하지 왜 ? 라고 반문한다면, 문득 database와 같은 서비스의 가장 하위 layer level에 있는 서비스들은 다른 의존환경없이 독립된 환경에 존재하는 것이 좋겠다는 생각이 들어서다.<br>막상 설치하려보니, 여기저기서 구글링하여 찾게되어 정리하려한다.  </p><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><p>centos7 환경에서 mariadb를 설치를진행한다.<br>모든 작업은 root로 진행하였으며 다음과 같이 reposotory를 등록후 yum으로 install 한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/yum.repos.d/MariaDB.repo</div><div class="line"></div><div class="line"><span class="comment"># MariaDB 10.2 CentOS repository list - created 2018-02-08 13:29 UTC</span></div><div class="line"><span class="comment"># http://downloads.mariadb.org/mariadb/repositories/</span></div><div class="line">[mariadb]</div><div class="line">name = MariaDB</div><div class="line">baseurl = http://yum.mariadb.org/10.2/centos7-amd64</div><div class="line">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</div><div class="line">gpgcheck=1</div><div class="line"></div><div class="line">$ yum install MariaDB-server MariaDB-client</div></pre></td></tr></table></figure></p><p><a href="https://downloads.mariadb.org/mariadb/repositories/#mirror=kaist&amp;distro=CentOS&amp;distro_release=centos7-amd64--centos7&amp;version=10.2" target="_blank" rel="noopener">mariadb official document</a> 에 아주 자세히나와 있다.<br>설치가 모두 진행된후 mariadb service를 start 한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ systemctl start mariadb</div><div class="line">or</div><div class="line">$ service mariadb start</div></pre></td></tr></table></figure></p><p>마지막으로 anonymous user 접속 차단과, root password 설정, local 접속여부, test database 삭제등 추가 설정을 한다 .<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mysql_secure_installation</div></pre></td></tr></table></figure></p><h2 id="접속"><a href="#접속" class="headerlink" title="접속"></a>접속</h2><p>모든 설치와 설정이 끝이났다. 이제 접속을해보자.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mysql -u root -p</div></pre></td></tr></table></figure></p><h2 id="utf8-설정"><a href="#utf8-설정" class="headerlink" title="utf8 설정"></a>utf8 설정</h2><p>mariadb를 최초 설치하였다면 database character set이 latin1로 되어있을것이다.  그렇지 않은경우도있으니 다음명령어로 확인한다 .  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$ mysql &gt; show variables like <span class="string">'c%'</span>;</div><div class="line">+--------------------------+----------------------------+</div><div class="line">| Variable_name            | Value                      |</div><div class="line">+--------------------------+----------------------------+</div><div class="line">| character_set_client     | utf8                       |</div><div class="line">| character_set_connection | utf8                       |</div><div class="line">| character_set_database   | latin1                     |</div><div class="line">| character_set_filesystem | binary                     |</div><div class="line">| character_set_results    | utf8                       |</div><div class="line">| character_set_server     | latin1                     |</div><div class="line">| character_set_system     | utf8                       |</div><div class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</div><div class="line">| check_constraint_checks  | ON                         |</div><div class="line">| collation_connection     | utf8_general_ci            |</div><div class="line">| collation_database       | latin1_swedish_ci          |</div><div class="line">| collation_server         | latin1_swedish_ci          |</div><div class="line">| completion_type          | NO_CHAIN                   |</div><div class="line">| concurrent_insert        | AUTO                       |</div><div class="line">| connect_timeout          | 10                         |</div><div class="line">+--------------------------+----------------------------+</div></pre></td></tr></table></figure><p>character_set_database 이 latin1으로 되어있다면, 다음과같이 utf8 세팅을 추가한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/my.cnf</div><div class="line">...</div><div class="line">[mysqld]</div><div class="line">character-set-server=utf8</div><div class="line">...</div></pre></td></tr></table></figure></p><p>수정후 mariadb 재시작 한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ service mariadb restart</div></pre></td></tr></table></figure></p><p>character set 변경사항 적용 확인한다 .<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$ mysql &gt; show variables like <span class="string">'c%'</span>;</div><div class="line">+--------------------------+----------------------------+</div><div class="line">| Variable_name            | Value                      |</div><div class="line">+--------------------------+----------------------------+</div><div class="line">| character_set_client     | utf8                       |</div><div class="line">| character_set_connection | utf8                       |</div><div class="line">| character_set_database   | utf8                       |</div><div class="line">| character_set_filesystem | binary                     |</div><div class="line">| character_set_results    | utf8                       |</div><div class="line">| character_set_server     | utf8                       |</div><div class="line">| character_set_system     | utf8                       |</div><div class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</div><div class="line">| check_constraint_checks  | ON                         |</div><div class="line">| collation_connection     | utf8_general_ci            |</div><div class="line">| collation_database       | utf8_general_ci            |</div><div class="line">| collation_server         | utf8_general_ci            |</div><div class="line">| completion_type          | NO_CHAIN                   |</div><div class="line">| concurrent_insert        | AUTO                       |</div><div class="line">| connect_timeout          | 10                         |</div><div class="line">+--------------------------+----------------------------+</div></pre></td></tr></table></figure></p><h2 id="유저생성"><a href="#유저생성" class="headerlink" title="유저생성"></a>유저생성</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 외부 접근가능 </span></div><div class="line">$ mysql &gt; create user <span class="string">'사용자'</span>@<span class="string">'%'</span> identified by <span class="string">'비밀번호'</span>;</div><div class="line"></div><div class="line"><span class="comment"># local만 접근가능</span></div><div class="line">$ mysql &gt; create user <span class="string">'사용자'</span>@<span class="string">'localhost'</span> identified by <span class="string">'비밀번호'</span>;</div><div class="line"></div><div class="line"><span class="comment"># 특정 ip만 접근가능</span></div><div class="line">$ mysql &gt; create user <span class="string">'사용자'</span>@<span class="string">'ip'</span> identified by <span class="string">'비밀번호'</span>;</div></pre></td></tr></table></figure><h2 id="권한부여"><a href="#권한부여" class="headerlink" title="권한부여"></a>권한부여</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 모든db 접근가능</span></div><div class="line">$ mysql &gt; grant all privileges on *.* to <span class="string">'사용자'</span>@<span class="string">'host'</span>;</div><div class="line"></div><div class="line"><span class="comment"># 특정 db 접근가능</span></div><div class="line">$ mysql &gt; grant all privileges on db이름.* to <span class="string">'사용자'</span>@<span class="string">'host'</span>;</div></pre></td></tr></table></figure><p>grant <code>all privileges</code> .. 은 select, update, insert, delete, create 등 DML, DDL 권한을 줄수도있다.  </p><h2 id="권한확인"><a href="#권한확인" class="headerlink" title="권한확인"></a>권한확인</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mysql &gt; show grants <span class="keyword">for</span> <span class="string">'사용자'</span>@<span class="string">'host'</span>;</div></pre></td></tr></table></figure><h2 id="권한삭제"><a href="#권한삭제" class="headerlink" title="권한삭제"></a>권한삭제</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mysql &gt; revoke all on *.* from <span class="string">'사용자'</span>@<span class="string">'host'</span></div></pre></td></tr></table></figure><h2 id="변경사항-적용"><a href="#변경사항-적용" class="headerlink" title="변경사항 적용"></a>변경사항 적용</h2><p>grant, create user, drop user 등 query로 수행되는 작업이아닌 명령어로 수행되는 작업들은 reload 함으로서 즉시반영할수있다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mysql &gt; flush privileges;</div></pre></td></tr></table></figure></p><p>DML(insert, delete, update) 로 수행된작업들은 할필요없다 .   </p>]]></content>
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>compare java and javascript</title>
      <link href="/2017/05/14/nodejs/nodejs-4/"/>
      <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>필자는 아직도 java가 좀더 친숙한면이있다 . java의 꽃이라불리는 상속, 상속을 이용한 메서드 오버라이딩(overriding), 그리고 메서드 오버로딩(overloading) 을 javascript에서 어떻게 사용하는가에 대한 글을 적어보려한다 .<br>필자도 javascript에 입문한지 얼마되지않았지만. 정리하며 익숙해지려 노력중이다 .<br>javascript 만의 장점도 있지만, 자바의 객체지향( Object Oriented Programming  ) 이하 OOP는 검증된 디자인 패턴이므로 javascript 에서도 적용해본다 .<br>필자도 여러 블로거님들의 글을 참고하였으며. 하단의 [ 참고 ] 탭에서 필자가 참고한 사이트를 적어놓았으니 참고하면 좋을듯 하다 .<br><br><br></p><h2 id="java-와-javascript"><a href="#java-와-javascript" class="headerlink" title="java 와 javascript"></a>java 와 javascript</h2><p>먼저 필자는 간단한 예제를 준비했다 .</p><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><h4 id="MyParent-java"><a href="#MyParent-java" class="headerlink" title="MyParent.java"></a>MyParent.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//부모클래스</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyParent</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> String myName = <span class="string">"chahyunpark"</span>;</div><div class="line"><span class="keyword">private</span> String mySex = <span class="string">"남"</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> myAge = <span class="number">57</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myInfo</span><span class="params">()</span></span>&#123;</div><div class="line">System.out.println(<span class="string">"myFather name : "</span> + <span class="keyword">this</span>.myName);</div><div class="line">System.out.println(<span class="string">"myFather sex : "</span> + <span class="keyword">this</span>.mySex);</div><div class="line">System.out.println(<span class="string">"myFather age : "</span> + <span class="keyword">this</span>.myAge);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><br></p><h4 id="MyChild-java"><a href="#MyChild-java" class="headerlink" title="MyChild.java"></a>MyChild.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  <span class="comment">//자식클래스</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyChild</span> <span class="keyword">extends</span> <span class="title">MyParent</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> String myName = <span class="string">"jaehunpark"</span>;</div><div class="line"><span class="keyword">private</span> String mySex = <span class="string">"남"</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> myAge = <span class="number">26</span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span> String myJuminNo = <span class="string">"921234-5678910"</span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span> String myLaptop = <span class="string">"mac book"</span>;</div><div class="line"><span class="keyword">private</span> String myPhone = <span class="string">"galaxy"</span>;</div><div class="line"></div><div class="line"><span class="comment">//private method</span></div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getMyJuminNo</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="string">"my juminNo : "</span> + <span class="keyword">this</span>.myJuminNo;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myFamillyInfo</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">super</span>.myInfo();</div><div class="line">myInfo();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//override</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myInfo</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// TODO Auto-generated method stub</span></div><div class="line">System.out.println(<span class="string">"my name : "</span> + <span class="keyword">this</span>.myName);</div><div class="line">System.out.println(<span class="string">"my sex : "</span> + <span class="keyword">this</span>.mySex);</div><div class="line">System.out.println(<span class="string">"my age : "</span> + <span class="keyword">this</span>.myAge);</div><div class="line">System.out.println(getMyJuminNo());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//basic mathod</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myBelongings</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"my laptop : "</span> + <span class="keyword">this</span>.myLaptop);</div><div class="line">System.out.println(<span class="string">"my phone : "</span> + <span class="keyword">this</span>.myPhone);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//myBelongings overloading</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myBelongings</span><span class="params">(String myLaptop, String myPhone)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.myLaptop = myLaptop;</div><div class="line"><span class="keyword">this</span>.myPhone = myPhone;</div><div class="line">System.out.println(<span class="string">"my new laptop : "</span> + <span class="keyword">this</span>.myLaptop);</div><div class="line">System.out.println(<span class="string">"my new phone : "</span> + <span class="keyword">this</span>.myPhone);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><br></p><h4 id="Run-java"><a href="#Run-java" class="headerlink" title="Run.java"></a>Run.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args )</span></span>&#123;</div><div class="line">MyChild child = <span class="keyword">new</span> MyChild();</div><div class="line">System.out.println(<span class="string">"ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡmyInfoㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ"</span>);</div><div class="line">child.myInfo();</div><div class="line">System.out.println(<span class="string">"ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡmyBelongingsㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ"</span>);</div><div class="line">child.myBelongings();</div><div class="line">System.out.println(<span class="string">"ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡmyBelongings(overloading)ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ"</span>);</div><div class="line">child.myBelongings(<span class="string">"mac book pro 15"</span>,<span class="string">"iphone 7"</span>);</div><div class="line">System.out.println(<span class="string">"ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡmyFamillyInfoㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ"</span>);</div><div class="line">child.myFamillyInfo();</div><div class="line">System.out.println(<span class="string">"ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><br></p><h3 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h3><h4 id="MyParent-js"><a href="#MyParent-js" class="headerlink" title="MyParent.js"></a>MyParent.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = MyParent;</div><div class="line"></div><div class="line"><span class="comment">// 부모 클래스</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyParent</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.myFatherName = <span class="string">'chahyunpark'</span>;</div><div class="line">  <span class="keyword">this</span>.myFatherSex = <span class="string">'남'</span>;</div><div class="line">  <span class="keyword">this</span>.myFatherAge = <span class="number">57</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">MyParent.prototype.myInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'myFather name : '</span> + <span class="keyword">this</span>.myFatherName );</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'myFather sex : '</span> + <span class="keyword">this</span>.myFatherSex );</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'myFather age : '</span> + <span class="keyword">this</span>.myFatherAge );</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p><br></p><h4 id="MyChild-js"><a href="#MyChild-js" class="headerlink" title="MyChild.js"></a>MyChild.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = MyChild;</div><div class="line"></div><div class="line"><span class="keyword">var</span> MyParent = <span class="built_in">require</span>(<span class="string">'./MyParent'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 자식 클래스</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyChild</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.myName = <span class="string">'jaehunpark'</span>;</div><div class="line">  <span class="keyword">this</span>.mySex = <span class="string">'남'</span>;</div><div class="line">  <span class="keyword">this</span>.myAge = <span class="number">26</span>;</div><div class="line">  <span class="keyword">this</span>.myLaptop = <span class="string">'mac book'</span>;</div><div class="line">  <span class="keyword">this</span>.myPhone = <span class="string">'galaxy'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 부모 클래스 상속</span></div><div class="line">MyChild.prototype = <span class="keyword">new</span> MyParent();</div><div class="line"></div><div class="line"><span class="comment">// 생성자 설정</span></div><div class="line">MyChild.prototype.constructor = MyChild;</div><div class="line"></div><div class="line"><span class="comment">// 부모 클래스 myInfo override</span></div><div class="line">MyChild.prototype.myInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//closure를 이용한 private method</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getMyJuminNo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'my juminNo : 921234-5678910'</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'my name : '</span> + <span class="keyword">this</span>.myName );</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'my sex : '</span> + <span class="keyword">this</span>.mySex );</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'my age : '</span> + <span class="keyword">this</span>.myAge );</div><div class="line">  <span class="built_in">console</span>.log(getMyJuminNo());</div><div class="line">&#125;;</div><div class="line"></div><div class="line">MyChild.prototype.myFamillyInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  MyParent.prototype.myInfo.call(<span class="keyword">this</span>);  <span class="comment">// call() 을 이용해 부모 클래스의 myInfo()메서드를 호출한다.</span></div><div class="line">  <span class="keyword">this</span>.myInfo();</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// overloading</span></div><div class="line">MyChild.prototype.myBelongings = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (<span class="built_in">arguments</span>.length) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">0</span> :</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'my laptop : '</span> + <span class="keyword">this</span>.myLaptop);</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'my phone : '</span> + <span class="keyword">this</span>.myPhone);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">2</span> :</div><div class="line">      <span class="keyword">this</span>.myLaptop = <span class="built_in">arguments</span>[<span class="number">0</span>];</div><div class="line">      <span class="keyword">this</span>.myPhone = <span class="built_in">arguments</span>[<span class="number">1</span>];</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'my laptop : '</span> + <span class="keyword">this</span>.myLaptop);</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'my phone : '</span> + <span class="keyword">this</span>.myPhone);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p><br></p><h4 id="Run-js"><a href="#Run-js" class="headerlink" title="Run.js"></a>Run.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyChild = <span class="built_in">require</span>(<span class="string">'./MyChild'</span>);</div><div class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> MyChild();</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡmyInfoㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ'</span>);</div><div class="line">child.myInfo();</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡmyBelongingsㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ'</span>);</div><div class="line">child.myBelongings();</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡmyBelongings(overloading)ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ'</span>);</div><div class="line">child.myBelongings(<span class="string">'mac book pro 15'</span>, <span class="string">'iphone 7'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡmyFamillyInfoㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ'</span>);</div><div class="line">child.myFamillyInfo();</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ'</span>);</div></pre></td></tr></table></figure><p><br></p><p>실행결과는 java와 javascript 모두 동일하다 .<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡmyInfoㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ</div><div class="line"></div><div class="line">my name : jaehunpark</div><div class="line">my sex : 남</div><div class="line">my age : 26</div><div class="line">my juminNo : 921234-5678910</div><div class="line">ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡmyBelongingsㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ</div><div class="line">my laptop : mac book</div><div class="line">my phone : galaxy</div><div class="line">ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡmyBelongings(overloading)ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ</div><div class="line">my laptop : mac book pro 15</div><div class="line">my phone : iphone 7</div><div class="line">ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡmyFamillyInfoㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ</div><div class="line">myFather name : chahyunpark</div><div class="line">myFather sex : 남</div><div class="line">myFather age : 57</div><div class="line">my name : jaehunpark</div><div class="line">my sex : 남</div><div class="line">my age : 26</div><div class="line">my juminNo : 921234-5678910</div><div class="line">ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ</div></pre></td></tr></table></figure></p><p><br><br></p><h2 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h2><p>java는 super라는 keyword가 존재하여 super.myInfo() 를통해 부모 클래스의 메서드를 호출할수있다.<br>하지만 javascript는 부모 클래스의 메서드를 호출할수있는 키워드가 없으므로 , call() 또는 apply() 를 호출하여 부모 클래스에 정의된 함수를 호출한다 .<br>또하나 . javascript 같은경우는 상속을 MyChild.prototype = new MyParent(); 와 같이 정의하기에 정의하는순간부터 context ( this ) 는 부모 클래스와 공유된다 .<br>이러한 이유로 MyParent.js 와 MyParent.java 를 보면 변수명이 다를것이다 .<br>javascript는 상속받은 부모의 변수가 자식의 변수와 겹치면 자식의 this 우선적으로 적용한다. ( 겹치면안된다 . )<br>자바의 private 메서드는 javascript에서 클로저( closure ) 로 구현이가능하며, overloading은 메서드 인자갯수에 따라 구현이가능하다 .<br>간단한 예제로 글을 작성하였지만, 예제가 모든걸 설명해주고 있으니 자주까먹는 필자도 이 예제를 간간히 보며 곱씹어야겠다는 생각이든다 .<br>이 글을 작성하며 javascript가 조금은 더 친숙해진듯 하다 .<br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p><a href="http://webclub.tistory.com/404" target="_blank" rel="noopener">http://webclub.tistory.com/404</a><br><a href="http://www.florakid.com/florakid_lib/sub/javascript/apply_call_method.html" target="_blank" rel="noopener">http://www.florakid.com/florakid_lib/sub/javascript/apply_call_method.html</a><br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Closures" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Closures</a><br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript</a><br><!-- //먼저 이 예제는 자바스크립트에 "per-object methods" 가 존재하지 않는다는 것을 보여준다. JavaScript는 메서드에 대한 레퍼런스가 모두 똑같은 (프로토타입에 처음 정의한) 함수를 참조하고 있기 때문이다.//자바스크립트는 어떤 객체의 메서드로서 함수가 호출될 때 현재 "객체의 컨텍스트"를 특별한 "this" 변수에 "연결한다". 이는 아래와 같이 function 객체의 call 메서드를 호출하는 것과 동일하다. --></p>]]></content>
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>async await</title>
      <link href="/2017/05/13/nodejs/nodejs-3/"/>
      <content type="html"><![CDATA[<h2 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h2><p>es7 공식발표가 되진않았지만 es7에 async와 await 가 잠정적으로 탑재되는 분위기인것 같다 . es6 의 promise가 탑재된듯이 .<br>필자는 nodejs 개발시 Promise ( bluebird module )를 아주 적극적으로 사용하고있다 . 변화를 느끼고자 이전포스트 <a href="https://setyourmindpark.github.io/2017/04/29/nodejs/nodejs-2/">Promise ReactiveX</a><br>에서 ReactiveX를 사용해보았지만 코드 가독성이 Promise 보다는 떨어지기에 적극적으로 도입하긴보다는 Promise와 적절히 섞어 쓰는것이 좋겠다 라는 결론을 지었다.<br>이번에는 async await 에대한 글을 적어보려한다. 결론부터 말하자면 굉장히 아주 매우 마음에드는 녀석이다 .<br><br><br></p><h2 id="more-than-higher-node-7-6"><a href="#more-than-higher-node-7-6" class="headerlink" title="more than higher node 7.6"></a>more than higher node 7.6</h2><p>async await keyword 는 기본적으로 node 7 이상에서 동작한다 ( v7.6 )<br>필자는 ‘ async await 을 사용해봐야지 ‘ 라고 생각하기전까지는 v6.10.3 를 줄곧사용하였다 .<br>nvm이 정말 유용한 녀석이라고 생각한순간이 바로 이순간이었다. nvm에대해서는 <a href="https://setyourmindpark.github.io/2017/04/06/nodejs/nodejs/">nvm</a> 참고하자 .<br>추가적으로 필자는 지금 이 글을 쓰기위한 node 기반 hexo 를 사용할때는 v6.10.3 로 switch 한다. ( node v.7.10.0 에서 hexo 설치시 버그가 있는듯하다 . )</p><h3 id="설치가능-node-version-확인"><a href="#설치가능-node-version-확인" class="headerlink" title="설치가능 node version 확인"></a>설치가능 node version 확인</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm ls-remote</div></pre></td></tr></table></figure><p><br></p><h3 id="node-설치"><a href="#node-설치" class="headerlink" title="node 설치"></a>node 설치</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm install &lt;node버전&gt;</div></pre></td></tr></table></figure><p><br></p><h3 id="node-version-변경"><a href="#node-version-변경" class="headerlink" title="node version 변경"></a>node version 변경</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm alias default &lt;node버전&gt;</div></pre></td></tr></table></figure><p><br></p><h3 id="확인"><a href="#확인" class="headerlink" title="확인"></a>확인</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node --verion</div></pre></td></tr></table></figure><p>필자는 node 최신버전 v.7.10.0 를 사용한다 .<br><br><br></p><h2 id="어떻게-사용하는가"><a href="#어떻게-사용하는가" class="headerlink" title="어떻게 사용하는가"></a>어떻게 사용하는가</h2><p>필자도 쓰면서 알게되었지만. async await은 내부적으로 기본 Promise가 탑재되어있다는것을 알게되었다 .<br>Promise를 즐겨쓰는 개발자라면 학습하는데에 있어 어렵지않을것이다 .<br>먼저 Promise와 async awawit을 비교해보자 .</p><h3 id="async-tasks"><a href="#async-tasks" class="headerlink" title="async tasks"></a>async tasks</h3><p>다음과 같이 비동기 task 들을 정의하였다 .<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncTask1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      resolve(<span class="string">'data1'</span>);</div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncTask2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      resolve(<span class="string">'data2'</span>);</div><div class="line">    &#125;, <span class="number">2000</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncTask3</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      resolve(<span class="string">'data3'</span>);</div><div class="line">    &#125;, <span class="number">3000</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><br></p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// single execution ( 단일실행 )</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">simpleWork</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  asyncTask1()</div><div class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</div><div class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</div><div class="line">&#125;</div><div class="line"><span class="comment">//sequential execution ( 순차실행 )</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">seqWork</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  asyncTask1()</div><div class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(data); <span class="keyword">return</span> asyncTask2(); &#125;)</div><div class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(data); <span class="keyword">return</span> asyncTask3(); &#125;)</div><div class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</div><div class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</div><div class="line">&#125;</div><div class="line"><span class="comment">// unify after execution ( task들 실행후 결과값 합치기 )</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">unifyWork</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">Promise</span>.all([asyncTask1(), asyncTask2(),asyncTask3()])</div><div class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</div><div class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><br></p><h3 id="async-await-1"><a href="#async-await-1" class="headerlink" title="async await"></a>async await</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// single execution ( 단일실행 )</span></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">simpleWork</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">try</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">await</span> asyncTask1());</div><div class="line">  &#125;<span class="keyword">catch</span>(err)&#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//sequential execution ( 순차실행 )</span></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">seqWork</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">try</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">await</span> asyncTask1());</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">await</span> asyncTask2());</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">await</span> asyncTask3());</div><div class="line">  &#125;<span class="keyword">catch</span>(err)&#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// unify after execution ( task들 실행후 결과값 합치기 )</span></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">unifyWork</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">try</span>&#123;    </div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">await</span> <span class="built_in">Promise</span>.all([asyncTask1(), asyncTask2(), asyncTask3()]));</div><div class="line">  &#125;<span class="keyword">catch</span>(err)&#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><br></p><p>Promise와 async await 실행결과는 모두 동일하다 .<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">simpleWork()    <span class="comment">// data1</span></div><div class="line">seqWork()       <span class="comment">// data1</span></div><div class="line">                <span class="comment">// data2</span></div><div class="line">                <span class="comment">// data3</span></div><div class="line">unifyWork()     <span class="comment">// [ 'data1', 'data2', 'data3' ]</span></div></pre></td></tr></table></figure></p><p>Promise와 async await 기본 사용법에대해 알아보았다 .<br>Promise도 분명 간결하나, 실행해야될 로직 전에 사전에 수행되어야할 의존된 로직이있을시에는 Promise chain ( .then() ) 을걸어 정의해야한다.<br>그런부분에 있어서는 async await 은 비동기 코드가 마치 동기 코드로 동작하기때문에 상당히 메리트가 있는것 같다 .<br><br><br></p><h2 id="async-awiat-with-rx"><a href="#async-awiat-with-rx" class="headerlink" title="async awiat with rx"></a>async awiat with rx</h2><p>async await 을 rx와 같이 사용해보자 .<br>async await 도 Promise 기반으로 동작되기도하고, 가독성도 훨씬 좋아졌으니 덧붙여 적절한 상황에서 rx 를 사용하면 금상첨화라고 생각했다 .<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncTask</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      resolve([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]);</div><div class="line">    &#125;, <span class="number">2000</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">doWork</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  Rx.Observable.from(<span class="keyword">await</span> asyncTask())</div><div class="line">      .filter(<span class="function"><span class="params">num</span> =&gt;</span> num % <span class="number">2</span> )</div><div class="line">      .map(<span class="function"><span class="params">num</span> =&gt;</span> num * num )</div><div class="line">      .subscribe(</div><div class="line">        <span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result),</div><div class="line">        err =&gt; <span class="built_in">console</span>.log(err),</div><div class="line">        () =&gt; &#123;&#125;</div><div class="line">      );</div><div class="line">&#125;</div><div class="line">doWork();      <span class="comment">//1</span></div><div class="line">               <span class="comment">//9</span></div><div class="line">               <span class="comment">//25</span></div><div class="line">               <span class="comment">//49</span></div></pre></td></tr></table></figure></p><p>사실 async await 만을 사용하여도 로직을 처리하는데에 충분이 문제가되지않지만 필자는 rx 역시 로직 처리에있어서는 분명 이점이있는 모듈이라고 생각되어 같이 사용해보았다.<br><br><br></p><h2 id="견해"><a href="#견해" class="headerlink" title="견해"></a>견해</h2><p>front-end 에서 async await 을 적용하려면, 역시 node version ( 7.6 ) 이상과 babel을 필수로 도입해야할것이다 .<br>모든 브라우저가 async await을 지원하지않기에 babel를 통해 es5 코드로 변경된 코드를 적용해야하기 때문이다 .<br>사용을해본후 드는 생각으로는 async await 을 적극적으로 사용해야겠다는 생각과 무엇보다 동기코드로 작성할수있기에 callback hell 에대한 걱정이 없어 좋다 .<br>필자는 node version 7 위한 docker images을 만들어놓았다. <a href="https://hub.docker.com/r/setyourmindpark/debian-node/" target="_blank" rel="noopener">setyourmindpark/debian-node:7</a><br>해당 이미지를 base로 하여 추가적인 node 관리 pm2나, 필요한 모듈을 설치하여 새로운 이미지를 만들어 사용하면될것이다 .</p>]]></content>
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>ssh scp proxy</title>
      <link href="/2017/05/11/jenkins/jenkins-4/"/>
      <content type="html"><![CDATA[<h2 id="ssh-scp"><a href="#ssh-scp" class="headerlink" title="ssh scp"></a>ssh scp</h2><p>필자는 jenkins를 주로 사용하며 빌드는 nodejs 기반의 서버를 배포시에는 ssh 와 scp 를 주로사용한다 .<br>ssh와 scp를 사용하는데에 있어 최종 서버에 접근하기까지 중간에 bridge( jump host )와 같은 host가 존재할때가 있다 .<br>물론 접근하고자하는 서버의 ip를 모두 public 으로 개방하면 쉽게 접근이가능하나 관리가 어려워질뿐만아니라 보안적으로도 좋지않기때문에 public host가 proxy host가 되어 내부 서버로 접근해야한다.<br>필자는 jenkins로 빌드할때 이런 상황이 있었으며 정리를하며 기록으로 남기기위해 글을써보려 한다 .<br><br><br></p><h2 id="사전준비"><a href="#사전준비" class="headerlink" title="사전준비"></a>사전준비</h2><p>필자는 기본적으로 jenkins 를 사용하여 원격지에 배포하므로 원격서버 접속시 jenkins 에게 비밀번호를 요구하지 않도록 rsa 암호화통신을 위한 사전 설정한다 .</p><h3 id="jenkins"><a href="#jenkins" class="headerlink" title="jenkins"></a>jenkins</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure><p><br></p><h3 id="proxy-host"><a href="#proxy-host" class="headerlink" title="proxy host"></a>proxy host</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi ~/.ssh/authorized_keys</div></pre></td></tr></table></figure><p><br></p><h3 id="destination-host"><a href="#destination-host" class="headerlink" title="destination host"></a>destination host</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi ~/.ssh/authorized_keys</div></pre></td></tr></table></figure><p><br></p><p>jenkins 에서 cat 명령어로 출력된 id_rsa.pub ( public key ) 를 proxy host 와 최종 접속할 destination host 의 ~/.ssh/authorized_keys 에 붙여넣기한다.<br>작업을 마치게되면 jenkins는 proxy host를 거쳐 destination host 에 비밀번호없이 직접적으로 접근이 가능해졌다.<br><br><br></p><h2 id="ssh-scp-일반적인-사용"><a href="#ssh-scp-일반적인-사용" class="headerlink" title="ssh scp 일반적인 사용"></a>ssh scp 일반적인 사용</h2><p>기본적으로 proxy host를 사용하지않고 단일 remote host ssh 와 scp 는 다음과같다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh &lt;계정&gt;@&lt;remote host ip&gt;</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scp -r &lt;전송할 파일/폴더&gt; &lt;계정&gt;@&lt;remote host ip&gt;:&lt;remote host에 전송받을 경로&gt;</div></pre></td></tr></table></figure><p>이제 proxy host를 경유하여 destination host에 ssh scp 사용법을 알아보자 .</p><p><br><br></p><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><p>필자의 접속 정보는 다음과 같다 . (예시)<br>proxy host : 121.140.166.90<br>destination host : 10.10.200.3</p><h3 id="manual-proxy"><a href="#manual-proxy" class="headerlink" title="manual proxy"></a>manual proxy</h3><h4 id="기본적인방법"><a href="#기본적인방법" class="headerlink" title="기본적인방법"></a>기본적인방법</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -tt jaehunpark@121.140.166.90 ssh root@10.10.200.3</div></pre></td></tr></table></figure><p>아주 간단하게 쓸수있는방법이다 .<br>단순히 -tt 옵션과 ssh 명령어를 두번적어주면된다.<br>하지만 추가적인 설정이 필요하다. 위의 명령어는 proxy host( 121.140.166.90 )로 접속후 proxy host가 destincation host( 10.10.200.3 ) 로 접속을 시도하므로  proxy host의 id_rsa.pub (public key)가 destination host 의 ~/.ssh/authorized_keys 에 존재해야 호출하는 머신에서 direct로 접근가능하다.<br>결론적으로 destination host의 authorized_keys 에는 jenkins host의 id_rsa.pub 와 proxy host id_rsa.pub 두개가 존재해야한다 .<br>( jenkins를 사용하지않고 일반적으로 접속하시는것이라면 그냥 비밀번호 치셔도 됩니다 )</p><p><br></p><h4 id="proxycommand-사용"><a href="#proxycommand-사용" class="headerlink" title="proxycommand 사용"></a>proxycommand 사용</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -o ProxyCommand=&quot;ssh -W %h:%p jaehunpark@121.140.166.90&quot; root@10.10.200.3</div></pre></td></tr></table></figure><p>proxy host를 통하여 직접적으로 접근하는 proxycommand를 사용한 방법이다<br><br></p><h3 id="proxy-after-configuration"><a href="#proxy-after-configuration" class="headerlink" title="proxy after configuration"></a>proxy after configuration</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh server-node-1</div></pre></td></tr></table></figure><p>하단의 <code>configuration</code> 탭의 설정을 마친후 proxy host를 거쳐 destination host에 접근하는 명령어이다.<br>설정만 잘 해놓는다면 정말 간단하게 접근할수있다.<br><br><br></p><h2 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h2><h3 id="manual-proxy-1"><a href="#manual-proxy-1" class="headerlink" title="manual proxy"></a>manual proxy</h3><h4 id="첫번째방법"><a href="#첫번째방법" class="headerlink" title="첫번째방법"></a>첫번째방법</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scp -r -o ProxyCommand=&quot;ssh jaehunpark@121.140.166.90 nc 10.10.200.3 22&quot; /root/.jenkins/workspace/nodejs-skeletone-v2 root@10.10.200.3:/root</div></pre></td></tr></table></figure><p><br></p><h4 id="두번째방법"><a href="#두번째방법" class="headerlink" title="두번째방법"></a>두번째방법</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scp -r -o ProxyCommand=&quot;ssh -W %h:%p jaehunpark@121.140.166.90&quot; /root/.jenkins/workspace/nodejs-skeletone-v2 root@10.10.200.3:/root</div></pre></td></tr></table></figure><p>첫번째방법과 두번째방법 scp 역시 ssh와 비슷하게 proxycommand 를 사용하여 파일을 전송한다. 명령어가 길다보니 조금은 지저분한 느낌이다 . 아래와같이 간단하게 사용할수있다<br><br></p><h3 id="proxy-after-configuration-1"><a href="#proxy-after-configuration-1" class="headerlink" title="proxy after configuration"></a>proxy after configuration</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scp -r nodejs-skeletone-v2 server-node-1:/root</div></pre></td></tr></table></figure><p>ssh와 마찬가지로 <code>configuration</code> 탭의 설정을 마친후 proxy host 를 거쳐 destination host 로 파일을 전송한다<br><br><br></p><h2 id="configuration"><a href="#configuration" class="headerlink" title="configuration"></a>configuration</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi ~/.ssh/config</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Host server-node-1</div><div class="line">HostName 10.10.200.3</div><div class="line">User root</div><div class="line">IdentityFile ~/.ssh/id_rsa</div><div class="line">ProxyCommand ssh -W 10.10.200.3:22 jaehunpark@121.140.166.90</div></pre></td></tr></table></figure><p><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p>proxy host 를 거쳐 destination host 로 ssh 나 scp 를 최초사용시에는 아래와같은 문구를 만나게될것이다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@467c66252dcd:~/.ssh# ssh server-node-1</div><div class="line">Warning: Permanently added &apos;121.140.166.90&apos; (ECDSA) to the list of known hosts.</div><div class="line">The authenticity of host &apos;10.10.200.3 (&lt;no hostip for proxy command&gt;)&apos; can&apos;t be established.</div><div class="line">ECDSA key fingerprint is 88:65:92:d8:f8:75:b4:99:1a:f1:52:e8:b2:03:0e:a6.</div><div class="line">Are you sure you want to continue connecting (yes/no)?</div></pre></td></tr></table></figure></p><p>최초 접속시에는 ~/.ssh/known_hosts 접속 정보가 존재하지 않기 때문에 연결여부를 물어본후 ‘yes’ 를 입력하게되면 ~/.ssh/known_hosts 에 등록하게된다 .<br>개발자가 배포설정을 마치고 jenkins에게 빌드를 시작할때 jenkins는 최초접속이므로 접속정보가 존재하지않아 위의 문구를 만나게되면 가차없이 build fail이 떨어질것이다 .<br>또한 현재 세팅상태로는 proxy host와 destination host 두개의 host 정보가 등록되지않아 두번 요구하게될것이다 .<br>사전에 다음과같이 해결할수있다 .</p><h3 id="jenkins-1"><a href="#jenkins-1" class="headerlink" title="jenkins"></a>jenkins</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keyscan -H 121.140.166.90 &gt;&gt; ~/.ssh/known_hosts</div></pre></td></tr></table></figure><p>proxy host ip를 known_hosts를 등록한후<br><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi ~/.ssh/config</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Host server-node-1</div><div class="line">StrictHostKeyChecking no</div><div class="line">HostName 10.10.200.3</div><div class="line">User root</div><div class="line">IdentityFile ~/.ssh/id_rsa</div><div class="line">ProxyCommand ssh -W 10.10.200.3:22 jaehunpark@121.140.166.90</div></pre></td></tr></table></figure><p><code>StrictHostKeyChecking no</code> 를 추가하여 destination host ( 10.10.200.3 ) 의 접속여부를 무시한다 . ( auto yes )<br><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh server-node-1</div></pre></td></tr></table></figure></p><p>최초접속이라도 어떠한 요구도 묻지않고 proxy host를 거쳐 destination host로 접속할수있다 . ( 위의 설정을 마치고나게되면 known_hosts 에 등록되게된다 )</p><!-- ssh -o ProxyCommand="ssh -W %h:%p jaehunpark@121.140.166.90" root@10.10.200.3scp -r -o ProxyCommand="ssh -W %h:%p jaehunpark@121.140.166.90" id_rsa root@10.10.200.3:/scp -r -o ProxyCommand="ssh jaehunpark@121.140.166.90 nc 10.10.200.3 22" id_rsa root@10.10.200.3:/ -->]]></content>
      
      <categories>
          
          <category> jenkins </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>nginx ssl 적용하기</title>
      <link href="/2017/05/04/nginx/nginx-1/"/>
      <content type="html"><![CDATA[<h2 id="nginx-ssl"><a href="#nginx-ssl" class="headerlink" title="nginx ssl"></a>nginx ssl</h2><p><a href="https://setyourmindpark.github.io/2017/05/03/nginx/nginx/">이전 포스트</a> 에서 nginx 를 사용하여 back-end server를 load balancing 하는 법을 알아보았다.<br>이번 포스트에서는 nginx 에 ssl을 적용하여 https를 사용해보자.<br><br><br></p><h2 id="ssl-생성"><a href="#ssl-생성" class="headerlink" title="ssl 생성"></a>ssl 생성</h2><p>필자는 발급기관에서 발급한 인증서를 사용하지 않고 openssl로 개인이 생성한 인증서를 기반으로 nginx에 ssl을 적용할것이므로 인증서를 생성하자.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ openssl req -new -newkey rsa:2048 -nodes -keyout &lt;개인키이름&gt;.key -out &lt;인증요청서이름&gt;.csr</div></pre></td></tr></table></figure></p><p>필자는 다음과같이 진행하였다.<!-- ![nginx-1_1](/2017/05/04/nginx/nginx-1/nginx-1_1.png) --><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">root@16626249b1d1:/etc/nginx/ssl# openssl req -new -newkey rsa:2048 -nodes -keyout jaehunpark-ssl.key -out jaehunpark-ssl.csr</div><div class="line">Generating a 2048 bit RSA private key</div><div class="line">.....................+++</div><div class="line">.....................................................................+++</div><div class="line">writing new private key to &apos;jaehunpark-ssl.key&apos;</div><div class="line">-----</div><div class="line">You are about to be asked to enter information that will be incorporated</div><div class="line">into your certificate request.</div><div class="line">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class="line">There are quite a few fields but you can leave some blank</div><div class="line">For some fields there will be a default value,</div><div class="line">If you enter &apos;.&apos;, the field will be left blank.</div><div class="line">-----</div><div class="line">Country Name (2 letter code) [AU]:KR</div><div class="line">State or Province Name (full name) [Some-State]:Seoul</div><div class="line">Locality Name (eg, city) []:Seoul</div><div class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:jaehunpark</div><div class="line">Organizational Unit Name (eg, section) []:jaehunpark</div><div class="line">Common Name (e.g. server FQDN or YOUR name) []:jaehunpark</div><div class="line">Email Address []:setyourmindpark@gmail.com</div><div class="line"></div><div class="line">Please enter the following &apos;extra&apos; attributes</div><div class="line">to be sent with your certificate request</div><div class="line">A challenge password []:0000</div><div class="line">An optional company name []:</div><div class="line">root@16626249b1d1:/etc/nginx/ssl# ls</div><div class="line">jaehunpark-ssl.csr  jaehunpark-ssl.key</div></pre></td></tr></table></figure></p><p>입력을 마치게되면 &lt;개인키이름&gt;.key 와 &lt;인증요청서이름&gt;.csr 파일이 생성된다( 개인키, 인증요청서 )<br><br></p><p>이제 생성된 개인키와 인증요청서로 인증서를 만들어보자.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ openssl x509 -req -days 365 -in &lt;인증요청서이름&gt;.csr -signkey &lt;개인키이름&gt;.key -out &lt;생성할인증서이름&gt;.crt</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@16626249b1d1:/etc/nginx/ssl# openssl x509 -req -days 365 -in jaehunpark-ssl.csr -signkey jaehunpark-ssl.key -out jaehunpark-ssl.crt</div><div class="line">Signature ok</div><div class="line">subject=/C=KR/ST=Seoul/L=Seoul/O=jaehunpark/OU=jaehunpark/CN=jaehunpark/emailAddress=setyourmindpark@gmail.com</div><div class="line">Getting Private key</div><div class="line">root@16626249b1d1:/etc/nginx/ssl# ls  </div><div class="line">jaehunpark-ssl.crt  jaehunpark-ssl.csrjaehunpark-ssl.key</div></pre></td></tr></table></figure><p>해당 명령어를 수행하게되면 인증서( 인증서이름.crt )가 생성된다.<br><br><br></p><h3 id="개인키에-걸린-비밀번호제거"><a href="#개인키에-걸린-비밀번호제거" class="headerlink" title="개인키에 걸린 비밀번호제거"></a>개인키에 걸린 비밀번호제거</h3><p>nginx에서 ssl 적용시 &lt;개인키이름&gt;.key와 &lt;인증서이름&gt;.crt 파일로 nginx가 ssl을 적용한다.<br>하지만 개인키에 비밀번호가 걸려있을경우 nginx 재기동시 비밀번호를 요구하므로 비밀번호를 요구하지않도록 사전에 작업을 진행할수있다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cp &lt;생성된개인키이름&gt;.key &lt;생성할개인키복사본이름&gt;.key.secure</div><div class="line">$ openssl rsa -in &lt;생성된개인키복사본이름&gt;.key.secure -out &lt;재생성할개인키이름&gt;.key</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@16626249b1d1:/etc/nginx/ssl# cp jaehunpark-ssl.key jaehunpark-ssl.key.secure</div><div class="line">root@16626249b1d1:/etc/nginx/ssl# openssl rsa -in jaehunpark-ssl.key.secure -out jaehunpark-ssl.key</div><div class="line">writing RSA key</div><div class="line">root@16626249b1d1:/etc/nginx/ssl# ls</div><div class="line">jaehunpark-ssl.crt  jaehunpark-ssl.csrjaehunpark-ssl.key  jaehunpark-ssl.key.secure</div></pre></td></tr></table></figure><p>필자는 재생성할개인키이름을 기존의 생성된 개인키명과 동일하게주어 기존의 개인키이름을 덮어씌우게 하였다. (새로운 개인키이름으로만들면 파일이 하나더 늘어나기에..)<br>필자같은경우는 최초에 생성한 개인키에 비밀번호가 걸려있지않으므로 간단하게 비밀번호를 없앤 개인키를 다시만들었지만 ( 사실 위의 명령어를 수행할필요가없었다 원래 비밀번호가 걸려있지않았으므로 )<br>실제 비밀번호가 걸려있는 개인키로 작업시 [ writing RSA key ] 문구가 뜨기전에 비밀번호를 요구할것이다.<br>이제 필요한 준비는 모두끝이났다.<br><br><br></p><h2 id="ssl-적용"><a href="#ssl-적용" class="headerlink" title="ssl 적용"></a>ssl 적용</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/nginx/conf.d/&lt;서비스명&gt;.conf</div></pre></td></tr></table></figure><p>필자는 생성된 인증서를 기반으로 다음과같이 설정하였다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"># Load Balancing</div><div class="line">upstream target-server &#123;</div><div class="line">  least_conn;</div><div class="line">  server 10.10.200.3:4000 max_fails=3 fail_timeout=10s;</div><div class="line">  server 10.10.200.4:4000 max_fails=3 fail_timeout=10s;</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">        listen 443;</div><div class="line">        server_name 10.10.200.2;</div><div class="line"></div><div class="line">        charset utf-8;</div><div class="line"></div><div class="line">        access_log /etc/nginx/log/access.log;</div><div class="line">        error_log /etc/nginx/log/error.log;</div><div class="line"></div><div class="line">        ssl     on;                                               #ssl사용</div><div class="line">        ssl_certificate /etc/nginx/ssl/jaehunpark-ssl.crt;        #생성된 인증서경로</div><div class="line">        ssl_certificate_key /etc/nginx/ssl/jaehunpark-ssl.key;    #생성된 개인키</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">                proxy_redirect  off;</div><div class="line">                proxy_set_header Host $http_host;</div><div class="line">                proxy_set_header X-Real-IP $remote_addr;</div><div class="line">                proxy_set_header X-Scheme $scheme;</div><div class="line">                proxy_pass http://target-server;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ service nginx restart</div></pre></td></tr></table></figure><p><br></p><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><p>필자는 nginx 최신버전 1.12.0 를 사용하고있다.<br>nginx 에서 ssl 을 정상적으로 사용하기 위해서는 http_ssl_module 모듈이 설치되어 있어야한다.<br>포함된 모듈 확인은<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nginx -V</div></pre></td></tr></table></figure></p><p>명령어로 설치된 모듈들을 확인할수있다.<br><br><br>ssl이 잘 적용되었는지 확인하기위해 https://&lt;주소&gt;:&lt;포트&gt; 로 접속해보자.<br><img src="/2017/05/04/nginx/nginx-1/nginx-1_2.png" alt="nginx-1_2"><br>정상적으로 잘 동작하는것을 확인할수있다.<br><br><br></p><h2 id="참고사이트"><a href="#참고사이트" class="headerlink" title="참고사이트"></a>참고사이트</h2><p><a href="https://www.lesstif.com/pages/viewpage.action?pageId=6979614" target="_blank" rel="noopener">인증서 개념</a><br><a href="http://eung-jin.blogspot.kr/2015/01/nginx-openssl-ssl.html" target="_blank" rel="noopener">nginx ssl 적용</a><br><a href="http://zetawiki.com/wiki/%EB%A6%AC%EB%88%85%EC%8A%A4_%EA%B0%9C%EC%9D%B8%EC%84%9C%EB%AA%85_SSL_%EC%9D%B8%EC%A6%9D%EC%84%9C_%EC%83%9D%EC%84%B1" target="_blank" rel="noopener">ssl 생성</a><br><a href="https://opentutorials.org/module/384/4511" target="_blank" rel="noopener">nginx 추가모듈 설치</a></p>]]></content>
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>nginx load balancing</title>
      <link href="/2017/05/03/nginx/nginx/"/>
      <content type="html"><![CDATA[<h2 id="nginx와-apache"><a href="#nginx와-apache" class="headerlink" title="nginx와 apache"></a>nginx와 apache</h2><p>필자는 최근 back-end 앞단에 load balancing 을사용하여 worker의 가중치 설정, backup 서버설정, connection 이 적은 worker로 연결 등 다양한 옵션으로 load balancing을 수행하는 nginx에 대해서 글을적어보려고한다.<br>한가지 짚고 넘어가야될 부분은 load balancing을 위해 흔히 사용하는 apache와 nginx는 태생적으로 load balancing을 수행 하기위해 개발된 모듈이 아니라는 점이다.<br>apache와 nginx 모두 본연의 목적은 dynamic web project(jsp,php 등)가 아닌 순수 정적파일(static file)을 load하는 웹서버(web server) 로 사용하기위해 개발되었다.<br>본론으로 돌아가 nginx 를사용하여 nodejs 기반의 서버들을 어떻게 load balancing 하는지 살펴보자.<br><br><br></p><h2 id="nginx-설치"><a href="#nginx-설치" class="headerlink" title="nginx 설치"></a>nginx 설치</h2><p>필자는 역시 docker를 사용하여 nginx container를 구성하였으므로, nginx 이미지부터 만들어보자.<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> setyourmindpark/debian-utf8</div><div class="line"><span class="keyword">MAINTAINER</span> jaehunpark <span class="string">"setyourmindpark@gmail.com"</span></div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; \</span></div><div class="line">    apt-get install -y curl &amp;&amp; \</div><div class="line">    apt-get install -y vim</div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'deb http://nginx.org/packages/debian/ jessie nginx'</span> &gt;&gt; /etc/apt/sources.list &amp;&amp; \</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">'deb-src http://nginx.org/packages/debian/ jessie nginx'</span> &gt;&gt; /etc/apt/sources.list &amp;&amp; \</div><div class="line">    curl http://nginx.org/keys/nginx_signing.key | apt-key add - &amp;&amp; \</div><div class="line">    apt-get update &amp;&amp; \</div><div class="line">    apt-get install -y nginx</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">VOLUME</span><span class="bash"> /etc/nginx</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">443</span></div><div class="line"></div><div class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"nginx"</span>, <span class="string">"-g"</span>, <span class="string">"daemon off;"</span>]</span></div></pre></td></tr></table></figure></p><p>필자가 만든 nginx 이미지파일은 <a href="https://hub.docker.com/r/setyourmindpark/debian-nginx/" target="_blank" rel="noopener">docker hub</a> 에 올려놓았다.( 사용법을 기술해놓았으니 필요하신분은 pull 하셔서 사용하시면됩니다. )<br><br></p><p>이미지를 만들었으니, 이제 nginx container를 생성하자.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run -d --name nginx -p 80:80 -p 443:443 -v &lt;host path&gt;:/etc/nginx setyourmindpark/debian-nginx:apple</div></pre></td></tr></table></figure></p><p>docker 를사용하지않는 분들은 debian 기준으로<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/apt/sources.list.d/nginx.list</div></pre></td></tr></table></figure></p><p>최신 nginx 패키지 경로를 입력한다<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">deb http://nginx.org/packages/debian/ jessie nginx</div><div class="line">deb-src http://nginx.org/packages/debian/ jessie nginx</div></pre></td></tr></table></figure></p><p>nginx 최신 패키지를 다운받으려면 public key가 필요하므로<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl http://nginx.org/keys/nginx_signing.key | apt-key add -</div></pre></td></tr></table></figure></p><p>public key를 추가.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ apt-get update</div><div class="line">$ apt-get install nginx</div></pre></td></tr></table></figure></p><p>설치가 완료되었다.<br><br><br></p><h2 id="어떻게-사용하는가"><a href="#어떻게-사용하는가" class="headerlink" title="어떻게 사용하는가"></a>어떻게 사용하는가</h2><p>설치한 nginx를 어떻게 설정하는지 알아보자.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/nginx/conf.d/default.conf</div><div class="line">or</div><div class="line">$ vi /etc/nginx/conf.d/&lt;서비스명&gt;.conf</div></pre></td></tr></table></figure></p><p>default.conf 파일을 열어 해당내용을 수정하던지, 또는 새로운파일명.conf 를만들어 작성해도된다.<br>필자는 다음과 같이 설정하였다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># Load Balancing</div><div class="line">upstream target-server &#123;</div><div class="line">  least_conn;</div><div class="line">  server 10.10.200.3:4000 max_fails=3 fail_timeout=10s;</div><div class="line">  server 10.10.200.4:4000 max_fails=3 fail_timeout=10s;</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">        listen 80;</div><div class="line">        server_name 10.10.200.2;</div><div class="line"></div><div class="line">        charset utf-8;</div><div class="line"></div><div class="line">        access_log /etc/nginx/log/access.log;</div><div class="line">        error_log /etc/nginx/log/error.log;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">                proxy_redirect  off;</div><div class="line">                proxy_set_header Host $http_host;</div><div class="line">                proxy_set_header X-Real-IP $remote_addr;</div><div class="line">                proxy_set_header X-Scheme $scheme;</div><div class="line">                proxy_pass http://target-server;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>필자는 사전에 nodejs 서버를 2대를 기동하였으며 nginx default port 인 80 포트로 접근시 target-server redirect 하도록 설정하였다.<br>주의할 사항은 log 경로 부분의 디렉토리가 존재해야한다.<br>target server 에 대한 세부적인 설정(가중치, 백업서버, 폭주 등) 에대한 설명은 <a href="https://www.lesstif.com/pages/viewpage.action?pageId=35357063" target="_blank" rel="noopener">load balancing 설정</a> 을 참고하길바란다.<br><br></p><p>마지막으로 nginx를 재시작한다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ service nginx restart</div><div class="line">or</div><div class="line">$ /etc/init.d/nginx restart</div></pre></td></tr></table></figure></p><p>restart 명령어가 정상적으로 수행되었다면 제대로 동작하는지 확인해보자.<br><img src="/2017/05/03/nginx/nginx/nginx_1.png" alt="nginx_1"><br><br><br><img src="/2017/05/03/nginx/nginx/nginx_2.png" alt="nginx_1"><br><br><br>80 port로 listen하는 nginx 에 정상적으로 접근이 되는것을 확인할수있다.<br>load balancing이 제대로 수행되는지 눈으로 직접 확인하기위해서 필자는 같은 nodejs server 의 swagger 페이지부분에 server-1와 server-2라는 문구를 추가해두었다.<br>자세히보면 <code>JUST FOR SAMPLE</code> 문구 하단의 작은글씨로 API 문서 server-1 와 server-2를 확인할수있다.<br>참고로 필자는<code>least_conn ;</code> 옵션을 걸어두어 <code>가장 클라이언트 연결 갯수가 적은 서버로 전달하는 설정</code> 을 해두었다.<br><br><br></p><h2 id="견해"><a href="#견해" class="headerlink" title="견해"></a>견해</h2><p>nginx를 사용하여 nodejs 기반의 서버를 load balancing 하는 법을 알아보았다.<br>load balancing을 사용하게되면 필자가 생각하는 이점은 다음과 같다.</p><ol><li>보안에좋다. ( client들은 nginx host로 접근하므로 back-end의 실제 host와 port를 숨길수있어 보안에 좋다. )</li><li>확장성이 용의하다. ( 서비스가 확장되어 back-end server가 추가될경우 nginx를 통해 관리될수있다 )</li><li>유연하다. ( 각 back-end 서버마다 설정을 다르게하여 하드웨어 스펙에 따라 가중치를 포함한 다양한 옵션을 지원한다 )</li></ol><p>이런한 이점으로 반드시 multi server 를 운영하지 않더라도 단순 single server 를 사용함에 있어서도 앞단에 nginx를 사용하는것이 좋다고 생각된다.</p><!--apache 진영의 httpd와 nginx를 많이들 비교하는데 필자는 대세를 따라 nginx에 한표를 던지고싶다.퍼포먼스적으로 apache 보다 좋고 설정이 더 간편하며load balancing을 하게되면 client들은 nginx host로 접근하므로 back-end의 실제 host와 port를 숨길수있어 보안에 좋다.필자가 apache 진영의 httpd 보다 nginx를 사용한 이유에는 몇가지가있다.1. apache를 보다 퍼포먼스가 좋다. [apache vs nginx](http://blog.naver.com/PostView.nhn?blogId=tmondev&logNo=220737182315)2. 필자가 생각으론 httpd 보다 설정이 더 간편하다.<br>마지막으로 단순히 그냥 사용해보고싶은 마음이 컸다.필자가 회사업무를 담당하면서 apache 진영의 httpd 를 java 기반 서버에서는 주로사용하는 듯하며(필자가 참여했던 SI 기반업무의 프로젝트들은 모두 apache를 사용하였다) 무작정 nginx 를 써보며 a어떤 이유에서 nginx 보다는 apache를 더많이 쓰는지 써보며 무엇이 다른지 정확하게 느껴보고싶었다. --><h2 id="참고사이트"><a href="#참고사이트" class="headerlink" title="참고사이트"></a>참고사이트</h2><p><a href="https://opentutorials.org/module/384/3462" target="_blank" rel="noopener">nginx 소개</a><br><a href="https://www.linode.com/docs/web-servers/nginx/install-nginx-web-server-on-debian-8" target="_blank" rel="noopener">debian-8 nginx</a><br><a href="https://www.lesstif.com/pages/viewpage.action?pageId=35357063" target="_blank" rel="noopener">load balancing 설정</a><br><a href="http://blog.naver.com/PostView.nhn?blogId=tmondev&amp;logNo=220737182315" target="_blank" rel="noopener">apache vs nginx</a></p>]]></content>
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Promise ReactiveX</title>
      <link href="/2017/04/29/nodejs/nodejs-2/"/>
      <content type="html"><![CDATA[<h2 id="ReactiveX"><a href="#ReactiveX" class="headerlink" title="ReactiveX"></a>ReactiveX</h2><p>필자는 nodejs 서버를 개발할때 주로 Promise 패턴을 사용한다.<br>비동기 패턴중 상당히 유명한 async.js 도 널리사용하는듯하나, bluebird Promise 에서 async.js에서 지원하는 모든 함수들을 커버가가능하고, 가장 마음에드는 부분은 chain 형식으로 문법을 제공하여 Promise 패턴이 async 보다 코드 가독성이 좋다고 판단되서다.<br><a href="http://bluebirdjs.com/docs/api-reference.html" target="_blank" rel="noopener">bluebird official api</a><br>다른방식의 비동기 패턴을 써보고싶은마음에 우연히 발견한 ReacticeX 에대해서 소개해보고자 한다.<br><br><br></p><h2 id="Promise와-ReactiveX"><a href="#Promise와-ReactiveX" class="headerlink" title="Promise와 ReactiveX"></a>Promise와 ReactiveX</h2><p>우선 ReactiveX 를 줄여서 rx 또는 observer 패턴이라고 표현을 많이들한다.<br>rx 는 Microsoft에서 개발되어 angular 2.0 에서 기본으로 탑재 되기도하였고 현재 많은 개발언어에서 third party library 로 반응형 프로그래밍(observable)을 사용할수있도록 자리를 잡은것 같다.<br>Promise든, ReactiveX 를 학습하게되면 필자가 생각하는 이점은 다음과 같다.</p><ul><li>안드로이드 진영에서 Promise 또는 ReactiveX(RxJava)로 개발할수있다.</li><li>IOS 진영에서 Promise 또는 ReactiveX(RxSwift)로 개발할수있다.</li><li>javascript 에서 promise.js 또는 rx.js 를 지원하므로 back-end(nodejs) 나front-end 에서 개발할수있다.</li></ul><p>결론은 Promise 패턴이나 ReactiveX 를통한 반응형 프로그래밍을 습득하게되면, 모든 플랫폼에 패턴을 통일시킬수 있다.<br>nodejs 로 개발한 서버개발자가 ios 코드를 보게되더라도 패턴의 통일화로 어느정도 로직은 알아볼수있단 뜻이다. (물론 개발언어는 직접습득해야겠죠)<br>한가지 플랫폼에 종속받지않고 다양한 플랫폼을 넘나들면서 개발하는 개발자들은 각자가 추구하는 패턴을 사용하여서 통일시키면 알아보기도 쉽고 개발생산성도 좋아지지않을까 ?<br>본론으로 돌아가 필자는 ReactiveX 반응형 프로그래밍을 사용하기위해 Promise로 작성된 nodejs 서버의 일부 코드를 ReactiveX 코드로 수정하여 사용한 느낌을 적어보도록하겠다.<br><br><br></p><h2 id="ReacticeX-설치와-사용법"><a href="#ReacticeX-설치와-사용법" class="headerlink" title="ReacticeX 설치와 사용법"></a>ReacticeX 설치와 사용법</h2><p>일단 nodejs에서는 npm을통해 한줄의 명령어로 아주 쉽게 설치가능하다.<br>필자는 ReactiveX 를 rx 라고 지칭하도록하겠다.<br><br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install rx --save</div></pre></td></tr></table></figure></p><p><br><br>필자는 nodejs 에서 query를 좀더 쉽게 수행할수있도록 (transaction 등) queryHelper라는 모듈을 만들어 사용중이다.<br>이 Promise로 작성된 queryHelper 모듈을 rx 로 변경해보았다.<br>먼저 기존에 개발된 queryHelper 모듈은 다음과 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getConnection</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    mysql.createPool(conf.db).getConnection(<span class="function">(<span class="params">err, connection</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">if</span>(err)&#123;reject(err);<span class="keyword">return</span> <span class="literal">false</span>;&#125;</div><div class="line">      resolve(connection);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doQuery</span>(<span class="params">connection, resource</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    connection.query(</div><div class="line">      (<span class="keyword">typeof</span>(resource.query) === <span class="string">'function'</span>) ? resource.query(resource.data) : resource.query</div><div class="line">      , (err, data) =&gt;&#123;</div><div class="line">        <span class="keyword">if</span>(err)&#123;reject(err);<span class="keyword">return</span> <span class="literal">false</span>;&#125;</div><div class="line">        <span class="keyword">if</span>((resource.expect||<span class="string">'many'</span>) === <span class="string">'single'</span>)&#123;     </div><div class="line">          <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(data)) resolve(data[<span class="number">0</span>])      </div><div class="line">          <span class="keyword">else</span> resolve(data)      </div><div class="line">        &#125;<span class="keyword">else</span>&#123;     </div><div class="line">          <span class="keyword">if</span>(data.length === <span class="number">0</span>) resolve(<span class="literal">undefined</span>)      </div><div class="line">          <span class="keyword">else</span> resolve(data)      </div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params">resource</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    getConnection().then(<span class="function">(<span class="params">connection</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> doQuery(connection, resource).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</div><div class="line">        connection.release();</div><div class="line">        resolve(data);</div><div class="line">      &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">        connection.release();</div><div class="line">        reject(err)</div><div class="line">      &#125;);</div><div class="line">    &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">      reject(err);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">transaction</span>(<span class="params">resources</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    getConnection().then(<span class="function">(<span class="params">connection</span>) =&gt;</span> &#123;</div><div class="line">      connection.beginTransaction(<span class="function"><span class="params">err</span> =&gt;</span> &#123;<span class="keyword">if</span>(err)&#123;reject(err);<span class="keyword">return</span> <span class="literal">false</span>;&#125;&#125;);</div><div class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.mapSeries(resources, (resource ,index ,length) =&gt; &#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> doQuery(connection,resource);</div><div class="line">      &#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span>&#123;</div><div class="line">        connection.commit(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</div><div class="line">          connection.release();</div><div class="line">          <span class="keyword">if</span>(err)&#123;reject(err);<span class="keyword">return</span> <span class="literal">false</span>;&#125;</div><div class="line">          resolve(data);</div><div class="line">        &#125;)</div><div class="line">      &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">        connection.rollback(<span class="function"><span class="params">()</span> =&gt;</span>&#123;</div><div class="line">          connection.release();</div><div class="line">          reject(err);</div><div class="line">        &#125;)</div><div class="line">      &#125;)</div><div class="line">    &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">      reject(err);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><br><br>다음은 ReactiveX로 코드를 변경해보았다.<br><br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doQuery</span>(<span class="params">connection, resource</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    connection.query(</div><div class="line">      (<span class="keyword">typeof</span>(resource.query) === <span class="string">'function'</span>) ? resource.query(resource.data) : resource.query</div><div class="line">      , (err, data) =&gt;&#123;</div><div class="line">        <span class="keyword">if</span>(err)&#123;reject(err);<span class="keyword">return</span> <span class="literal">false</span>;&#125;</div><div class="line">        <span class="keyword">if</span>((resource.expect||<span class="string">'many'</span>) === <span class="string">'single'</span>)&#123;</div><div class="line">          <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(data)) resolve(data[<span class="number">0</span>])</div><div class="line">          <span class="keyword">else</span> resolve(data)</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">          <span class="keyword">if</span>(data.length === <span class="number">0</span>) resolve(<span class="literal">undefined</span>)</div><div class="line">          <span class="keyword">else</span> resolve(data)</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getConnection</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> Rx.Observable.create(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</div><div class="line">      mysql.createPool(mysqlConfig).getConnection(<span class="function">(<span class="params">err, connection</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span>(err)&#123;observer.onError(err); <span class="keyword">return</span> <span class="literal">false</span>;&#125;;</div><div class="line">        observer.onNext(connection);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params">resource</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> Rx.Observable.create(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</div><div class="line">      getConnection().subscribe(</div><div class="line">        <span class="function"><span class="params">connection</span> =&gt;</span> &#123;</div><div class="line">          <span class="keyword">return</span> Rx.Observable.fromPromise(doQuery(connection, resource)).subscribe(</div><div class="line">            <span class="function"><span class="params">data</span> =&gt;</span> &#123; observer.onNext(data)&#125;,</div><div class="line">            err =&gt; &#123;observer.onError(err); &#125;</div><div class="line">          )</div><div class="line">        &#125;,</div><div class="line">        err =&gt; &#123;</div><div class="line">          observer.onError(err);</div><div class="line">        &#125;</div><div class="line">        ,</div><div class="line">        () =&gt; &#123;&#125;</div><div class="line">      )</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">transaction</span>(<span class="params">resources</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> Rx.Observable.create(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</div><div class="line">    getConnection().subscribe(</div><div class="line">      <span class="function"><span class="params">connection</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> Rx.Observable.of(resources)</div><div class="line">          .mergeMap(<span class="function"><span class="params">q</span> =&gt;</span> Rx.Observable.forkJoin(q.map(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> doQuery(connection,r);</div><div class="line">          &#125;)))</div><div class="line">          .subscribe(</div><div class="line">            <span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">              connection.commit(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</div><div class="line">              connection.release();</div><div class="line">              <span class="keyword">if</span>(err)&#123;observer.onError(err);<span class="keyword">return</span> <span class="literal">false</span>;&#125;</div><div class="line">              observer.onNext(data);</div><div class="line">            &#125;)</div><div class="line">            &#125;,</div><div class="line">            err =&gt; &#123;</div><div class="line">              connection.rollback(<span class="function"><span class="params">()</span> =&gt;</span>&#123;</div><div class="line">                connection.release();</div><div class="line">                observer.onError(err);</div><div class="line">              &#125;)</div><div class="line">            &#125;</div><div class="line">          )</div><div class="line">      &#125;,</div><div class="line">      err =&gt; &#123;</div><div class="line">        observer.onError(err);</div><div class="line">      &#125;,</div><div class="line">      () =&gt; &#123;</div><div class="line">      &#125;</div><div class="line">    )</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><br><br>필자가 생소하기도하고, 어려웠던부분은 다음과같다.<br>두개의 로직을 보면 rx로 작성된 queryHepler에서도 doQuery() 함수부분은 Promise로 작성된 로직과 같은걸 볼수있다.<br>원래 rx의 doQuery()함수는<br><br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doQuery</span>(<span class="params">connection, resource</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> Rx.Observable.create(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</div><div class="line">    connection.query(</div><div class="line">      (<span class="keyword">typeof</span>(resource.query) === <span class="string">'function'</span>) ? resource.query(resource.data) : resource.query</div><div class="line">      , (err, data) =&gt;&#123;</div><div class="line">        <span class="keyword">if</span>(err)&#123;observer.onError(err); <span class="keyword">return</span> <span class="literal">false</span>;&#125;</div><div class="line">        <span class="keyword">if</span>((resource.expect||<span class="string">'many'</span>) === <span class="string">'single'</span>)&#123;</div><div class="line">          <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(data)) observer.onNext(data[<span class="number">0</span>])</div><div class="line">          <span class="keyword">else</span> observer.onNext(data);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">          <span class="keyword">if</span>(data.length === <span class="number">0</span>) resolve(<span class="literal">undefined</span>)</div><div class="line">          <span class="keyword">else</span> observer.onNext(data);</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><br><br>이렇게 작성하였으나, 이렇게 작성할경우 execute() 함수는 제대로 실행이되나, transaction() 함수는 제대로 실행되지않았다. 이유는 즉슨 transaction()함수에서<br><br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">transaction</span>(<span class="params">resources</span>)</span>&#123;</div><div class="line">  ...</div><div class="line">  return Rx.Observable.of(resources)</div><div class="line">    .mergeMap(<span class="function"><span class="params">q</span> =&gt;</span> Rx.Observable.forkJoin(q.map(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> doQuery(connection,r);</div><div class="line">    &#125;)))</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><br><br>Promise.all() 과 같은 역활을 하는 Rx.Obervable.forkjoin() 인자값으로는 스트림(stream)들의 위치하게된다.<br>Promise.all 또는 Promise.map 와 Rx.Observable.forkjoin()의 다른점은, Rx.Observable.forkjoin()의 인자값에는 Rx.Observable.of(‘data1’),Rx.Observable.of(‘data2’) … 와같은 순수 스트림 데이터들이 위치하게되는 반면, Promise.all() 또는 Promise.map() 은 인자값으로 [ Promise.resolve(‘data1’), Promise.resolve(‘data2’) ] 와같이 Promise들이 위치되는것은 같으나, 좀더 나아가 각 Promise들 마다 로직을 수행할수있다는 점이다.<br>아래의 코드를 보면 이해가될것이다.<br><br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Promise.all</span></div><div class="line"><span class="built_in">Promise</span>.all(</div><div class="line">  [</div><div class="line">    <span class="built_in">Promise</span>.resolve(<span class="string">'fakeData1'</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="string">'realData1'</span>),</div><div class="line">    <span class="built_in">Promise</span>.resolve(<span class="string">'fakeData2'</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="string">'realData2'</span>),</div><div class="line">  ])</div><div class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Promise result =&gt; '</span> + result);</div><div class="line">  &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">    next(<span class="keyword">new</span> <span class="built_in">Error</span>(err));</div><div class="line">  &#125;)</div><div class="line"></div><div class="line"><span class="comment">// Promise style을 rx style로 변경.</span></div><div class="line"><span class="comment">// Promise style처럼 forkJoin()에서는 각각의 스트림에 세부적인 로직을 정의할수없음 .</span></div><div class="line"><span class="comment">// 에러뜸</span></div><div class="line">Rx.Observable.forkJoin(</div><div class="line">  Rx.Observable.of(<span class="string">'fakeData1'</span>).subscibe(<span class="function"><span class="params">data</span> =&gt;</span> <span class="string">'realData1'</span>),</div><div class="line">  Rx.Observable.of(<span class="string">'fakeData2'</span>).subscibe(<span class="function"><span class="params">data</span> =&gt;</span> <span class="string">'realData2'</span>)</div><div class="line">)</div><div class="line">.subscribe(</div><div class="line">  <span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result),</div><div class="line">  err =&gt; <span class="built_in">console</span>.log(err)</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// Rx.Observable.forkJoin() 이렇게 사용해야함.</span></div><div class="line">Rx.Observable.forkJoin(</div><div class="line">  Rx.Observable.of(<span class="string">'realData1'</span>),</div><div class="line">  Rx.Observable.of(<span class="string">'realData2'</span>)</div><div class="line">)</div><div class="line">.subscribe(</div><div class="line">  <span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'rx result =&gt; '</span> + result),</div><div class="line">  err =&gt; <span class="built_in">console</span>.log(err)</div><div class="line">);</div></pre></td></tr></table></figure></p><p><br><br>예제에서 보시다시피 Rx.Observable.forkJoin() 함수는 인자값내에선 적당한 로직이있는 Rx.Observable을 사용할수없으며 로직수행후 처리할 로직이있다면, 로직수행후 callback(onNext()) 내부에서 또다른 Rx.Observable을 구현해야할것이다 .( callback hell 이 생각나지 왜 ..)<br><a href="https://www.learnrxjs.io/operators/combination/forkjoin.html" target="_blank" rel="noopener">rxjs forkjoin()</a> 의 sample 코드도 promise를 사용하는것을 확인할수있다.<br>그래서 필자는 실제 쿼리를 수행하는 doQuery()를 Promise로 기존의 코드를 그대로 두고, execute() 함수에서 doQuery()함수 호출시 Promise를 Rx.Observable 로 변환해주는 Rx.Observable.fromPromise() 함수를 사용하였다.<br><br><br></p><h2 id="견해"><a href="#견해" class="headerlink" title="견해"></a>견해</h2><p>이렇게 기존에 Promise로 작성된 queryHelper모듈을 rx style로 변경을 해보았다.<br>필자도 rx를 언젠간 써봐야지 하고 미뤄두다가 써보니 좋은점도 있고 그렇지않은점도 있는것 같다.<br>다음은 극단적인예로, 로직을 처리하기위해 사전에 먼저 수행되어야할 로직이있다면 callback을 받아 새로운 로직을 구성하는 Promise와 rx로 작성해보았다. (의존관계의 로직처리)<br><br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Promise version</span></div><div class="line"><span class="built_in">Promise</span>.resolve(&#123;<span class="string">'key1'</span>:<span class="string">'value1'</span>&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</div><div class="line">  data.key1 = <span class="string">'newValue1'</span>;      <span class="comment">//데이터가공</span></div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="built_in">Object</span>.assign(data,&#123;<span class="string">'key2'</span>:<span class="string">'value2'</span>&#125;))     <span class="comment">//가공된 데이터가 새로운 Promise에 필요</span></div><div class="line">&#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</div><div class="line">  data.key2 = <span class="string">'newValue1'</span>;      <span class="comment">//데이터가공</span></div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="built_in">Object</span>.assign(data,&#123;<span class="string">'key3'</span>:<span class="string">'value3'</span>&#125;))     <span class="comment">//가공된 데이터가 새로운 Promise에 필요</span></div><div class="line">&#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(data);</div><div class="line">&#125;)</div><div class="line">.catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">  next(<span class="keyword">new</span> <span class="built_in">Error</span>(err));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// rx version</span></div><div class="line">Rx.Observable.of(&#123;<span class="string">'key1'</span>:<span class="string">'value1'</span>&#125;).subscribe(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">  data.key1 = <span class="string">'newValue1'</span>;      <span class="comment">//데이터가공</span></div><div class="line">  Rx.Observable.of(<span class="built_in">Object</span>.assign(data,&#123;<span class="string">'key2'</span>:<span class="string">'value2'</span>&#125;)).subscribe(<span class="function"><span class="params">data</span> =&gt;</span> &#123;     <span class="comment">//가공된 데이터가 새로운 Rx.Observable에 필요</span></div><div class="line">    data.key2 = <span class="string">'newValue2'</span>;    <span class="comment">//데이터가공</span></div><div class="line">    Rx.Observable.of(<span class="built_in">Object</span>.assign(data,&#123;<span class="string">'key3'</span>:<span class="string">'value3'</span>&#125;)).subscribe(<span class="function"><span class="params">data</span> =&gt;</span> &#123;   <span class="comment">//가공된 데이터가 새로운 Rx.Observable에 필요</span></div><div class="line">      <span class="built_in">console</span>.log(data);</div><div class="line">    &#125;,</div><div class="line">    err =&gt; <span class="keyword">new</span> <span class="built_in">Error</span>(err),</div><div class="line">    () =&gt; &#123;&#125;</div><div class="line">    )</div><div class="line">  &#125;,</div><div class="line">  err =&gt; <span class="keyword">new</span> <span class="built_in">Error</span>(err),</div><div class="line">  () =&gt; &#123;&#125;</div><div class="line">  )</div><div class="line">&#125;,</div><div class="line">err =&gt; <span class="keyword">new</span> <span class="built_in">Error</span>(err),</div><div class="line">() =&gt; &#123;&#125;</div><div class="line">);</div></pre></td></tr></table></figure></p><p><br><br>Promise는 chain 형식으로 문법을 사용할수있어 callback hell을 피할수있으며, 한눈에 보기에도 rx보다 가독성이 좋다<br>반면 rx 의 경우에는 불가피하게 중첩 callback이 생겨 Promise보다는 가독성이 떨어진다.<br>대신 rx 의 장점은 우선 제공되는 함수가 엄청나게 많아 제대로 사용하게되면 불필요한 로직을 대폭 줄일수있을 것 같고, 그에따른 학습의 진입장벽이 조금 있을것 같다.<br>필자는 <a href="https://www.learnrxjs.io/" target="_blank" rel="noopener">learn rxjs</a> 를 참고하였다.<br>간단하게나마 rx 를 사용해보았지만, 반응형 프로그래밍이 요즘 뜨고있으니 무작정 사용해야지(필자는 이런생각을 했다.) 라는 생각보다는 상황에 맞게 Promise와 rx를 적절하게 같이 사용하는것이 가장 좋은 방법이라 생각이든다.<br>rx에 대해서 의견이 있으시면 언제든지 댓글을 남겨주시면 저도 열심히 배우도록하겠습니다 ….</p>]]></content>
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>jenkins로 배포하기 - nodejs-2</title>
      <link href="/2017/04/23/jenkins/jenkins-3/"/>
      <content type="html"><![CDATA[<h2 id="jenkins로-nodejs-서버-배포하기-2"><a href="#jenkins로-nodejs-서버-배포하기-2" class="headerlink" title="jenkins로 nodejs 서버 배포하기 -  2"></a>jenkins로 nodejs 서버 배포하기 -  2</h2><p>이전 포스트 <a href="https://setyourmindpark.github.io/2017/04/22/jenkins/jenkins-2/">jenkins로 nodejs 서버 배포하기 -  1</a> 를 통해 nodejs 서버를 remote 서버로 쉘스크립트 EOF를 사용하여 remote 서버에서 git clone 하여 배포하는 법을 알아보았다.<br>이번 포스트에서는 두번째방법으로 첫번째 방법보다는 좀더 간단한 방법을 소개하려한다.<br><br><br></p><h2 id="쉘-스크립트-EOF-와-SCP"><a href="#쉘-스크립트-EOF-와-SCP" class="headerlink" title="쉘 스크립트 EOF 와 SCP"></a>쉘 스크립트 EOF 와 SCP</h2><p>기본적으로 쉘스크립트 EOF를 사용하여 jenkins가 remote 서버에서 control하는 기본 개념은 같다.<br>이후 첫번째방법에서는 jenkins가 remote 서버 접속후 프로젝트를 다시 clone 하여 job을 수행하는 방법이었으며, 이번에 소개해드릴방법은 jenkins가 test를 수행한 프로젝트 자체를 scp 명령어를 사용해서 remote 서버로 프로젝트를 전송하는 방법이다 .<br>jenkins [ Managed script file ] 플러그인을 다음과 같이 설정하였다.<br>jenkins관리 -&gt; Managed files -&gt; Add a new Config -&gt; Managed script file<br><img src="/2017/04/23/jenkins/jenkins-3/jenkins-3_2.png" alt="jenkins-3_2"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">npm install</div><div class="line">npm test</div><div class="line">rm -rf node_modules</div><div class="line"></div><div class="line">-#!/bin/sh</div><div class="line">ssh root@remote서버ip &lt;&lt;EOF</div><div class="line"> pm2 delete apiServer</div><div class="line"> rm -rf /root/nodejs-skeletone-v2</div><div class="line"> exit</div><div class="line">EOF</div><div class="line"></div><div class="line">scp -r ../nodejs-skeletone-v2 root@remote서버ip:/root</div><div class="line"></div><div class="line">-#!/bin/sh</div><div class="line">ssh root@remote서버ip &lt;&lt;EOF</div><div class="line"> cd /root/nodejs-skeletone-v2</div><div class="line"> npm install --production</div><div class="line"> pm2 start bin/www.js --name apiServer</div><div class="line"> exit</div><div class="line">EOF</div></pre></td></tr></table></figure></p><ol><li>git push event hook을 받은 jenkins가 test를 수행할것이므로 패키지를 설치한다</li><li>mocha test framework 를 사용하여 프로젝트 test를 진행한다.</li><li>scp 로 remote 서버로 프로젝트를 전송할 준비작업으로, test를 마친 jenkins가 프로젝트 패키지를 모두 삭제한다. (remote 서버에서는 서비스에 필요한 패키지만 필요하므로)</li><li>EOF 를 사용하여 remote 서버로 접속후 이미 실행되고있는 nodejs 서버를 중지 한다 .</li><li>서비스되고있는 프로젝트를 삭제한다</li><li>jenkins에서 방금 test를 수행한 프로젝트를 remote 서버로 프로젝트 전송을 시작한다.</li><li>EOF로 remote 서버로 재접속 한후, 서비스에 필요한 패키지만 받는다(–production)</li><li>pm2를 사용하여 서비스를 시작한다.</li></ol><p>Managed script file 작성이 끝나면 마지막으로 jenkins에 설정정보를 추가한다.<br>[ Build - managed script]<br><img src="/2017/04/23/jenkins/jenkins-3/jenkins-3_1.png" alt="jenkins-3_1"><br><br><br></p><h2 id="왜-SCP를-사용하는가"><a href="#왜-SCP를-사용하는가" class="headerlink" title="왜 SCP를 사용하는가"></a>왜 SCP를 사용하는가</h2><p><a href="https://setyourmindpark.github.io/2017/04/22/jenkins/jenkins-2/">jenkins로 nodejs 서버 배포하기 -  1</a> 포스트에서는 쉘스크립트 EOF를 사용하여 remote 서버에 jenkins가 접속하여 git clone명령어를 수행하고 프로젝트 서비스하는 방법이었다.<br>그렇다면 결론적으로 remote 서버에서는 git clone 명령어로 프로젝트를 받든, jenkins가 scp를 사용하여 프로젝트를 보내주든, 결국 서비스할 프로젝트는 동일하다 .<br>하지만 필자가 생각하기엔 첫번째 방법에서는 시간차로인한 문제점이 있었다. 다음과 같은 시나리오를 생각해보자.</p><ol><li>개발자가 git push를 수행하여 jenkins가 git push event hook을 받았다.</li><li>jenkins가 test 를 수행한다.</li><li>jenkins가 test를 수행하는도중 또 다른 개발자가 git push 를 수행하였다.</li><li>test를 마친 jenkins가 remote 서버에 접속한다.</li><li>jenkins에서 test 를 거치지않은 방금 또다른 개발자가 push 한 git project를 clone한다.</li><li>결론적으로 jenkins에서 수행한 test는 수행할 필요가 없어지게되었다.(시간차로 인한 프로젝트 불일치)</li></ol><p>물론 또다른 개발자가 push 한 프로젝트는 jenkins에서 push event hook을 받아 배포를 또다시 수행할테지만, 짧은 시간이나마 remote 서버에 배포된 프로젝트가 오류가 있었다면 서버가 죽게될것이다.(test 과정을 거치지않았기때문)<br>이러한 이유로 필자는 scp를 사용하여 프로젝트를 전송하는 방법을 생각하였다. scp를 사용하면 jenkins에서 test를 수행한 프로젝트를 remote 서버에 프로젝트를 보내기때문에 프로젝트 일관성이 보장되어 위와같은 시나리오는 막을수있다.<br><br><br></p><h2 id="또다른-이점"><a href="#또다른-이점" class="headerlink" title="또다른 이점"></a>또다른 이점</h2><p><a href="https://setyourmindpark.github.io/2017/04/22/jenkins/jenkins-2/">jenkins로 nodejs 서버 배포하기 -  1</a> 에서는 remote 서버에서 git clone을 받기에 github에 remote 서버 rsa public key를 등록하였다. 하지만 jenkins에서 scp를 사용하여 프로젝트를 전송하면 이런 과정이 필요없어지게되어 remote 서버에서 rsa 키를 생성할 필요도 없어지게되었고 github에 remote 서버 public key를 등록할 필요도 없어지게되었다.<br><br><br></p><h2 id="견해"><a href="#견해" class="headerlink" title="견해"></a>견해</h2><p><a href="https://setyourmindpark.github.io/2017/04/22/jenkins/jenkins-2/">jenkins로 nodejs 서버 배포하기 -  1</a> 와 같이 jenkins가 test 를 수행후 remote 서버에 배포를하는 결과는 동일하다.<br>첫번째방법 remote 서버에서 git clone하여 수행하는 방법은 여러개발자로 인해 빈번하게 push event가 일어나면 위에서 언급한 시간차로인한 프로젝트 불일치 현상이 생길수있는 문제점이므로, 정해진시간(주로 새벽에)에 jenkins가 remote 서버로 배포를 수행한다면 문제가되지않을것이다.(Poll SCM schedule)<br>이렇게 nodejs 서버를 remote 서버로 배포하는 2가지 방법에대해서 알아보았다.<br>또 다른 방법이 분명 있을것이고, 좀더 좋은 방법을 새롭게 알게된다면 새롭게 포스트를 올리도록 하겠다.</p>]]></content>
      
      <categories>
          
          <category> jenkins </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>jenkins로 배포하기 - nodejs-1</title>
      <link href="/2017/04/22/jenkins/jenkins-2/"/>
      <content type="html"><![CDATA[<h2 id="jenkins로-nodejs-서버-배포하기-1"><a href="#jenkins로-nodejs-서버-배포하기-1" class="headerlink" title="jenkins로 nodejs 서버 배포하기 - 1"></a>jenkins로 nodejs 서버 배포하기 - 1</h2><p>이전에 포스트한 <a href="https://setyourmindpark.github.io/2017/04/14/jenkins/jenkins-1/">jenkins로 배포하기 - java</a> 를 통해 java기반의 서버를 jenkins를 활용하여 remote 서버로 배포하는 법을 알아보았다.<br>이번에는 jenkins를 활용해서 nodejs 서버를 remote 서버로 어떻게 배포하는지 알아보자.<br><br><br></p><h2 id="무엇이다른가"><a href="#무엇이다른가" class="headerlink" title="무엇이다른가"></a>무엇이다른가</h2><p><a href="https://setyourmindpark.github.io/2017/04/14/jenkins/jenkins-1/">jenkins로 배포하기 - java</a> java 기반의 서버를 배포하는 방법을 살펴보면, git push hook event를 받아 jenkins가 maven build후 정의된 tomcat 인증정보로 war를 redeploy하는 방식이었다.<br>그럼 nodejs 기반의 서버는 tomcat과 같은 was가 존재하지않으므로 어떻게 remote 서버로 배포를할까 ?<br>필자는 nodejs기반의 서버를 jenkins를 활용하여 remote server에 ssh 접속후 job을 수행하는 방식을 사용하였다.<br>기본적인 remote 서버에 배포하는 일은 jenkins가 수행하므로 개념적으로는 다르지않으나, 어떻게 배포하는가에 대한 방법이 조금 다르며, 필자가 시도한 배포 방법에는 2가지가 있으므로 그중 첫번째 방법에대해서 글을 써보려 한다.<br><br><br></p><h2 id="쉘-스크립트-EOF-와-git-clone"><a href="#쉘-스크립트-EOF-와-git-clone" class="headerlink" title="쉘 스크립트 EOF 와 git clone"></a>쉘 스크립트 EOF 와 git clone</h2><p>jenkins 프로젝트 기본 설정은 앞서 포스트한 <a href="https://setyourmindpark.github.io/2017/04/14/jenkins/jenkins-1/">jenkins로 배포하기 - java</a> 와 다르지않으니 참고 하도록하며, [ Build ] 설정 부터 수행해야할 job 이 다르니 사전에 jenkins와 git 연동을 마친상태에서 추가적인 설정정보를 진행한다.</p><h3 id="사전준비"><a href="#사전준비" class="headerlink" title="사전준비"></a>사전준비</h3><p>jenkins rsa public key(id_rsa.pub)<br>remote server rsa private key(id_rsa) 와 publick key(id_rsa.pub)<br>jenkins Managed Script plugin</p><p>먼저 jenkins에서 remote 서버를 known_hosts 등록한다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keyscan -H remote서버ip &gt;&gt; ~/.ssh/known_hosts</div></pre></td></tr></table></figure></p><p>다음으로 remote 서버에 접속후 rsa 키를 생성한다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cat ~/.ssh/id_rsa</div><div class="line">$ cat ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure><p>private key(id_rsa)와 public key(id_rsa.pub) 키가 생성되었을것이다.<br>remote 서버도 jenkins 로부터 git clone 명령어를 입력받을 예정이기에, github에 public key를 등록한다.<br><img src="/2017/04/22/jenkins/jenkins-2/jenkins-2_1.png" alt="jenkins-2_1"><br>github -&gt; Settings -&gt; SSH and GPG Keys<br>rsa_id.pub 값 등록후 Add SSH Key<br>jenkins에서 현재접속중인 remote 서버에 인증된 client로 접속할것이기에 jenkins container에 사전에 생성된 public key(id_rsa.pub) 키를 remote 서버에 등록한다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi ~/.ssh/authorized_keys</div></pre></td></tr></table></figure></p><p>jenkins 컨테이너에서 생성된 public key(id_rsa.pub) 내용를 입력한다.<br>다음으로 github을 known_hosts로 등록을 진행한다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keyscan -H github.com &gt;&gt; ~/.ssh/known_hosts</div></pre></td></tr></table></figure></p><p>jenkins에서 이러한 설정을 바탕으로 쉘스크립트 EOF로 remote 서버를 control 할것이기때문에 Managed Script plugin을 설치한다<br>jenkins관리 -&gt; 플러그인관리<br><img src="/2017/04/22/jenkins/jenkins-2/jenkins-2_3.png" alt="jenkins-2_3"><br>[ Managed Script plugin ]<br>jenkins관리 -&gt; Managed files -&gt; Add a new Config -&gt; Managed script file<br><img src="/2017/04/22/jenkins/jenkins-2/jenkins-2_4.png" alt="jenkins-2_4"><br><img src="/2017/04/22/jenkins/jenkins-2/jenkins-2_5.png" alt="jenkins-2_5"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">-#!/bin/sh</div><div class="line">ssh root@remote서버ip &lt;&lt;EOF</div><div class="line"> pm2 delete apiServer</div><div class="line"> cd /root</div><div class="line"> rm -rf nodejs-skeletone-v2</div><div class="line"> git clone git@github.com:setyourmindpark/nodejs-skeletone-v2.git</div><div class="line"> cd nodejs-skeletone-v2</div><div class="line"> npm install --production</div><div class="line"> pm2 start bin/www.js --name apiServer</div><div class="line"> exit</div><div class="line">EOF</div></pre></td></tr></table></figure></p><ol><li>jenkins가 remote 서버 접속후 기존에 돌고있는 nodejs 서버를 종료한다.(필자는 pm2 를 사용한다)</li><li>/root 경로이동</li><li>기존의 서비스중인 nodejs 서버를 삭제한다</li><li>git clone을 다시받는다.</li><li>clone받은 디렉토리로 이동한다</li><li>remote 서버는 jenkins에서 진행한 test를 다시 진행할 필요가없으므로 –production 옵션으로 node 패키지를 설치한다</li><li>nodejs 서버를 시작한다 .</li></ol><p>이제 마지막으로 jenkins 설정을한다. 필자는 다음과같이 설정하였다.<br>git push event hook을 받은 jenkins는 node 패키지 모듈을 설치한후.<br>이전포스트 <a href="https://setyourmindpark.github.io/2017/04/19/nodejs/nodejs/">mocha supertest should</a> 테스트를 진행할것이므로 Execute shell에 정의하고 Execute managed script에는 방금 Managed script 에 등록된 쉘 스크립트를 선택하였다.<br>[ Build ]<br><img src="/2017/04/22/jenkins/jenkins-2/jenkins-2_6.png" alt="jenkins-2_6"><br>이렇게 모든 설정이 끝이났다. 이제 배포를 시작해보자.<br><br><br></p><h3 id="추가설명"><a href="#추가설명" class="headerlink" title="추가설명"></a>추가설명</h3><p>jenkins의 rsa public key를 remote서버의 authorized_keys에 추가하는 과정은, 일반적으로 ssh 접속시 접속 서버의 계정 비밀번호를 반드시 입력해야 하며 root 계정으로 접속시에는 추가적으로 root계정 ssh 접속을 위한 설정이 필요하다.<br>하지만 방금진행한 rsa 암호화 통신은 rsa private key와 public key를 통해 인증된 ssh client를 등록하는 과정이기에 비밀번호를 입력할 필요가없어지게된다.</p><p>다음으로 jenkins에서는 remote서버를, remote서버에서는 github을 known_hosts에 등록하는 과정은, ssh 를기반으로하는 최초 git clone이나, ssh 접속시 접속하는 호스트에대한 기록이 없으므로 접속여부에대한 메시지가 발생한다.<br>만약 사전에 known_hosts에 등록하지않을시에는<br><img src="/2017/04/22/jenkins/jenkins-2/jenkins-2_2.png" alt="jenkins-2_2"><br>다음과 같은 메시지를 보게될것이다. jenkins가 배포를 수행하는도중 이런 메시지를 보게된다면 곤란하므로, 사전에 등록해주는 과정이다.<br><br><br></p><h2 id="배포"><a href="#배포" class="headerlink" title="배포"></a>배포</h2><p>git commit 그리고 push<br>jenkins 가 다음과같이 수행한다<br><img src="/2017/04/22/jenkins/jenkins-2/jenkins-2_7.png" alt="jenkins-2_7"><br>npm test 수행<br><br><br><img src="/2017/04/22/jenkins/jenkins-2/jenkins-2_8.png" alt="jenkins-2_8"><br>pm2 delete apiServer<br>git clone<br>npm install –production<br><br><br><img src="/2017/04/22/jenkins/jenkins-2/jenkins-2_9.png" alt="jenkins-2_9"><br>pm2 start bin/www.js –name apiServer<br><br><br><img src="/2017/04/22/jenkins/jenkins-2/jenkins-2_10.png" alt="jenkins-2_10"><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p>필자는 jenkins에서 mocha framework를 사용해 npm test 를 진행하였다.<br>nodejs 서버를 배포하는 서버도 docker container로 구성이되어있고, 배포서버의 db 접속정보는 시스템 환경변수를 참조하여 정보를 get 하도록 설정하였다.<br>하지만 jenkins는 배포서버가 서비스하기위해 사용하는 db 접속정보를 알지못하므로, npm test 를수행할수없게된다.<br>필자는 그래서 jenkins container에 배포서버가 접속하는 db 접속정보의 환경변수를 공유하도록하였다.<br>docker-compose.yml의 설정은 다음과같다<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">jenkins:</div><div class="line">  image: jenkins</div><div class="line">  ports:</div><div class="line">    - &quot;89:8080&quot;</div><div class="line">  environment:</div><div class="line">    - TZ=Asia/Seoul</div><div class="line">  env_file:</div><div class="line">    - ./server-node/env/db.env</div><div class="line">  volumes:</div><div class="line">    - /home/jaehunpark/docker/service/jenkins/jenkins-data:/root</div><div class="line">  container_name: jenkins</div><div class="line">server-node:</div><div class="line">  image: server-node</div><div class="line">  ports:</div><div class="line">    - &quot;443:4000&quot;</div><div class="line">  environment:</div><div class="line">    - TZ=Asia/Seoul</div><div class="line">  env_file:</div><div class="line">    - ./server-node/env/db.env</div><div class="line">    - ./server-node/env/service.env</div><div class="line">  volumes:</div><div class="line">    - /home/jaehunpark/docker/service/server-node/server-node-data:/root</div><div class="line">  tty: true</div><div class="line">  depends_on:</div><div class="line">    - mariadb</div><div class="line">  container_name: server-node</div></pre></td></tr></table></figure></p><p>server-node의 service가 env_file을 두가지 참조한다.<br>한가지는 db에대한 환경변수들이 정의되어있는 파일이고 db.env,<br>다른한가지는 서비스에 수행될 환경변수들이있는 파일이다 service.env .<br>따라서 jenkins에서 npm test를 정상적으로 수행하기위해 server-node 의 db접속정보를 참조하는것을 볼수있다.<br>jenkins를 통해 배포할 프로젝트가 다수이고, 각각의 프로젝트에서 수행할 test가 있을시 다음과같이 프로젝트가 사용하는 db 접속정보를 따로빼어서 jenkins env_file에 하나씩 추가해주면 된다 .<br><br><br></p><h2 id="견해"><a href="#견해" class="headerlink" title="견해"></a>견해</h2><p>nodejs 서버를 jenkins를 통해 배포하는 첫번째방법에대해서 알아보았다.<br>설정자체가 java 기반보다는 손이 많이가는 편이가 가끔 헷갈리기도하지만, 정리하면서 기록으로 남길수있어 이렇게 글로 남겨본다.<br>아직 배워야할것도 많고, 모르는것도 아주 많은 개발자지만 하나하나 배우다보면 언젠가 정상에 오를것이라 믿고있다.<br>이글을 보고 조금이라도 도움이되었으면 좋겠다.<br>다음에는 jenkins를 사용해 nodejs서버를 배포하는 다른방법을 알아보자 .</p>]]></content>
      
      <categories>
          
          <category> jenkins </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mocha supertest should</title>
      <link href="/2017/04/19/nodejs/nodejs-1/"/>
      <content type="html"><![CDATA[<h2 id="mocha"><a href="#mocha" class="headerlink" title="mocha"></a>mocha</h2><p>필자가 현재회사에서 하는일은 java 기반의 SI 업무를 담당하고있다.<br>SI 업무를 담당하니 test라는 개념은 별도의 test case를 따로 작성하는것이아니라,<br>요구사항 개발을 진행후 제대로 잘동작하는지에대한 행위를 하고 땡 하는 식이다.<br>mock을 이용한 test case 작성이나, junit을 사용한 test case를 작성하는것은 누군가 강제로 시켜서 하지않는이상, 주도적으로 스스로 하지않을것이다. 요구사항을 빠르게 반영해야하므로 test case 작성은 시간낭비일뿐이니까.<br>필자는 node기반의 서버에도 관심이 많다. nodejs를 활용하여 java의 junit, mock 과 같은 역활을 수행하는 mocha에 대해서 적어보려고한다.<br><br><br></p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><p>test framework mocha는 npm을 통해 아주 쉽게 설치할수있다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install mocha -g</div></pre></td></tr></table></figure></p><p>-g 옵션을 붙이게되면 개발 머신에 global로 설치를 한다.<br>필자는 global 설치보다는 해당 프로젝트내에서 필요할때 mocha를 사용할것이기에<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install mocha --save-dev</div></pre></td></tr></table></figure></p><p>프로젝트내의 devDependencies를 추가하였다.</p><p>mocha와 흔히들 같이사용하는 패키지로는 api 검증의 supertest와<br>api 호출에대한 response 검증을 수행하는 should를 사용하는것이 일반적인것 같다.<br>따라서 필자도해당 패키지들을 mocha와 함께 사용하였다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install supertest --save-dev</div><div class="line">$ npm install should --save-dev</div></pre></td></tr></table></figure></p><p>모든 패키지를 설치하였다면 package.json은 다음과같을것이다<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">"devDependencies"</span>: &#123;</div><div class="line">  <span class="string">"mocha"</span>: <span class="string">"^3.1.2"</span>,</div><div class="line">  <span class="string">"should"</span>: <span class="string">"^11.1.1"</span>,</div><div class="line">  <span class="string">"supertest"</span>: <span class="string">"^2.0.1"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>이제 테스트를위한 준비는 끝이났다.<br><br><br></p><h2 id="어떻게-사용하는가"><a href="#어떻게-사용하는가" class="headerlink" title="어떻게 사용하는가"></a>어떻게 사용하는가</h2><p>전체적인 test구조는 mocha, 각 test case의 api 호출은 supertest가,<br>그리고 api response에대한 검증은 should가 담당한다.<br><a href="https://mochajs.org/" target="_blank" rel="noopener">mocha docs</a> 의 test case에 대한 pre,post 제공되는 함수는 다음과 같다<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'hooks'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  before(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// runs before all tests in this block</span></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// runs after all tests in this block</span></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// runs before each test in this block</span></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  afterEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// runs after each test in this block</span></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// test cases</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>간단하게 살펴보면</p><ul><li>before() 모든 테스트들이 수행되기전 단 한번만 실행된다</li><li>after() 모든 테스트들이 수행된후 단 한번만 실행된다</li><li>beforeEach() 각 테스트들이 수행되기전 실행된다</li><li>afterEach() 각 테스트들이 수행된후 실행된다</li></ul><p>필자는 mocha를 다음과 같이 사용하였다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//테스트들이 수행되기전 db 연결상태를 체크한다</span></div><div class="line">  before(<span class="function"><span class="params">done</span> =&gt;</span> &#123;</div><div class="line">      queryHelper.execute(&#123;<span class="attr">query</span>:<span class="string">'SELECT NOW() AS now FROM DUAL'</span>, <span class="attr">expect</span> : <span class="string">'single'</span>&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(result.now);</div><div class="line">        done()</div><div class="line">      &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">throw</span> err;</div><div class="line">      &#125;)</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">  describe(<span class="string">'SAMPLE_V2'</span>, () =&gt; &#123;    </div><div class="line">    <span class="comment">//test case를 작성한다.</span></div><div class="line">    describe(<span class="string">'GET /api/smpl/v2/select1/param1'</span>, () =&gt; &#123;</div><div class="line">      it(<span class="string">'should return sample api'</span>, done =&gt; &#123;</div><div class="line">        request(app)</div><div class="line">          .get(<span class="string">'/api/smpl/v2/select1/value1'</span>)</div><div class="line">          .set(<span class="string">'token'</span>, token)      <span class="comment">// header setting</span></div><div class="line">          .expect(<span class="number">200</span>)</div><div class="line">          .expect(<span class="string">"Content-Type"</span>, /json/)</div><div class="line">          .end(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</div><div class="line">              res.body.should.be.instanceOf(<span class="built_in">Object</span>).and.have.property(<span class="string">'isSuccess'</span>).be.equal(<span class="literal">true</span>);</div><div class="line">              res.body.should.be.instanceOf(<span class="built_in">Object</span>).and.have.property(<span class="string">'data'</span>);</div><div class="line">              done();</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>test case를 수행하기전 연결된 db 상태를 체크한후, test case를 진행하고있다.<br>request(supertest) 를 통하여 api 수행과 응답에 대한 정의와 예상되는 response status와 어떤 data를 request 할지를 정의한다.<br>필자는 token 이라는 이름으로 jwt token을 header에 실어서보내며,<br>post와 같은 body 값은 send({param1 : valu1 ..}) 와 같이 사용할수있다.<br>response에대한 응답으로는 should를 사용하여 response 값들을 검증한다.<br>어떤 property가 있는지, 해당 propery의 값은 무엇인지에대한 검증을 수행한다.<br>이제 작성된 test case를 어떻게 실행하는지 알아보자<br>프로젝트 package.json 상단의 scripts에 test를 정의한다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">  <span class="string">"start"</span>: <span class="string">"node ./bin/www"</span>,</div><div class="line">  <span class="string">"test"</span>: <span class="string">"node_modules/.bin/mocha app/api/**/*.spec.js"</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure></p><p>프로젝트내에서 mocha를 실행할것이기에, npm 으로 부터 설치된 mocha 실행 경로를 정의후 경로를 설정한다<br>필자는 app/api/ 경로 내의 모든 spec.js 확장자를 mocha를 이용한 test를 수행할것이므로, 다음과 같이 정의하였다.<br>다음으로 test를 수행한다<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm test</div></pre></td></tr></table></figure></p><p><img src="/2017/04/19/nodejs/nodejs-1/nodejs_1.png" alt="nodejs_1"><br>mocha를 기반으로 supertest와 should를 사용하여 test case를 작성해보았다.<br>필자가 사용해본느낌으로는, error를 뱉을시 error가 왜 발생하였는지에대한 상세한 메시지는 console에 보여주지않는다는점이다.<br>고의로 에러를 발생해보았다.<br><img src="/2017/04/19/nodejs/nodejs-1/nodejs_2.png" alt="nodejs_2"><br>예상되는 수행 결과값에만 근거하여 error를 표출한다.<br>test case를 수행하다 에러가 왜 발생했는지에 대한 메시지를 뿌려주면 좋을것 같은 생각이든다.<br><br><br></p><h2 id="견해"><a href="#견해" class="headerlink" title="견해"></a>견해</h2><p>많이들 test에대한 방법론으로 TDD와 BDD에 대해서 이야기들한다.<br>필자는 내공이 부족하여 정확하게 알지는 못하지만 구글링을 통해 얻게된 정보로는 TDD는 테스트주도 개발방법이고, BDD는 스토리 또는 시나리오기반 테스트 개발방법이라는 글들을 보았다.<br>현재 이글에서 제공하는 방법은 sample api에 대한 테스트를 진행하였으므로 딱히 개발요구사항에대한 스토리는 없으므로 TDD가 적합한듯 하다.<br>하지만 실제 개발시에는 프로세스 스토리와 시나리오 정의후 test case를 작성하여 BDD 개발 방법론을 따르는것이 좋을것 같다.<br>해당 api가 왜 존재해야하는지는 스토리 또는 시나리오를 보며 이해를 높일수있을것 같아서다.<br>쓰지않는 api를 개발을 하진않겠지만 존재하는 이유에 대해서는 BDD를 개발방법을통해 명확히 이해할수있을것 같다.<br>마지막으로 가장 좋은점은 test case를 작성하게되니 따로 api document를 작성하지 않아도되는 느낌이 들기도한다. (물론 작성하면 더욱더 좋겠죠)<br>test case에 정의된 api를 호출과 예상결과값만봐도 해당 api가 대충은 어떤역활을 수행하는 api인지 보여주기도한다.<br>필자는 test case에 익숙하지않지만 분명 좋은 개발 방법론임에는 틀림없는것 같다 .</p><h2 id="TDD와-BDD"><a href="#TDD와-BDD" class="headerlink" title="TDD와 BDD"></a>TDD와 BDD</h2><p><a href="http://hnsnmn.blogspot.kr/2014/02/tdd-bdd.html" target="_blank" rel="noopener">http://hnsnmn.blogspot.kr/2014/02/tdd-bdd.html</a><br><a href="http://asfirstalways.tistory.com/296" target="_blank" rel="noopener">http://asfirstalways.tistory.com/296</a><br><a href="http://blog.aliencube.org/ko/2014/04/02/differences-between-bdd-and-tdd/" target="_blank" rel="noopener">http://blog.aliencube.org/ko/2014/04/02/differences-between-bdd-and-tdd/</a></p>]]></content>
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>docker hub</title>
      <link href="/2017/04/16/docker/docker-3/"/>
      <content type="html"><![CDATA[<h2 id="docker-hub"><a href="#docker-hub" class="headerlink" title="docker hub"></a>docker hub</h2><p>필자는 요즘 docker 에 빠져있다.<br>docker hub에 굉장히 많은 images들을 보면서 신기하기도하고, 직접 모든것을 구현하기보다는 오픈소스를 적극활용하여 개발이 이루어지는 시대가 정착된것 같기도하다.<br>모든 사람의 성격이 다른것처럼. 개개인의 개발자의 성향이 다르지만, 필자의 성격은 다른 개발자가 구현해놓은 것을 가져다 쓰기보다는 직접 구현을 해야 적성이 풀리는 그런 성격을 지녔다.( 고쳐야되는데 ..  그냥 아무생각없이 가져다쓰면 속편할텐데 …)<!-- 그래서 스트레스가 남들보다 심한편이고, 시간도 오래걸리는 편이다.  --><br>그래서 docker hub에 이미지를 올려보았다.<br><br><br></p><h2 id="command-중복"><a href="#command-중복" class="headerlink" title="command 중복"></a>command 중복</h2><p>이전 포스트에서 <a href="https://setyourmindpark.github.io/2017/04/07/docker/docker-1/#이미지-환경패키징">jenkins Dockefile</a> 을 보자.<br>상단부터 system 언어셋 설정부터, jdk , 그리고 하단의 maven 과 같은 설치를 진행하는 command를 볼수있다.<br>docker를 사용하는데에 있어서 jenkins 만 사용하면 사실 아무런 문제가되지않는다. 그냥 원하는대로 시스템에 설치할 command를 기술하면되니까.<br>그러나 서비스를 하는데에있어서 분명 jenkins 만 존재하지않을것이다. jenkins가 배포를 하기위한 java server가 있을것이고, nodejs를 빌드할테면 node server가 별도로 존재해야할것이다. 그밖에도 필요한 이미지가 다수 존재할수있을것이다.<br>다시말해서 java server를 도커를 통해 만들게된다면, jenkins Dockerfile에 기술된 command를 일부 또는 버전만 바뀐 채 다시 기술해야할것이다.<br><br><br></p><h2 id="이미지-분리"><a href="#이미지-분리" class="headerlink" title="이미지 분리"></a>이미지 분리</h2><p>필자는 가장 기본 os를 debian jessie 버전을 기본적인 os를 사용한다.<br>docker를 처음 접하였을땐 ubuntu를 사용하였지만, 이상하게 docker hub에서 debian 계열의 이미지가 많아 찾아보니, ubuntu 보다 가볍고, ubuntu와 같은 계열이기에 debian을 많이 사용한다고한다.<br>기본os를 base 이미지를 사용하여 시스템 언어셋 설정이 utf8인 docker image를 만들었다<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> debian:jessie</div><div class="line"><span class="keyword">MAINTAINER</span> jaehunpark <span class="string">"setyourmindpark@gmail.com"</span></div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; DEBIAN_FRONTEND=noninteractive apt-get install -y locales &amp;&amp; \</span></div><div class="line">    sed -i <span class="_">-e</span> <span class="string">'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'</span> /etc/locale.gen &amp;&amp; \</div><div class="line">    <span class="built_in">echo</span> <span class="string">'LANG="en_US.UTF-8"'</span>&gt;/etc/default/locale &amp;&amp; \</div><div class="line">    dpkg-reconfigure --frontend=noninteractive locales &amp;&amp; \</div><div class="line">    update-locale LANG=en_US.UTF-8</div><div class="line"></div><div class="line"><span class="keyword">ENV</span> LANG en_US.UTF-<span class="number">8</span></div><div class="line"><span class="keyword">ENV</span> LANGUAGE en_US:en</div><div class="line"><span class="keyword">ENV</span> LC_ALL en_US.UTF-<span class="number">8</span></div><div class="line"></div><div class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/bin/bash"</span>]</span></div></pre></td></tr></table></figure></p><p><br><br>다음으로 이렇게만든 debian-utf8 이미지를 base로 만든 debian-oracle-jdk:8 이미지를 만들었다.<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> setyourmindpark/debian-utf8</div><div class="line"><span class="keyword">MAINTAINER</span> jaehunpark <span class="string">"setyourmindpark@gmail.com"</span></div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash"> \</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"===&gt; add webupd8 repository..."</span>  &amp;&amp; \</div><div class="line">    <span class="built_in">echo</span> <span class="string">"deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main"</span> | tee /etc/apt/sources.list.d/webupd8team-java.list  &amp;&amp; \</div><div class="line">    <span class="built_in">echo</span> <span class="string">"deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main"</span> | tee <span class="_">-a</span> /etc/apt/sources.list.d/webupd8team-java.list  &amp;&amp; \</div><div class="line">    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886  &amp;&amp; \</div><div class="line">    apt-get update</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"===&gt; install Java"</span>  &amp;&amp; \</span></div><div class="line">    <span class="built_in">echo</span> debconf shared/accepted-oracle-license-v1-1 select <span class="literal">true</span> | debconf-set-selections  &amp;&amp; \</div><div class="line">    <span class="built_in">echo</span> debconf shared/accepted-oracle-license-v1-1 seen <span class="literal">true</span> | debconf-set-selections  &amp;&amp; \</div><div class="line">    DEBIAN_FRONTEND=noninteractive  apt-get install -y --force-yes oracle-java8-installer oracle-java8-set-default</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"===&gt; clean up..."</span>  &amp;&amp; \</span></div><div class="line">    rm -rf /var/cache/oracle-jdk8-installer  &amp;&amp; \</div><div class="line">    apt-get clean  &amp;&amp; \</div><div class="line">    rm -rf /var/lib/apt/lists/*</div><div class="line"></div><div class="line"><span class="keyword">ENV</span> JAVA_HOME=/usr/lib/jvm/java-<span class="number">8</span>-oracle</div><div class="line"><span class="keyword">ENV</span> PATH=$&#123;PATH&#125;:$&#123;JAVA_HOME&#125;/bin</div><div class="line"></div><div class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/bin/bash"</span>]</span></div></pre></td></tr></table></figure></p><p>이렇게 필요한 부분만 분리하여 base 이미지로 참조하여 추가적으로 필요한 이미지를 지속적으로 만들면된다. 사실 다른 docker hub images들도 모두 이렇게 만들어져있다.<br><br><br>다음으로 다시한번 이렇게 생성된 debian-oracle-jdk:8 이미지를 base로 한 debian-maven:apple 이미지를 만들었다<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> setyourmindpark/debian-oracle-jdk:<span class="number">8</span></div><div class="line"><span class="keyword">MAINTAINER</span> jaehunpark <span class="string">"setyourmindpark@gmail.com"</span></div><div class="line"></div><div class="line"><span class="keyword">ENV</span> MAVEN_VERSION=<span class="number">3.5</span>.<span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash"> wget --quiet --no-cookies http://apache.tt.co.kr/maven/maven-3/<span class="variable">$&#123;MAVEN_VERSION&#125;</span>/binaries/apache-maven-<span class="variable">$&#123;MAVEN_VERSION&#125;</span>-bin.tar.gz -O /tmp/maven.tar.gz &amp;&amp; \</span></div><div class="line">    tar xzvf /tmp/maven.tar.gz -C /opt &amp;&amp; \</div><div class="line">    mv /opt/apache-maven-<span class="variable">$&#123;MAVEN_VERSION&#125;</span> /opt/maven &amp;&amp; \</div><div class="line">    rm /tmp/maven.tar.gz</div><div class="line"></div><div class="line"><span class="keyword">ENV</span> M3_HOME /opt/maven</div><div class="line"><span class="keyword">ENV</span> PATH=$&#123;PATH&#125;:$&#123;M3_HOME&#125;/bin</div><div class="line"></div><div class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/bin/bash"</span>]</span></div></pre></td></tr></table></figure></p><p>여기서 고민을 많이하였다. 버전명을 apple이라고 준것은, apple이란 버전은 jdk8 과 maven 3.5.0 버전을 사용하기에 버전명을 apple이라고 준것이다.<br>현재 apple 버전만 docker hub에 올라가있는 상태이며, jdk 와 maven의 서로다른 조합의 요구사항이 생길시 새로운 버전의 debian-maven:&lt;새로운버전명&gt; 이미지를 올리도록하겠다. ( 예를들어 jdk7 버전에 maven 3.5.0 버전의 조합일시 사전에 debian-oracle-jdk:7 이미지는 이미 생성되어있겠죠 .. )<br>필자가 docker hub에 올린 이미지들은<br><a href="https://hub.docker.com/search/?isAutomated=0&amp;isOfficial=0&amp;page=1&amp;pullCount=0&amp;q=setyourmindpark&amp;starCount=0" target="_blank" rel="noopener">docker hub setyourmindpark</a><br>에서 확인할수있다 …<br><br><br></p><h2 id="견해"><a href="#견해" class="headerlink" title="견해"></a>견해</h2><p>‘docker hub에 이미지를 올려야겠다’ 라고 생각하였을땐 jenkins와 node server, java server 와같은 이미지를 올려야겠다고 생각했다. 하지만 이런 이미지들 보다는, 각자가 세팅하고자하는 jdk, maven , node 의 버전이 모두가 다를것이니. 시스템 전역에서 설치되는 설치파일들의 조합을 docker hub를 통해 제공하면 좋을것같아 이미지를 올리게되었다. 이러한 이미지를 base로 하여 각자가 추가적으로 필요한 command를 기술하여 이미지를 생성하면 command들을 조금이나마 줄일수있을것이다.<br>필자가 제공하는 docker hub 이미지들외에 전세계 개발자들이 만들어놓은 이미지들이 무수히 많으니, base이미로 적극활용하는것이 개발 생산성 향상에 도움이될것이다 .</p>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>jenkins로 배포하기 - java</title>
      <link href="/2017/04/14/jenkins/jenkins-1/"/>
      <content type="html"><![CDATA[<h2 id="jenkins로-배포하기"><a href="#jenkins로-배포하기" class="headerlink" title="jenkins로 배포하기"></a>jenkins로 배포하기</h2><p><a href="https://setyourmindpark.github.io/2017/04/12/java/java/">maven으로 remote서버 배포하기</a> 를통해 로컬 개발머신에서 remote서버로 배포하는 법을 알아보았다.<br><a href="https://setyourmindpark.github.io/2017/04/09/jenkins/jenkins/">jenkins</a> 가 준비되었다면, jenkins를 통하여 remote서버로 어떻게 배포하는지 알아보자.<br><br><br></p><h2 id="플러그인설치"><a href="#플러그인설치" class="headerlink" title="플러그인설치"></a>플러그인설치</h2><p>필자는 빌드결과를 메일로 받고, remote 서버로 배포할것이기에 필요한 2개의 플러그인을 설치해보자.<br>먼저 플러그인을 설치하기전에, 메일발송을위한 smtp 서버와 계정이필요하다.<br>google 계정이있다면 아주손쉽게 해당계정을 smtp 서버에서 메일을 보내는 발신자계정으로 사용할수있다.<br><img src="/2017/04/14/jenkins/jenkins-1/jenkins-1_1.png" alt="jenkins-1_1"><br><a href="https://support.google.com/mail/answer/7126229?hl=ko&amp;visit_id=1-636183522503167845-3274504127&amp;rd=1#ts=1665018%2C1665144" target="_blank" rel="noopener">smtp 설정</a><br><img src="/2017/04/14/jenkins/jenkins-1/jenkins-1_2.png" alt="jenkins-1_2"><br><a href="https://myaccount.google.com/lesssecureapps?pli=1" target="_blank" rel="noopener">보안수준설정 해제</a><br><br><br>메일을 보내기위한 smtp 설정을 마쳤다면, 이제 jenkins에 플러그인을 설치해보자.<br>jenkins관리 -&gt; 플러그인관리<br><img src="/2017/04/14/jenkins/jenkins-1/jenkins-1_3.png" alt="jenkins-1_3"><br>[ Email Ext Recipients Column Plugin ]<br><br><br><img src="/2017/04/14/jenkins/jenkins-1/jenkins-1_4.png" alt="jenkins-1_4"><br>[ Deploy to container Plugin ]<br><br><br>플러그인을 모두 설치하였다면 jenkins에 메일발송 smtp 설정을 하자.<br>jenkins관리 -&gt; 시스템설정 -&gt; 메일로알려줌<br><img src="/2017/04/14/jenkins/jenkins-1/jenkins-1_5.png" alt="jenkins-1_5"><br><img src="/2017/04/14/jenkins/jenkins-1/jenkins-1_6.png" alt="jenkins-1_6"><br>설정정보를 작성후 [ Test configuration ]<br>테스트메일이 정상적으로 발송된것을 확인할수있다.<br><br><br></p><h2 id="git과-jenkins-연동"><a href="#git과-jenkins-연동" class="headerlink" title="git과 jenkins 연동"></a>git과 jenkins 연동</h2><p>jenkins가 git project를 clone 하기위해선 사전에 git과 인증을 마쳐야한다.<br>즉 jenkins가 필요시에는 언제든지 git project를 clone 할수있는 상태를 마쳐야한다.<br>jenkins와 github과의 인증정보를 설정한다.<br>jenkins는 docker container를 이용하여 서비스하고 있으므로, host os든, container os든 둘중하나의 공간에서 rsa 인증방식을 사용할것이기에 private key를 지녀야한다.<br>필자는 docker의 container 레벨에서 rsa key를 생성을 하였다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa</div></pre></td></tr></table></figure></p><p>생성뒤엔 github에 등록할 rsa public key를 확인한다<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure></p><p><img src="/2017/04/14/jenkins/jenkins-1/jenkins-1_7.png" alt="jenkins-1_7"><br>해당명령으로 rsa public key를 알아보았다. 이제 github에 등록해보자<br><img src="/2017/04/14/jenkins/jenkins-1/jenkins-1_8.png" alt="jenkins-1_8"><br>github -&gt; Settings -&gt; SSH and GPG Keys<br>rsa_id.pub 값 등록후 Add SSH Key</p><p>개발중인 프로젝트에서 push 이벤트가 발생하면, jenkins에게도 event를 위임(delegate)하기위해 github의 추가설정을 진행한다.<br>github -&gt; 프로젝트 -&gt; Settings -&gt; Integration &amp; Service<br><img src="/2017/04/14/jenkins/jenkins-1/jenkins-1_9.png" alt="jenkins-1_9"><br><img src="/2017/04/14/jenkins/jenkins-1/jenkins-1_10.png" alt="jenkins-1_10"><br>다음과 같이 설정을 진행한다.<br>주의사항은. jenkins가 돌고있는 url 뒤에는 <code>/github-webhook/</code> 을 붙여주도록한다.(Install Notes에 상세히 기술되어있다.)<br>이제 git과 jenkins의 연동과 설정은 모두끝이났다. jenkins는 언제든지 git으로부터 프로젝트를 clone 받을준비가 된것이다.<br><br><br></p><h2 id="프로젝트-설정"><a href="#프로젝트-설정" class="headerlink" title="프로젝트 설정"></a>프로젝트 설정</h2><p>이제 본격적으로 jenkins에서 프로젝트를 설정해보자.<br>jenkins -&gt; 새로운 item -&gt; Freestyle project<br><br><br>[ 소스코드 관리 ]<br><img src="/2017/04/14/jenkins/jenkins-1/jenkins-1_11.png" alt="jenkins-1_11"><br>Repository URL -&gt; 프로젝트 ssh url을 입력한다.<br>Credentials -&gt; Add<br><img src="/2017/04/14/jenkins/jenkins-1/jenkins-1_12.png" alt="jenkins-1_12"><br>조금전에 생성한 id_rsa private key 를 입력하도록한다<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat ~/.ssh/id_rsa</div></pre></td></tr></table></figure></p><p>조금전에도 설명을 했듯이 jenkins와 git은 rsa 암호화 통신으로 인증을 수행하기에 , public key가 등록된 github와 jenkins는 private key를 등록을 하여야 인증이 성립되는것이다. private key를 입력한다.<br><code>rsa 알고리즘은 private key와 public key 간의 비대칭 알고리즘이다.rsa 알고리즘 암호화 통신일경우, private key는 public key로부터 암호화된 것을 복호화한다. 당연히 그반대로는 되지않는다 .</code><br><a href="http://daitso.kds.co.kr/27632/" target="_blank" rel="noopener">rsa 개념 참고</a><br><br><br>[ 빌드유발 ]<br><img src="/2017/04/14/jenkins/jenkins-1/jenkins-1_13.png" alt="jenkins-1_13"><br>GitHub hook trigger for GITScm polling<br>git에서 push event가 발생하면 jenkins가 자동으로 빌드한다.<br><br><br>[ Build ]<br>Add build step -&gt; Invoke top-level Maven targets -&gt; 고급<br><img src="/2017/04/14/jenkins/jenkins-1/jenkins-1_14.png" alt="jenkins-1_14"><br>jenkins가 maven을 활용하여 프로젝트를 빌드할때, pom.xml 에 기술되어있는 빌드설정을 참고한다. 필자는 다음과 같이 설정하였다.<br><img src="/2017/04/14/jenkins/jenkins-1/jenkins-1_15.png" alt="jenkins-1_15"><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">   ...</div><div class="line">   <span class="comment">&lt;!--</span></div><div class="line">author by jaehunpark</div><div class="line">현재 스프링 프로젝트 구조는 maven 기본 아키텍처에서 벗어났으므로, jenkins에서 maven을 빌드하면, src/main/java와 src/main/resources의</div><div class="line">기본 아키텍처를 기반으로 빌드를 한다.</div><div class="line">그러므로, maven이 기본 아키텍처외에도 자바소스와 resources들을 같이 빌드할수있도록 플러그인을통해 maven에게 경로를 알려주도록한다</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>build-helper-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                     <span class="tag">&lt;<span class="name">goal</span>&gt;</span>add-source<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                     <span class="tag">&lt;<span class="name">sources</span>&gt;</span></div><div class="line">                     <span class="comment">&lt;!-- src/main/skeletone/java도 함께빌드를 하자 --&gt;</span></div><div class="line">                         <span class="tag">&lt;<span class="name">source</span>&gt;</span>src/main/skeletone/java<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">                     <span class="tag">&lt;/<span class="name">sources</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">             <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">id</span>&gt;</span>add-resource<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">goal</span>&gt;</span>add-resource<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">             <span class="comment">&lt;!-- src/main/skeletone/resources도 함께빌드를 하자. 이곳이 비지니스로직이 설정이 전부있다.--&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/skeletone/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 추가로, 위의 소스레벨에 SQL xml이 함께있으므로, 소스레벨의 패키지를 적어주고 모든 SQL.xml을 검색해서 같이 resources로인식한다 --&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/skeletone/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">includes</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*SQL.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- src/main/skeletone/java 디렉토리 하위의 *.SQL.xml resources에서 상위 패키지, src/main/java 내의 SQL을 끌어씀으로 .. --&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">includes</span>&gt;</span></div><div class="line">              <span class="comment">&lt;!-- 상위 소스레벨의 SQL도함께 resources로 인식할수있도록 설정 .. --&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*SQL.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line"></div><div class="line">       <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>add-test-source<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-test-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span>            </div><div class="line">              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>add-test-source<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">sources</span>&gt;</span></div><div class="line">                     <span class="comment">&lt;!-- 해당경로의 unit test를 수행하자 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>src/test/skeletone/java<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">sources</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line"></div><div class="line">         <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"></div><div class="line">     <span class="comment">&lt;!-- maven이 설치된 개발버신의 jdk버전과 빌드 타켓 버전을 설정하도록한다.</span></div><div class="line">     설정하지않을시 MojoFailureException 발생. 굉장히 낮은버전의 jdk로 mvn을 빌드하는듯. maven은 자동으로 jdk버전을 인식하지않으므로 꼭 설정해주도록하자 . --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">   ...</div></pre></td></tr></table></figure></p><p>필자의 프로젝트 구조는 default 경로인 src/main/java 와 src/main/resources 경로에는 common 로직과 설정들이 존재한다.<br>실제 프로젝트관련 비지니스로직들은 src/main/skeletone/java와  src/main/skeletone/resources에 존재한다. 따라서 maven에게 추가적인 경로의 소스와 설정들도 같이 빌드하도록 알려주도록 설정되어있다.<br><br><br>[ 빌드 후 조치 ]<br><img src="/2017/04/14/jenkins/jenkins-1/jenkins-1_21.png" alt="jenkins-1_21"><br>이전에 설치한 플러그인을 사용할것이므로 [ Deploy war/ear to a container ] 추가하고,<br>메일로 빌드결과를 받을것이기에, [ E-mail Notification ] 을 추가한다.<br>이제 마지막으로 원격서버의 정보를 설정하고, 배포경로를 적어준다.<br>필자는 tomcat 배포 경로를 / 로 설정해주었다.<br>추가적으로 원격 서버의 tomcat 인증정보가 존재하여야한다. 이전의 포스트에도 해당내용이 있으니 참고하자.<br><a href="https://setyourmindpark.github.io/2017/04/12/java/java/#remote-서버-인증정보-설정">원격서버 인증 설정</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi conf/tomcat-users.xml</div></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-script"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"아이디"</span> <span class="attr">password</span>=<span class="string">"비밀번호"</span> <span class="attr">roles</span>=<span class="string">"manager-script"</span>/&gt;</span></div></pre></td></tr></table></figure><p>이제 모든 설정이 끝이났다. local 개발환경에서 프로젝트에 commit후 push event를 날려보자.<br><img src="/2017/04/14/jenkins/jenkins-1/jenkins-1_17.png" alt="jenkins-1_17"><br><img src="/2017/04/14/jenkins/jenkins-1/jenkins-1_18.png" alt="jenkins-1_18"><br><img src="/2017/04/14/jenkins/jenkins-1/jenkins-1_19.png" alt="jenkins-1_19"><br><img src="/2017/04/14/jenkins/jenkins-1/jenkins-1_20.png" alt="jenkins-1_20"></p><p> jenkins가 빌드부터 테스트, 배포, 그리고 결과통보까지 메일로 발송해줄것이다.<br><!-- 따라서 jenkins는 private key를 지녀야하고, github은 public key 를등록하여 rsa 암호화 통신으로 프로젝트를 jenkins가 원하는 언제든지 clone 할수있게되는것이다. --></p><h2 id="견해"><a href="#견해" class="headerlink" title="견해"></a>견해</h2><p>현재 포스트에서는 기본 설치된 플러그인들과 추가로 필요한 플러그인을 설치하여 자동화를 수행하였다. 이밖에도 jenkins에서 지원하는 플러그인이 아주 다양하게있으니, 필요한 플러그인을 추가로 설치하여 추구하는 방향으로 설정하면 jenkins의 가치를 알게될것이다.<br>jenkins와같은 CI(Continuous Integration) 은 jenkins 를 비롯해 아주 다양하게 존재한다.<br>travis CI도 nodejs 쪽에선 상당한 인기를 끄는것으로 알고있으며, 요즘들어 jenkins CI 보다는 다른 플랫폼의 CI를 더 많이 사용하는 느낌이기도하다. 필자도 travis를 한번 사용해봐야겠다는 생각이든다 (말로만 … )<br>아무튼, CI가 어떤것이고 어떤 기능을 수행할수있는지 알게되었다면, 다른CI 들도 좀더 쉽게 접근할수있을것이라 생각된다.</p><!-- http://daitso.kds.co.kr/27632/jenkins -> 새로운 item -> Freestyle project -->]]></content>
      
      <categories>
          
          <category> jenkins </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>maven으로 remote서버 배포하기</title>
      <link href="/2017/04/12/java/java/"/>
      <content type="html"><![CDATA[<h2 id="maven을-활용한-remote-서버-배포"><a href="#maven을-활용한-remote-서버-배포" class="headerlink" title="maven을 활용한 remote 서버 배포"></a>maven을 활용한 remote 서버 배포</h2><p>maven을 활용하여 로컬 개발환경 eclipse 또는 STS 환경에서 에서 remote로 원격배포가 가능하다.<br>이런 경우는 대게 보안적으로 크게 신경쓰지않는 프로젝트나, 어떠한 이유에 의해서 jenkins와 같은 third party 배포 프레임웍을 사용하지않거나, 또는 팀단위가 아닌 개인이 간단하게 개발된것을 수시로 배포해야하는 상황이라면 적합하다고 생각한다.</p><h2 id="maven-설치"><a href="#maven-설치" class="headerlink" title="maven 설치"></a>maven 설치</h2><p>먼저 배포하기에앞서, 시스템에 maven이 설치되어있어야한다.<br>maven을 설치해보자 <a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">apache</a> 에서 쉽게 받을수있다.<br>3.5.0 버전이 최신버전임을 확인할수있다.( 저번주까지 3.3.9 버전이었는데 .. )<br>다운을 받았다면 이제 시스템에 환경변수를 등록하자.<br>필자는 OSX 를 사용하기에, 계정레벨 환경변수에 등록했다<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi ~/.bash_profile</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export M3_HOME=/Users/jaehunpark/Documents/jaehunpark/utility/apache-maven-3.5.0</div><div class="line">export M3=$M3_HOME/bin</div><div class="line">export PATH=$PATH:$M3</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ source ~/.bash_profile</div></pre></td></tr></table></figure><p>환경변수를 적용하였다면 maven 버전을 확인해보자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mvn -v</div></pre></td></tr></table></figure></p><p>maven 버전이 확인이된다면 정상적으로 설치가 된것이다.<br><br><br></p><h2 id="remote-서버-인증정보-설정"><a href="#remote-서버-인증정보-설정" class="headerlink" title="remote 서버 인증정보 설정"></a>remote 서버 인증정보 설정</h2><p>로컬 환경에서 원격 서버로 자유롭게 배포하기위해선, 원격서버에서 배포자의 인증정보가 존재해야한다.<br>tomcat의 디렉토리에서<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi conf/tomcat-users.xml</div></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-script"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"아이디"</span> <span class="attr">password</span>=<span class="string">"비밀번호"</span> <span class="attr">roles</span>=<span class="string">"manager-script"</span>/&gt;</span></div></pre></td></tr></table></figure><p>를 입력하면 인증정보설정이 끝난것이다. 간단하지않은가 ?<br>이밖에도 여러 옵션이있지만,</p><ul><li>manager-gui — Access to the HTML interface.</li><li>manager-status — Access to the “Server Status” page only.</li><li>manager-script — Access to the tools-friendly plain text interface that is described in this document, and to the “Server Status” page.</li><li>manager-jmx — Access to JMX proxy interface and to the “Server Status” page.</li></ul><p>원격서버로 배포하는것이 목적이므로 manager-script 권한만 설정하도록한다.<br>자세한 정보는 <a href="https://www.lesstif.com/pages/viewpage.action?pageId=18220165" target="_blank" rel="noopener">tomcat manager doc</a>에 아주 자세히나와있다 …<br><br><br></p><h2 id="배포하기"><a href="#배포하기" class="headerlink" title="배포하기"></a>배포하기</h2><p>이제 모든 준비는 끝났다. 로컬 개발머신에서, 배포하고자하는 프로젝트를 build 하기만하면된다.<br>배포하고자 하는 프로젝트의 maven pom.xml에 플러그인을 추가한다<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://remote서버ip:포트/manager/text<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>아이디<span class="tag">&lt;/<span class="name">username</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>비밀번호<span class="tag">&lt;/<span class="name">password</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">update</span>&gt;</span>true<span class="tag">&lt;/<span class="name">update</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure></p><ul><li><path></path>프로젝트 배포 최상의 경로 이름지정</li><li><url><a href="http://remote서버ip:포트/manager/text" target="_blank" rel="noopener">http://remote서버ip:포트/manager/text</a></url></li></ul><p>필자는 프로젝트 배포를 / 를 최상위로 설정하였다.<br>다음으로 프로젝트 우클릭 -&gt; Run As -&gt; Maven build<br><img src="/2017/04/12/java/java/java_1.png" alt="java_1"><br>Goals에 tomcat7:redeploy -&gt; Run</p><p><img src="/2017/04/12/java/java/java_2.png" alt="java_2"><br>maven이 빌드를 시작하게되고 unit test 까지 마친후 , 최종적으로 BUILD SUCCESS가 떨어졌다.<br>이제 원격서버에 제대로 반영이 되었는지 확인해보자</p><p><img src="/2017/04/12/java/java/java_3.png" alt="java_3"></p><p>필자는 page 대신 rest 기반을 프로젝트를 구성하였기에 api호출시 정상적으로 동작하는것을 확인할수있다.<br><br><br></p><h2 id="견해"><a href="#견해" class="headerlink" title="견해"></a>견해</h2><p>필자는 원격서버 tomcat 버전이 7.XX을 사용하므로, tomcat7:redeploy 라는 명령을 사용하였으나,원격서버의 tomcat 버전이 8.XX 인경우에도 무방한것으로 확인된다.<br>보안이 중요하지않은 프로젝트는 없겠지만, 개인이 간단히 테스트용으로 개발결과물을 빠르게 올리기에는 최고의 방법인것 같다.</p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>jenkins</title>
      <link href="/2017/04/09/jenkins/jenkins/"/>
      <content type="html"><![CDATA[<h2 id="jenkins"><a href="#jenkins" class="headerlink" title="jenkins"></a>jenkins</h2><p>jenkins란 흔히들 CI(continuous integration) 이라고들 이야기한다.<br>CI란 개발자가 개발한 결과물 에대해서 수정,배포를 용이하게 하는 일종에 중간에 비서같은 역활을 수행한다.<br><a href="https://jenkins.io/" target="_blank" rel="noopener">jenkins</a> 공식사이트를 보면, 상단에 중년의 남성이(?) 맞이하는걸 볼수있다.<br><br><br></p><h2 id="jenkins의-활용"><a href="#jenkins의-활용" class="headerlink" title="jenkins의 활용"></a>jenkins의 활용</h2><p>jenkins의 주목적은 위에서 언급한 바와같이 ‘지속적인 통합이다’.<br>최종적으로 배포서버에 안정적으로 배포가 가능하도록 하는것이 jenkins가 추구하는 방향이다.<br>그럼 ‘안정적인 배포’는 어떤의미일까.<br>서비스를하는 기업은 개발한 서비스를 소비자가 이용하는데에 있어서 불편함이없어야한다.<br>jenkins를 활용하면 배포전에 jUnit test(java), mocha(nodejs) 등 개발환경에따라 배포전 사전작업을 무엇이든지 시킬수있다.<br>또한 test 수행 결과에 있어서 개발자들에게 메일발송이나, 소스코드 검증과같은 sonar qube 와 같은 third party plugin을 활용할수있다.<br>우리의 든든한 비서는 무엇이든지 수행할수있다.<br><br><br></p><h2 id="jenkins-시작하기"><a href="#jenkins-시작하기" class="headerlink" title="jenkins 시작하기"></a>jenkins 시작하기</h2><p><a href="https://setyourmindpark.github.io/2017/04/08/docker-2/">이전포스트</a>에서 docker를 활용하여 jenkins 환경을 구성하였다.<br>이 docker 컨테이너를 이용하여 jenkins를 시작해보자.</p><p><img src="/2017/04/09/jenkins/jenkins/jenkins_1.png" alt="jenkins_1"><br>docker container로 실행된 jenkins를 접속하게되면, password를 입력하라고 나오게된다.<br>이제 jenkins 가 알려준 경로의 비밀번호를 확인해보자<br>먼저 docker container에 접속한다<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker exec -it jenkins /bin/bash</div></pre></td></tr></table></figure></p><p>접속을하였다면 비밀번호를 출력하자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat /root/.jenkins/secrets/initialAdminPassword</div></pre></td></tr></table></figure></p><p>출력되는 비밀번호를 jenkins에 입력한다 .</p><p><img src="/2017/04/09/jenkins/jenkins/jenkins_2.png" alt="jenkins_2"><br><img src="/2017/04/09/jenkins/jenkins/jenkins_3.png" alt="jenkins_3"><br>비밀번호 입력후 jenkins가 제안하는 plugin을 설치한다.<br>jenkins에 익숙한 분들이라면 select plugins to install 에서 플러그인들을 선택해서 원하는 플러그인을 설치해도 무방하다.</p><p><img src="/2017/04/09/jenkins/jenkins/jenkins_4.png" alt="jenkins_4"><br>설치가 진행이 완료되면, jenkins 에 접속될 계정을 생성한다</p><p><img src="/2017/04/09/jenkins/jenkins/jenkins_5.png" alt="jenkins_5"><br>이제 jenkins를 시작할 준비를 모두마쳤다 !<br><br><br></p><h2 id="견해"><a href="#견해" class="headerlink" title="견해"></a>견해</h2><p>jenkins를 사용하지않는다면, 개발한 결과물에대해서는 자체 test를 내부적으로 한번 진행을 하고, 부가적으로 filezilla와 같은 프로그램을통해 원격 서버에 접속을하여 직접 배포를 해야할것이다.<br>특히 한번올리고 끝이아니라, 수정또는 기능추가로 버전이 올라가 잦은 재배포를 해야할경우에 jenkins의 가치가 증명될거라 생각된다.<br>필자는 사실 모든걸 다알기전에는 실천하지않는 이상한 습관이있다.<br>‘배운것을 깔짝 쓸바에야 전부다 알고 제대로 쓰겠다 ‘라는 아주 이상한 마인드가 있다.<br>jenkins를 처음접하는 분들이라면 처음에는 좀 생소할수있으나, 한번두번씩 따라해다보면 금방 익숙해질것이다.</p>]]></content>
      
      <categories>
          
          <category> jenkins </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>docker-compose</title>
      <link href="/2017/04/08/docker/docker-2/"/>
      <content type="html"><![CDATA[<h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><p><a href="https://setyourmindpark.github.io/2017/04/06/docker/docker-1/">docker 시작하기</a> 이전포스트에서 docker의 설치와 이미지파일 생성등을 알아보았다.<br>다음의 명령어는 생성된 이미지파일을 컨테이너로 실행하는 명령이다<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run -d -p 89:8080 --name jenkins -v /home/docker/jenkins/jenkins_data:/root  jenkins</div></pre></td></tr></table></figure></p><p>그렇다면, 생성된 이미지파일이 다수일경우, 위와같은 명령어를 이미지명과, volume 경로등 개별 옵션들을 변경하여 명령어를 입력해야한다<br>다수의 이미지들을 정해진 설정으로 한번에 컨테이너로 모두 만들수는없을까 ?<br>docker-compose 활용하면, 작성해둔 이미지별 설정정보로 한번에 여러이미지를 컨테이너로 만들수있다.<br>설치부터 한번 알아보자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.9.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</div><div class="line"></div><div class="line">$ sudo chmod +x /usr/local/bin/docker-compose</div></pre></td></tr></table></figure></p><p>docker-compose를 정상적으로 설치되었다면 버전을 확인해보자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker-compose --version</div></pre></td></tr></table></figure></p><p>버전이 표시된다면, 정상적으로 설치가된것이다 .<br><br><br></p><h2 id="docker-compose-사용하기"><a href="#docker-compose-사용하기" class="headerlink" title="docker-compose 사용하기"></a>docker-compose 사용하기</h2><p>docker-compose를 사용하는방법으로, 먼저 docker-compose는 yml 확장자를 가진 파일을 생성하도록한다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi docker-compose.yml</div></pre></td></tr></table></figure></p><p>이제 ‘이미지파일을 어떻게 실행할 것인가’ 에대한 설정을 시작한다<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">version: &apos;2&apos;</div><div class="line">services:</div><div class="line">  mariadb:</div><div class="line">    image: mariadb</div><div class="line">    ports:</div><div class="line">      - &quot;3306:3306&quot;</div><div class="line">    environment:</div><div class="line">      - MYSQL_ROOT_PASSWORD=0000</div><div class="line">      - TZ=Asia/Seoul</div><div class="line">    volumes:</div><div class="line">      - /home/jaehunpark/docker/mariadb/mariadb_data:/var/lib/mysql</div><div class="line">    command:</div><div class="line">      - &quot;mysqld&quot;</div><div class="line">      - &quot;--character-set-server=utf8mb4&quot;</div><div class="line">      - &quot;--collation-server=utf8mb4_unicode_ci&quot;</div><div class="line">    container_name: mariadb</div><div class="line">  jenkins:</div><div class="line">    image: jenkins</div><div class="line">    ports:</div><div class="line">      - &quot;89:8080&quot;</div><div class="line">    volumes:</div><div class="line">      - /home/jaehunpark/docker/jenkins/jenkins_data:/root</div><div class="line">    container_name: jenkins</div><div class="line">  deploy:</div><div class="line">    image: deploy</div><div class="line">    ports:</div><div class="line">      - &quot;33:22&quot;</div><div class="line">      - &quot;88:4000&quot;</div><div class="line">    volumes:</div><div class="line">      - /home/jaehunpark/docker/deploy/deploy_data:/root</div><div class="line">    tty: true</div><div class="line">    depends_on:</div><div class="line">      - mariadb</div><div class="line">    container_name: deploy</div></pre></td></tr></table></figure></p><p>필자는 위와같이 docker-compose를 사용한다. mariadb는 순수 docker hub에서 제공하는 이미지를 사용하고, jenkins와 deploy 는 Dockerfile을 만들어 이미 이미지로 생성된 상태로 설정정보를 진행하였다.<br><a href="https://docs.docker.com/compose/overview/" target="_blank" rel="noopener">docker-compose 공식문서</a>를 참고하도록하자 .<br><br><br></p><h2 id="docker-compose-를사용하여-컨테이너-실행"><a href="#docker-compose-를사용하여-컨테이너-실행" class="headerlink" title="docker-compose 를사용하여 컨테이너 실행"></a>docker-compose 를사용하여 컨테이너 실행</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker-compose up -d</div></pre></td></tr></table></figure><ul><li>-d 백그라운드로 실행</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mariadb is up-to-date</div><div class="line">deploy is up-to-date</div><div class="line">Creating jenkins</div></pre></td></tr></table></figure><p>이미지가 이미 컨테이너로 실행되어있으면, up-to-date를, 이미지를 컨테이너로 처음 실행된다면 Creating jenkins를 표시한다.<br>이제 컨테이너가 정상적으로 실행되었는지 확인해보자 .<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker ps -a</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS                                                               NAMES</div><div class="line">4a3cf0852e58        jenkins             &quot;/opt/tomcat/bin/cata&quot;   4 minutes ago       Up 4 minutes              0.0.0.0:89-&gt;8080/tcp                                                jenkins</div><div class="line">5846e1ba049f        deploy              &quot;/usr/sbin/sshd -D&quot;      47 hours ago        Up 47 hours               0.0.0.0:33-&gt;22/tcp, 0.0.0.0:88-&gt;3000/tcp, 0.0.0.0:87-&gt;4000/tcp      deploy</div><div class="line">7a53b6623118        mariadb             &quot;docker-entrypoint.sh&quot;   3 months ago        Up 4 days                 0.0.0.0:3306-&gt;3306/tcp                                              mariadb</div></pre></td></tr></table></figure><p>실행한후, 컨테이너가 제대로 실행되었는지, STATUS 탭 을 꼭확인하도록하자.<br>만약 Exited 라고 표시되었다면 컨테이너 실행도중 죽은것이므로 docker-compose.yml 파일을 다시한번 체크하도록 하자. (특히 docker-compose.yml 에 기술하는 services들의 문법이 엄격하다 특히 띄어쓰기를 주의해야한다)<br><br><br></p><h2 id="견해"><a href="#견해" class="headerlink" title="견해"></a>견해</h2><p>docker-compose를 통해 다중 이미지들을 컨테이너로 실행하는 법을 알아보았다.<br>현재 글에서 docker-compose 버전은 2를 사용하고있다. 현재 3.1버전까지 나온상태로 확인이된다.<br>음 .. docker-compose 3.x 를 사용한후 익숙해지면 새롭게 포스트를 올리도록 하겠다.</p>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>docker 시작하기</title>
      <link href="/2017/04/07/docker/docker-1/"/>
      <content type="html"><![CDATA[<h2 id="docker-설치"><a href="#docker-설치" class="headerlink" title="docker 설치"></a>docker 설치</h2><p>설치환경은 linux ubuntu 16.04.2 LTS 환경에서 진행한다<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get install docker.io</div><div class="line">$ sudo ln -sf /usr/bin/docker.io /usr/local/bin/docker</div></pre></td></tr></table></figure></p><p>정상적으로 설치가 완료되었다면 이제, 버전을 확인해보자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker --version</div></pre></td></tr></table></figure></p><p>현재시점의 docker 의 버전은 Docker version 1.12.6, build 78d1802 가 출력되는것을 확인할수있다<br><br><br></p><h2 id="이미지-환경패키징"><a href="#이미지-환경패키징" class="headerlink" title="이미지 환경패키징"></a>이미지 환경패키징</h2><p>docker는 배포에 특화된 기술이라고 <a href="https://setyourmindpark.github.io/2017/04/06/docker/docker/">이전포스트</a> 에서 언급한바 있다. 한번 만들어놓은 이미지(환경이 패키징된)는 docker가 설치된 환경이라면 쉽게 생성할수있다.<br>그럼 이미지파일은 어떻게 만들까 ?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi Dockerfile</div></pre></td></tr></table></figure></p><p>vi 편집기로 Dockerfile을 열어, 환경정보를 구성한다<br>이제 실제 환경정보를 기술하자<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> debian</div><div class="line"><span class="keyword">MAINTAINER</span> jaehunpark <span class="string">"setyourmindpark@gmail.com"</span></div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; DEBIAN_FRONTEND=noninteractive apt-get install -y locales</span></div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="_">-e</span> <span class="string">'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'</span> /etc/locale.gen &amp;&amp; \</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">'LANG="en_US.UTF-8"'</span>&gt;/etc/default/locale &amp;&amp; \</div><div class="line">    dpkg-reconfigure --frontend=noninteractive locales &amp;&amp; \</div><div class="line">    update-locale LANG=en_US.UTF-8</div><div class="line"></div><div class="line"><span class="keyword">ENV</span> LANG en_US.UTF-<span class="number">8</span></div><div class="line"><span class="keyword">ENV</span> LANGUAGE en_US:en</div><div class="line"><span class="keyword">ENV</span> LC_ALL en_US.UTF-<span class="number">8</span></div><div class="line"></div><div class="line"><span class="comment"># set timezone</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime</span></div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash"> \</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"===&gt; add webupd8 repository..."</span>  &amp;&amp; \</div><div class="line">    <span class="built_in">echo</span> <span class="string">"deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main"</span> | tee /etc/apt/sources.list.d/webupd8team-java.list  &amp;&amp; \</div><div class="line">    <span class="built_in">echo</span> <span class="string">"deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main"</span> | tee <span class="_">-a</span> /etc/apt/sources.list.d/webupd8team-java.list  &amp;&amp; \</div><div class="line">    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886  &amp;&amp; \</div><div class="line">    apt-get update</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"===&gt; install Java"</span>  &amp;&amp; \</span></div><div class="line">    <span class="built_in">echo</span> debconf shared/accepted-oracle-license-v1-1 select <span class="literal">true</span> | debconf-set-selections  &amp;&amp; \</div><div class="line">    <span class="built_in">echo</span> debconf shared/accepted-oracle-license-v1-1 seen <span class="literal">true</span> | debconf-set-selections  &amp;&amp; \</div><div class="line">    DEBIAN_FRONTEND=noninteractive  apt-get install -y --force-yes oracle-java8-installer oracle-java8-set-default</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"===&gt; clean up..."</span>  &amp;&amp; \</span></div><div class="line">    rm -rf /var/cache/oracle-jdk8-installer  &amp;&amp; \</div><div class="line">    apt-get clean  &amp;&amp; \</div><div class="line">    rm -rf /var/lib/apt/lists/*</div><div class="line"></div><div class="line"><span class="keyword">ENV</span> TOMCAT_VERSION=<span class="number">8.5</span>.<span class="number">13</span></div><div class="line"></div><div class="line"><span class="comment"># Get Tomcat</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> wget --quiet --no-cookies http://apache.tt.co.kr/tomcat/tomcat-8/v<span class="variable">$&#123;TOMCAT_VERSION&#125;</span>/bin/apache-tomcat-<span class="variable">$&#123;TOMCAT_VERSION&#125;</span>.tar.gz -O /tmp/tomcat.tar.gz &amp;&amp; \</span></div><div class="line">    tar xzvf /tmp/tomcat.tar.gz -C /opt &amp;&amp; \</div><div class="line">    mv /opt/apache-tomcat-<span class="variable">$&#123;TOMCAT_VERSION&#125;</span> /opt/tomcat &amp;&amp; \</div><div class="line">    rm /tmp/tomcat.tar.gz</div><div class="line"></div><div class="line"><span class="keyword">ENV</span> CATALINA_HOME /opt/tomcat</div><div class="line"></div><div class="line"><span class="comment"># jenkins download</span></div><div class="line"><span class="comment">#RUN wget --quiet --no-cookies http://mirrors.jenkins.io/war-stable/latest/jenkins.war -O $&#123;CATALINA_HOME&#125;/webapps/jenkins.war</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> wget --quiet --no-cookies http://mirrors.jenkins.io/war-stable/2.7.2/jenkins.war -O <span class="variable">$&#123;CATALINA_HOME&#125;</span>/webapps/jenkins.war</span></div><div class="line"></div><div class="line"><span class="keyword">ENV</span> MAVEN_VERSION=<span class="number">3.3</span>.<span class="number">9</span></div><div class="line"></div><div class="line"><span class="comment"># Get Maven</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> wget --quiet --no-cookies http://apache.tt.co.kr/maven/maven-3/<span class="variable">$&#123;MAVEN_VERSION&#125;</span>/binaries/apache-maven-<span class="variable">$&#123;MAVEN_VERSION&#125;</span>-bin.tar.gz -O /tmp/maven.tar.gz &amp;&amp; \</span></div><div class="line">    tar xzvf /tmp/maven.tar.gz -C /opt &amp;&amp; \</div><div class="line">    mv /opt/apache-maven-<span class="variable">$&#123;MAVEN_VERSION&#125;</span> /opt/maven &amp;&amp; \</div><div class="line">    rm /tmp/maven.tar.gz</div><div class="line"></div><div class="line"><span class="keyword">ENV</span> M3_HOME /opt/maven</div><div class="line"><span class="keyword">ENV</span> PATH=$&#123;M3_HOME&#125;/bin:$&#123;PATH&#125;</div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; \</span></div><div class="line">    apt-get install -y vim &amp;&amp; \</div><div class="line">    apt-get install -y git-core &amp;&amp; \</div><div class="line">    apt-get install -y curl &amp;&amp; \</div><div class="line">    curl <span class="_">-s</span>L https://deb.nodesource.com/setup_6.x | bash - &amp;&amp; apt-get install -y nodejs</div><div class="line"></div><div class="line"><span class="keyword">VOLUME</span><span class="bash"> /root</span></div><div class="line"></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></div><div class="line"></div><div class="line"><span class="comment"># Launch Tomcat</span></div><div class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/opt/tomcat/bin/catalina.sh"</span>, <span class="string">"run"</span>]</span></div></pre></td></tr></table></figure></p><p>jenkins 환경구성을 예로든 Dockerfile을 한번 살펴보자.<br>가장 상위에 FROM 이 보인다, 이부분은 상위의 이미지파일을 참조하겠다는 의미로 받아들이면 편할듯하다<br>필자는 얼마전까지 openjdk 를 기반으로 jenkins 환경구성을 패키징하였으나, 스프링과 같은 자바 프레임웍을 빌드하는데있어 openjdk가 좀 찝집한면이 업지않아있어 ..debian 으로 구성하였다.<br>물론 ubuntu와, centos등 지향하는 os를 선택해서 base로 사용할수있다.<br>base 이미지는 <a href="https://hub.docker.com/" target="_blank" rel="noopener">dockerhub</a> 에서 제공하는 녀석들만 해당되므로 참고하도록하자<br>환경 구성에 필요한 다양한 명령어에 대한 설명은 <a href="https://docs.docker.com/engine/reference/builder/#from" target="_blank" rel="noopener">docker document</a><br>를 참고하도록 하자 .<br><br><br></p><h2 id="이미지-생성"><a href="#이미지-생성" class="headerlink" title="이미지 생성"></a>이미지 생성</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo docker build &lt;옵션&gt; &lt;Dockerfile 경로&gt;</div><div class="line">$ sudo docker build --tag jenkins .</div></pre></td></tr></table></figure><ul><li>–tag : 이미지이름</li></ul><p>명령어를 실행하면, docker 가 열심히 이미지를 제작하는것을 확인할수있다<br>생성이 모두 끝났다면,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker images</div></pre></td></tr></table></figure></p><p>REPOSITORY 부분의 jenkins 가 보일것이다.<br>만약 <none> 으로 표시된다면, 이미지생성에 실패했거나, 생성중 에러가 발생한것이므로, Dockerfile에 작성된 명령어를 다시한번 확인하도록 하자<br><br><br></none></p><h2 id="이미지-삭제"><a href="#이미지-삭제" class="headerlink" title="이미지 삭제"></a>이미지 삭제</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo docker rmi &lt;옵션&gt; &lt;REPOSITORY:TAG or IMAGE ID&gt;</div><div class="line">$ sudo docker rmi jenkins</div></pre></td></tr></table></figure><ul><li>-f : 이미지 강제삭제<br><br></li></ul><h2 id="이미지를-컨테이너로-실행"><a href="#이미지를-컨테이너로-실행" class="headerlink" title="이미지를 컨테이너로 실행"></a>이미지를 컨테이너로 실행</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run &lt;옵션&gt; &lt;REPOSITORY:TAG or IMAGE ID&gt;</div><div class="line">$ sudo docker run -d -p 89:8080 --name jenkins -v /home/docker/jenkins/jenkins_data:/root  jenkins</div></pre></td></tr></table></figure><ul><li>-d : 백그라운드로실행</li><li>-p : 포트포워딩 ex) -p 외부:내부</li><li>–name : 컨테이너 이름 (NAMES로 바인딩)</li><li>-v(–volume) : 호스트 디렉토리와 컨테이너 내부디렉토리 공유 ex) –volume /testData:/test (호스트 /testData디렉토리와 컨테이너 /test 디렉토리 공유, 없으면 자동생성)</li><li>–volumes-from : 이미호스트에 연결된 컨테이너 A를 다른 컨테이너 B,C,D와 연결<br>컨테이너 A만 호스트와 연결하기위해 존재, B,C,D 는 A에 연결하여 사용 ex) volumes-from containerA</li><li>-e : 환경변수 세팅<br><br><br></li></ul><h2 id="실행중인-컨테이너-확인"><a href="#실행중인-컨테이너-확인" class="headerlink" title="실행중인 컨테이너 확인"></a>실행중인 컨테이너 확인</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo docker ps &lt;옵션&gt;</div><div class="line">$ sudo docker ps -a</div></pre></td></tr></table></figure><ul><li>-a : 모든 프로세스 보기<br><br><br></li></ul><h2 id="실행중인-컨테이너-중지"><a href="#실행중인-컨테이너-중지" class="headerlink" title="실행중인 컨테이너 중지"></a>실행중인 컨테이너 중지</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo docker stop &lt;NAMES OR CONTAINER ID&gt;</div><div class="line">$ sudo docker stop jenkins</div></pre></td></tr></table></figure><p><br><br></p><h2 id="컨테이너-삭제"><a href="#컨테이너-삭제" class="headerlink" title="컨테이너 삭제"></a>컨테이너 삭제</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo docker rm &lt;옵션&gt; &lt;NAMES OR CONTAINER ID&gt;</div><div class="line">$ sudo docker rm -f jenkins</div></pre></td></tr></table></figure><ul><li>-f : 컨테이너 강제종료<br><br><br></li></ul><h2 id="컨테이너-접속"><a href="#컨테이너-접속" class="headerlink" title="컨테이너 접속"></a>컨테이너 접속</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo docker exec &lt;옵션&gt; &lt;NAMES OR CONTAINER ID&gt; bash</div><div class="line">$ sudo docker exec -it jenkins /bin/bash</div></pre></td></tr></table></figure><ul><li>-i : interactive 한 환경 구성 컨테이너와 상호작용 (input output)</li><li>-t : 터미널과 같은 환경 조성 (tty)</li><li>-u : 계정</li></ul><h2 id="견해"><a href="#견해" class="headerlink" title="견해"></a>견해</h2><p>위에서 예로든 Dockerfile 은 필자가 직접 환경을 패키징을 한것이고, 기본적으로 <a href="https://hub.docker.com/" target="_blank" rel="noopener">dockerhub</a> 에서 제공하는 이미지파일도 굉장히 많다 (물론 docker hub에서 jenkins도 제공한다)<br>각자가 추구하는 방향에 따라 docker를 사용한다면, 원하는 환경을 빠르게 구성할수있을것이라고 생각된다.<br>docker 에대한 명령어나, 자세한 정보를 알고자면 <a href="https://docs.docker.com/engine/reference/run/" target="_blank" rel="noopener">공식문서</a> 를 참조하는것이 좋겠다.</p>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>docker</title>
      <link href="/2017/04/06/docker/docker/"/>
      <content type="html"><![CDATA[<h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><p>도커란 무엇인가 ?</p><ul><li>분산서버에대한 관리와 환경설정의 부담으로 2013년에 나타난 새로운기술</li><li>하드웨어 스펙이 좋아짐에따라 분산서버를 구성할 필요성을 덜 느끼게되어 하나의 물리서버에서 분산된 서버구축할수있는 효과를 가져다줌</li><li>도커는 서비스 운영환경에 필요한 (node, jdk, mysql 등등) 과 같은 서버환경에 필요한 운영설정등을 패키징된 것이 이미지</li><li>이미지파일을 실행한 상태를 컨테이너</li><li>서버의 운영과 배포에 특화된 기술</li></ul><h2 id="가상머신가-무엇이다른가"><a href="#가상머신가-무엇이다른가" class="headerlink" title="가상머신가 무엇이다른가 ?"></a>가상머신가 무엇이다른가 ?</h2><ul><li>가상머신과 달리 게스트 OS를 설치할 필요가없음</li><li>가상머신은 호스트 OS 안에 게스트 OS로 구동되는 또하나의 OS 지만, 도커는 설정 정보만 기술하여 이미지생성, 컨테이너 생성후 모든 실행프로세스는 게스트 OS에서 직접 실행됨 (가상이 아닌 격리)</li><li>가상머신의 역활을 할뿐만아니라, 컨테이너 간의 환경정보 공유</li></ul><h2 id="docker의-장점"><a href="#docker의-장점" class="headerlink" title="docker의 장점"></a>docker의 장점</h2><ul><li>하나의 물리서버에서 분산서버를 구축한 효과를 가져다줌</li><li>게스트 OS 설치가 없으므로 시간과 불필요한 시스템 자원을 낭비 X</li><li>무엇보다도 서버설치에 들어가는 환경구성,설치, 설정 과 같은 작업들을 쉽게 구성할수있을뿐아니라, 설정을통해 만들어진 이미지파일을 손쉽게 재사용이 가능</li></ul><h2 id="견해"><a href="#견해" class="headerlink" title="견해"></a>견해</h2><p>프로젝트를 진행하다, docker와 유사한 XenServer 라는 기술을 얼핏 접하게되었는데,<br>docker와 상당히 유사한점이 많았다.<br>docker와 비교하자면, 리눅스기반 XenServer가 실제 물리서버가 되는것이고 (docker 의 host os) 그 하위의 가상의 os를 설치하는식이었다.<br>이런 VM(virtual machine) 들은 docker와 가장큰 차이를 보이는것은, 생산성이라고 생각된다<br>docker 같은경우는 docker hub와 같은 커뮤니티를 통해 os와 함께 필요한 구성이 패키징된 이미지를 아주쉽게 pull 할수있는반면, XenServer 와같은 VM 들은 가상의 OS를 이미지파일로 새로 설치한다는 점이다. (물론 환경구성도 직접 해야한다)<br>XenServer 를 세부적으로 다뤄보진않았지만 음 .. docker 를 사용하다 XenServer란것도 있구나 … 이정도 ?</p>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>nvm</title>
      <link href="/2017/04/06/nodejs/nodejs/"/>
      <content type="html"><![CDATA[<h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><p>node 를 기반으로 개발하는 개발자라면 node 를 시스템이 설치할것이다.<br>nvm이란 flexible 하게 node 버전을 관리할수있으므로, 기왕 node 를 설치하고자한다면, nvm을 활용하여 node 버전을 쉽게 관리할수있다.<br><br><br></p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><p>nvm 관련 정보는 <a href="https://github.com/creationix/nvm/blob/master/README.markdown" target="_blank" rel="noopener">이곳 </a> 을 참조하면 nvm에대한 다양한 명령어와 정보를 확인할수있다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash</div></pre></td></tr></table></figure></p><p>nvm 명령어를 사용하기위해 환경변수 등록 (~/.bashrc, ~/.profile, or ~/.zshrc)한다<br>필자는 계정레벨에서만 nvm을 사용할것이므로 ~/.bash_profile 에 환경변수를 등록한다<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</div><div class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</div></pre></td></tr></table></figure></p><p>이제 nvm이 잘 설치되었는지 버전을 확인해보자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm --version</div></pre></td></tr></table></figure></p><p>nvm 버전정보가 나온다면 nvm이 제대로 설치된것임을 확인할수있다.<br><br><br></p><h2 id="node-설치"><a href="#node-설치" class="headerlink" title="node 설치"></a>node 설치</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm install node</div></pre></td></tr></table></figure><p>버전정보를 지정해주지 않을시 nvm은 node의 가장 최신버전을 설치한다<br>그렇다면 nvm이 설치가능한 node 모든 버전을 확인할수있을까 ?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm ls-remote</div></pre></td></tr></table></figure></p><p>설치할수있는 모든 node의 버전이 표시된다<br>이제 특정 node 버전을 설치해보자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm install &lt;버전&gt;</div></pre></td></tr></table></figure></p><p>nvm ls-remote 로 확인한 목록중 특정버전을 위와같이 설치할수있다.<br>기본적으로 새롭게 설치한 노드의 버전이 default로 시스템에 잡혀있을것이다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node --version</div></pre></td></tr></table></figure></p><p>방금 설치한 node의 버전이 자동으로 시스템에서 사용중임을 알수있다.<br>nvm을 통해 현재 시스템에 설치된 node의 리스트를 확인해보자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm ls</div></pre></td></tr></table></figure></p><p>현재 시스템에 설치된 모든 node 의 버전들이 표시된다.<br>설치된 node 버전중 시스템에서 특정버전을 사용할수있도록 설정해보자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm use &lt;버전&gt;</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node --version</div></pre></td></tr></table></figure><p>시스템이 사용하는 node 버전이 변경됨을 확인할수있다.<br><br>but 터미널을 종료하고 새로운 터미널에서 node 버전을 재확인시, nvm을 통해 가장 마지막에 설치한 node의 버전으로 되돌아가있을것이다 ..<br>시스템 node의 버전을 특정 버전으로 고정시키자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm alias default &lt;버전&gt;</div></pre></td></tr></table></figure></p><p>시스템에 특정 node 버전을 default로 사용하도록한다<br><br><br></p><h2 id="의견"><a href="#의견" class="headerlink" title="의견"></a>의견</h2><p>node 7.XX에서는 차후 es7애 탑제될 async, await 문법이 사용가능한것으로 안다.<br>실제로 stackoverflow등에서 이미 es7 문법에대한 커뮤니티가 활발한것을 확인할수있다.<br>node의 버전이 새롭게 나올때마다 새로운 node의 버전을 설치하는것 보다는, node의 버전을 골라서 시스템에서 사용할수있는점이 nvm의 가장큰 매력이라고 생각된다<br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p>필자는 nvm을 통해 node를 설치하였을시, 자동으로 최신버전인 v7.8.0 이 설치되었다.<br>‘와 벌써 node 버전이 이만큼이나 높아졌네 ? ‘ 라고생각한후, hexo 를 설치하는데… 설치도중 에러가 ….<br>결국 node 공식 사이트에서 제공하는 stable 버전 을 확인한후, (현재시점은 v6.10.1 ) nvm으로 해당버전을 재설치후 hexo를 다시 설치하니 정상적으로 설치가되는 이슈가있었다..<br>이밖에도 hexo 뿐만아니라, node를 기반으로 사용하는 다른 third party 라이브러리에서 node의 최신버전이 지원되지않을수도있으니.. 참고하도록하자</p>]]></content>
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
